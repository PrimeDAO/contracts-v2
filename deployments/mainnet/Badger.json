{
  "address": "0x9241627B130665b0a1e5636F1CC211895687BF25",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        }
      ],
      "name": "TierChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uriIds",
          "type": "string[]"
        },
        {
          "internalType": "bool[]",
          "name": "transferable",
          "type": "bool[]"
        }
      ],
      "name": "batchCreateTokenTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnFromMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseUri",
          "type": "string"
        }
      ],
      "name": "changeBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        }
      ],
      "name": "createTokenTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintToMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenTiers",
      "outputs": [
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromWithoutData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "uriIds",
          "type": "string[]"
        }
      ],
      "name": "updateMultipleUriIdentifiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transferable",
          "type": "bool"
        }
      ],
      "name": "updateTransferableStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriId",
          "type": "string"
        }
      ],
      "name": "updateUriIdentifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c174dbdf0b1418f235663292e5b0b246913d298edc43dd5ae3ff056977bf733",
  "receipt": {
    "to": null,
    "from": "0x1c967aa45E5E67e872feaC71eD816AD361599aA6",
    "contractAddress": "0x9241627B130665b0a1e5636F1CC211895687BF25",
    "transactionIndex": 111,
    "gasUsed": "2649127",
    "logsBloom": "0x
    "blockHash": "0x0a987d5d81ae6709b788854ea4868dc61cde209d9bf9d444682b15689e8499c5",
    "transactionHash": "0x5c174dbdf0b1418f235663292e5b0b246913d298edc43dd5ae3ff056977bf733",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 14084624,
        "transactionHash": "0x5c174dbdf0b1418f235663292e5b0b246913d298edc43dd5ae3ff056977bf733",
        "address": "0x9241627B130665b0a1e5636F1CC211895687BF25",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c967aa45e5e67e872feac71ed816ad361599aa6"
        ],
        "data": "0x",
        "logIndex": 293,
        "blockHash": "0x0a987d5d81ae6709b788854ea4868dc61cde209d9bf9d444682b15689e8499c5"
      }
    ],
    "blockNumber": 14084624,
    "cumulativeGasUsed": "13998966",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://gateway.pinata.cloud/ipfs/"
  ],
  "solcInputHash": "45aba439163b009908908fa4746922c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uriIds\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"transferable\",\"type\":\"bool[]\"}],\"name\":\"batchCreateTokenTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnFromMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"changeBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"createTokenTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTiers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uriIds\",\"type\":\"string[]\"}],\"name\":\"updateMultipleUriIdentifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"name\":\"updateTransferableStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriId\",\"type\":\"string\"}],\"name\":\"updateUriIdentifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchCreateTokenTiers(uint256[],string[],bool[])\":{\"details\":\"creates multiple new token tiers\",\"params\":{\"tokenIds\":\"array of identifiers for the new token tiers\",\"transferable\":\"array of bools determining if tokens from specific tier should be transferable or not\",\"uriIds\":\"array of uriIds for the new token tiers\"}},\"burn(address,uint256,uint256)\":{\"details\":\"burns specified amount token(s) of specific id from specified account\",\"params\":{\"account\":\"address of token holder\",\"amount\":\"units of token to be burnt from beneficiary\",\"id\":\"id of token, aka. tier\"}},\"burnFromMultiple(address[],uint256[],uint256[])\":{\"details\":\"burns from multiple addresses arbitrary units of tokens of ONE token id per address                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob\",\"params\":{\"accounts\":\"list of token holder addresses\",\"amounts\":\"list of burn amounts\",\"tokenIds\":\"list of token ids (aka tiers)\"}},\"changeBaseUri(string)\":{\"details\":\"sets a base uri, that is the first part of the url where the metadata for a tokenId is stored\",\"params\":{\"_newBaseUri\":\"baseUrl (e.g. www.filestoring.com/)\"}},\"createTokenTier(uint256,string,bool)\":{\"details\":\"creates a new token tier\",\"params\":{\"tokenId\":\"identifier for the new token tier\",\"transferable\":\"determines if tokens from specific tier should be transferable or not\",\"uriId\":\"identifier that is appended to the baseUri together forming the uri where the metadata lives\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256)\":{\"details\":\"mints specified amount token(s) of specific id to specified account\",\"params\":{\"account\":\"beneficiary address\",\"amount\":\"units of token to be minted to beneficiary\",\"id\":\"id of token, aka. tier\"}},\"mintToMultiple(address[],uint256[],uint256[])\":{\"details\":\"mints to multiple addresses arbitrary units of tokens of ONE token id per address\",\"params\":{\"accounts\":\"list of beneficiary addresses\",\"amounts\":\"list of mint amounts\",\"tokenIds\":\"list of token ids (aka tiers)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"batch transfers tokens from one address to another allowing custom data parameter\",\"params\":{\"amounts\":\"amounts of token to be transferred\",\"from\":\"address from which token will be transferred\",\"ids\":\"ids of token to be transferred\",\"to\":\"recipient of address\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"transfers tokens from one address to another allowing custom data parameter\",\"params\":{\"amount\":\"amount of token to be transferred\",\"from\":\"address from which token will be transferred\",\"id\":\"id of token to be transferred\",\"to\":\"recipient of address\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFromWithoutData(address,address,uint256,uint256)\":{\"details\":\"transfers tokens from one address to another and uses 0x0 as default data parameter\",\"params\":{\"amount\":\"amount of token to be transferred\",\"from\":\"address from which token will be transferred\",\"id\":\"id of token to be transferred\",\"to\":\"recipient of address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMultipleUriIdentifiers(uint256[],string[])\":{\"details\":\"update uri identifiers for multiple token ids (tiers)\",\"params\":{\"tokenIds\":\"tokenIds for which the uri should be updated (must be in same order as uriIds)\",\"uriIds\":\"identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)\"}},\"updateTransferableStatus(uint256,bool)\":{\"details\":\"updates transferability for a given token id (tier)\",\"params\":{\"tokenId\":\"tokenId for which transferability should be updated\",\"transferable\":\"determines whether tokens from tier should be transferable or not\"}},\"updateUriIdentifier(uint256,string)\":{\"details\":\"updates the identifier that is appended to the baseUri for a specific tokenId (tier)\",\"params\":{\"tokenId\":\"tokenId for which the uri should be updated\",\"uriId\":\"identifier that is appended to the baseUri together forming the uri where the metadata lives\"}},\"uri(uint256)\":{\"details\":\"returns the uri for a given token\",\"params\":{\"tokenId\":\"tokenId for which the uri should be retrieved\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintToMultiple(address[],uint256[],uint256[])\":{\"notice\":\"example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"this is the standard transfer interface for ERC1155 tokens which contracts expect\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"this is the standard transfer interface for ERC1155 tokens which contracts expect\"},\"transferFromWithoutData(address,address,uint256,uint256)\":{\"notice\":\"this is mainly used for manual contract interactions via etherscan\"},\"uri(uint256)\":{\"notice\":\"consists of a concatenation of baseUri and uriId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Badger.sol\":\"Badger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x09c24182fc76ee97a5c604b6ff1a8afb3648535b6ba1820c23b243a40cc792a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/governance/Badger.sol\":{\"content\":\"/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\n*/\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n// PrimeDAO Badger contract. Badger is a ERC1155 token used for governance.\\n// Copyright (C) 2021 PrimeDao\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/Strings.sol\\\";\\n\\ncontract Badger is Ownable, ERC1155 {\\n    using Strings for string;\\n\\n    /*\\n        State variables\\n    */\\n\\n    mapping(uint256 => TokenTier) public tokenTiers; // tokenId => TokenTier\\n\\n    /*\\n        Structs\\n    */\\n\\n    struct TokenTier {\\n        string uriId;\\n        bool transferable;\\n    }\\n\\n    /*\\n        Events\\n    */\\n\\n    event TierChange(uint256 indexed tokenId, string uriId, bool transferable);\\n\\n    /*\\n        Modifiers\\n    */\\n\\n    modifier isSameLength(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] memory amounts\\n    ) {\\n        require(\\n            accounts.length == tokenIds.length &&\\n                tokenIds.length == amounts.length,\\n            \\\"Input array mismatch\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isTier(uint256 tokenId) {\\n        require(\\n            !_isEmptyString(tokenTiers[tokenId].uriId),\\n            \\\"Tier does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isValidString(string calldata uriId) {\\n        require(!_isEmptyString(uriId), \\\"String cannot be empty\\\");\\n        _;\\n    }\\n\\n    modifier isValidTransfer(uint256 tokenId, address from) {\\n        require(\\n            tokenTiers[tokenId].transferable,\\n            \\\"Transfer disabled for this tier\\\"\\n        );\\n        require(\\n            owner() == _msgSender() ||\\n                from == _msgSender() ||\\n                isApprovedForAll(from, _msgSender()),\\n            \\\"Unauthorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n        Constructor\\n    */\\n\\n    constructor(string memory _newBaseUri) ERC1155(_newBaseUri) {}\\n\\n    /*\\n        Minting & burning\\n    */\\n\\n    /**\\n     * @dev                 mints specified amount token(s) of specific id to specified account\\n     * @param account       beneficiary address\\n     * @param id            id of token, aka. tier\\n     * @param amount        units of token to be minted to beneficiary\\n     */\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyOwner {\\n        bytes memory data;\\n\\n        _mint(account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev                 burns specified amount token(s) of specific id from specified account\\n     * @param account       address of token holder\\n     * @param id            id of token, aka. tier\\n     * @param amount        units of token to be burnt from beneficiary\\n     */\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyOwner {\\n        _burn(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev                 mints to multiple addresses arbitrary units of tokens of ONE token id per address\\n     * @notice              example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob\\n     * @param accounts      list of beneficiary addresses\\n     * @param tokenIds      list of token ids (aka tiers)\\n     * @param amounts       list of mint amounts\\n     */\\n    function mintToMultiple(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) public onlyOwner isSameLength(accounts, tokenIds, amounts) {\\n        bytes memory data;\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _mint(accounts[i], tokenIds[i], amounts[i], data);\\n        }\\n    }\\n\\n    /**\\n     * @dev                 burns from multiple addresses arbitrary units of tokens of ONE token id per address\\n     *                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob\\n     * @param accounts      list of token holder addresses\\n     * @param tokenIds      list of token ids (aka tiers)\\n     * @param amounts       list of burn amounts\\n     */\\n    function burnFromMultiple(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) public onlyOwner isSameLength(accounts, tokenIds, amounts) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _burn(accounts[i], tokenIds[i], amounts[i]);\\n        }\\n    }\\n\\n    /*\\n        Transferring\\n    */\\n\\n    /**\\n     * @dev                 transfers tokens from one address to another and uses 0x0 as default data parameter\\n     * @notice              this is mainly used for manual contract interactions via etherscan\\n     * @param from          address from which token will be transferred\\n     * @param to            recipient of address\\n     * @param id            id of token to be transferred\\n     * @param amount        amount of token to be transferred\\n     */\\n    function transferFromWithoutData(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) public isValidTransfer(id, from) {\\n        bytes memory data;\\n\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev                 transfers tokens from one address to another allowing custom data parameter\\n     * @notice              this is the standard transfer interface for ERC1155 tokens which contracts expect\\n     * @param from          address from which token will be transferred\\n     * @param to            recipient of address\\n     * @param id            id of token to be transferred\\n     * @param amount        amount of token to be transferred\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override isValidTransfer(id, from) {\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev                 batch transfers tokens from one address to another allowing custom data parameter\\n     * @notice              this is the standard transfer interface for ERC1155 tokens which contracts expect\\n     * @param from          address from which token will be transferred\\n     * @param to            recipient of address\\n     * @param ids           ids of token to be transferred\\n     * @param amounts       amounts of token to be transferred\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public override {\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            require(\\n                tokenTiers[ids[i]].transferable,\\n                \\\"Transfer disabled for this tier\\\"\\n            );\\n        }\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\n        Configuration\\n    */\\n\\n    /**\\n     * @dev                 sets a base uri, that is the first part of the url where the metadata for a tokenId is stored\\n     * @param _newBaseUri   baseUrl (e.g. www.filestoring.com/)\\n     */\\n    function changeBaseUri(string calldata _newBaseUri)\\n        public\\n        onlyOwner\\n        isValidString(_newBaseUri)\\n    {\\n        _setURI(_newBaseUri);\\n    }\\n\\n    /**\\n     * @dev                 creates a new token tier\\n     * @param tokenId       identifier for the new token tier\\n     * @param uriId         identifier that is appended to the baseUri together forming the uri where the metadata lives\\n     * @param transferable  determines if tokens from specific tier should be transferable or not\\n     */\\n    function createTokenTier(\\n        uint256 tokenId,\\n        string calldata uriId,\\n        bool transferable\\n    ) public onlyOwner {\\n        _createTokenTier(tokenId, uriId, transferable);\\n    }\\n\\n    /**\\n     * @dev                 creates multiple new token tiers\\n     * @param tokenIds      array of identifiers for the new token tiers\\n     * @param uriIds        array of uriIds for the new token tiers\\n     * @param transferable  array of bools determining if tokens from specific tier should be transferable or not\\n     */\\n    function batchCreateTokenTiers(\\n        uint256[] calldata tokenIds,\\n        string[] calldata uriIds,\\n        bool[] calldata transferable\\n    ) public onlyOwner {\\n        require(\\n            tokenIds.length == uriIds.length &&\\n                uriIds.length == transferable.length,\\n            \\\"Input array mismatch\\\"\\n        );\\n\\n        for (uint8 i = 0; i < tokenIds.length; i++) {\\n            _createTokenTier(tokenIds[i], uriIds[i], transferable[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev                 updates the identifier that is appended to the baseUri for a specific tokenId (tier)\\n     * @param tokenId       tokenId for which the uri should be updated\\n     * @param uriId         identifier that is appended to the baseUri together forming the uri where the metadata lives\\n     */\\n    function updateUriIdentifier(uint256 tokenId, string calldata uriId)\\n        public\\n        onlyOwner\\n    {\\n        _updateUriIdentifier(tokenId, uriId);\\n    }\\n\\n    /**\\n     * @dev                 update uri identifiers for multiple token ids (tiers)\\n     * @param tokenIds      tokenIds for which the uri should be updated (must be in same order as uriIds)\\n     * @param uriIds        identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)\\n     */\\n    function updateMultipleUriIdentifiers(\\n        uint256[] calldata tokenIds,\\n        string[] calldata uriIds\\n    ) public onlyOwner {\\n        require(tokenIds.length == uriIds.length, \\\"Input array mismatch\\\");\\n\\n        for (uint8 i = 0; i < tokenIds.length; i++) {\\n            _updateUriIdentifier(tokenIds[i], uriIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev                 updates transferability for a given token id (tier)\\n     * @param tokenId       tokenId for which transferability should be updated\\n     * @param transferable  determines whether tokens from tier should be transferable or not\\n     */\\n    function updateTransferableStatus(uint256 tokenId, bool transferable)\\n        public\\n        onlyOwner\\n        isTier(tokenId)\\n    {\\n        tokenTiers[tokenId].transferable = transferable;\\n        emit TierChange(tokenId, tokenTiers[tokenId].uriId, transferable);\\n    }\\n\\n    /*\\n        Queries\\n    */\\n\\n    /**\\n     * @dev                 returns the uri for a given token\\n     * @notice              consists of a concatenation of baseUri and uriId\\n     * @param tokenId       tokenId for which the uri should be retrieved\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        string memory baseUri = super.uri(tokenId);\\n        return baseUri.append(tokenTiers[tokenId].uriId);\\n    }\\n\\n    /*\\n        Internal functions\\n    */\\n\\n    function _updateUriIdentifier(uint256 tokenId, string calldata uriId)\\n        private\\n        isTier(tokenId)\\n        isValidString(uriId)\\n    {\\n        tokenTiers[tokenId].uriId = uriId;\\n        emit TierChange(tokenId, uriId, tokenTiers[tokenId].transferable);\\n    }\\n\\n    function _isEmptyString(string memory uriId) internal pure returns (bool) {\\n        return bytes(uriId).length == 0;\\n    }\\n\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override isTier(id) {\\n        super._mint(account, id, amount, data);\\n    }\\n\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override isTier(id) {\\n        super._burn(account, id, amount);\\n    }\\n\\n    function _createTokenTier(\\n        uint256 tokenId,\\n        string calldata uriId,\\n        bool transferable\\n    ) internal isValidString(uriId) {\\n        require(\\n            _isEmptyString(tokenTiers[tokenId].uriId),\\n            \\\"Tier already exists for tokenId\\\"\\n        );\\n\\n        tokenTiers[tokenId] = TokenTier(uriId, transferable);\\n        emit TierChange(tokenId, uriId, transferable);\\n    }\\n}\\n\",\"keccak256\":\"0x2964d7b59b16d84bdf72a5a72f4ab0784c6266c0aa1b0f3989740024864aeee3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Strings.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    function append(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(a, b));\\n    }\\n}\\n\",\"keccak256\":\"0x8558fa32cafd19f15bd688c459e939a2206773ce80aa05f70235430cc0ac725b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002fbc38038062002fbc833981016040819052620000349162000178565b80620000403362000053565b6200004b81620000a3565b505062000291565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620000b8906003906020840190620000bc565b5050565b828054620000ca9062000254565b90600052602060002090601f016020900481019282620000ee576000855562000139565b82601f106200010957805160ff191683800117855562000139565b8280016001018555821562000139579182015b82811115620001395782518255916020019190600101906200011c565b50620001479291506200014b565b5090565b5b808211156200014757600081556001016200014c565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200018c57600080fd5b82516001600160401b0380821115620001a457600080fd5b818501915085601f830112620001b957600080fd5b815181811115620001ce57620001ce62000162565b604051601f8201601f19908116603f01168101908382118183101715620001f957620001f962000162565b8160405282815288868487010111156200021257600080fd5b600093505b8284101562000236578484018601518185018701529285019262000217565b82841115620002485760008684830101525b98975050505050505050565b600181811c908216806200026957607f821691505b602082108114156200028b57634e487b7160e01b600052602260045260246000fd5b50919050565b612d1b80620002a16000396000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c8063715018a6116100c3578063a22cb4651161007c578063a22cb465146102de578063d2047b54146102f1578063e985e9c514610304578063f242432a14610340578063f2fde38b14610353578063f5298aca1461036657600080fd5b8063715018a61461026157806380f3d11e14610269578063818f2e421461027c57806384385b6b1461029d5780638da5cb5b146102b057806397c7cc87146102cb57600080fd5b80632eb2c2d6116101155780632eb2c2d6146101e2578063351521cd146101f5578063492d306b146102085780634e1273f41461021b5780635969caf11461023b5780636222c3891461024e57600080fd5b8062fdd58e1461015157806301ffc9a714610177578063036789d11461019a5780630e89341c146101af578063156e29f6146101cf575b600080fd5b61016461015f366004611f3c565b610379565b6040519081526020015b60405180910390f35b61018a610185366004611f7c565b610412565b604051901515815260200161016e565b6101ad6101a8366004611fe4565b610464565b005b6101c26101bd36600461204f565b61051f565b60405161016e91906120c0565b6101ad6101dd3660046120d3565b6105e0565b6101ad6101f036600461224f565b61061e565b6101ad6102033660046122f8565b6106a3565b6101ad6102163660046123d2565b6107bc565b61022e610229366004612413565b610883565b60405161016e9190612518565b6101ad61024936600461253b565b6109ac565b6101ad61025c366004612567565b610af4565b6101ad610b2a565b6101ad6102773660046122f8565b610b60565b61028f61028a36600461204f565b610c52565b60405161016e9291906125c4565b6101ad6102ab3660046125e8565b610cf9565b6000546040516001600160a01b03909116815260200161016e565b6101ad6102d936600461262a565b610da9565b6101ad6102ec366004612675565b610de3565b6101ad6102ff3660046122f8565b610eba565b61018a61031236600461269f565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6101ad61034e3660046126c9565b610fd7565b6101ad61036136600461272d565b611085565b6101ad6103743660046120d3565b611120565b60006001600160a01b0383166103ea5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526001602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061044357506001600160e01b031982166303a24d0760e21b145b8061045e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b0316331461048e5760405162461bcd60e51b81526004016103e190612748565b8281146104ad5760405162461bcd60e51b81526004016103e19061277d565b60005b60ff81168411156105185761050685858360ff168181106104d3576104d36127ab565b9050602002013584848460ff168181106104ef576104ef6127ab565b905060200281019061050191906127c1565b611155565b806105108161281d565b9150506104b0565b5050505050565b6060600061052c83611264565b600084815260046020526040902080549192506105d99161054c9061283d565b80601f01602080910402602001604051908101604052809291908181526020018280546105789061283d565b80156105c55780601f1061059a576101008083540402835291602001916105c5565b820191906000526020600020905b8154815290600101906020018083116105a857829003601f168201915b5050505050826112f890919063ffffffff16565b9392505050565b6000546001600160a01b0316331461060a5760405162461bcd60e51b81526004016103e190612748565b606061061884848484611324565b50505050565b60005b83518160ff1610156106955760046000858360ff1681518110610646576106466127ab565b60209081029190910181015182528101919091526040016000206001015460ff166106835760405162461bcd60e51b81526004016103e190612878565b8061068d8161281d565b915050610621565b50610518858585858561136c565b6000546001600160a01b031633146106cd5760405162461bcd60e51b81526004016103e190612748565b858585858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050848314905080156107145750805182145b6107305760405162461bcd60e51b81526004016103e19061277d565b60005b8a8110156107ae5761079c8c8c83818110610750576107506127ab565b9050602002016020810190610765919061272d565b8b8b84818110610777576107776127ab565b905060200201358a8a85818110610790576107906127ab565b905060200201356113fc565b806107a6816128af565b915050610733565b505050505050505050505050565b6000546001600160a01b031633146107e65760405162461bcd60e51b81526004016103e190612748565b818161082782828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144392505050565b156108445760405162461bcd60e51b81526004016103e1906128ca565b61061884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144892505050565b606081518351146108e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103e1565b600083516001600160401b0381111561090357610903612106565b60405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b84518110156109a457610977858281518110610950576109506127ab565b602002602001015185838151811061096a5761096a6127ab565b6020026020010151610379565b828281518110610989576109896127ab565b602090810291909101015261099d816128af565b9050610932565b509392505050565b6000546001600160a01b031633146109d65760405162461bcd60e51b81526004016103e190612748565b600082815260046020526040902080548391610a78916109f59061283d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a219061283d565b8015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b5050505050511590565b15610a955760405162461bcd60e51b81526004016103e1906128fa565b6000838152600460205260409081902060018101805460ff1916851515179055905184917f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced91610ae791908690612927565b60405180910390a2505050565b6000546001600160a01b03163314610b1e5760405162461bcd60e51b81526004016103e190612748565b6106188484848461145f565b6000546001600160a01b03163314610b545760405162461bcd60e51b81526004016103e190612748565b610b5e60006115df565b565b6000546001600160a01b03163314610b8a5760405162461bcd60e51b81526004016103e190612748565b8483148015610b9857508281145b610bb45760405162461bcd60e51b81526004016103e19061277d565b60005b60ff8116861115610c4957610c3787878360ff16818110610bda57610bda6127ab565b9050602002013586868460ff16818110610bf657610bf66127ab565b9050602002810190610c0891906127c1565b86868660ff16818110610c1d57610c1d6127ab565b9050602002016020810190610c3291906129e1565b61145f565b80610c418161281d565b915050610bb7565b50505050505050565b600460205260009081526040902080548190610c6d9061283d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c999061283d565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050506001909301549192505060ff1682565b6000828152600460205260409020600101548290859060ff16610d2e5760405162461bcd60e51b81526004016103e190612878565b6000546001600160a01b0316331480610d4f57506001600160a01b03811633145b80610d5f5750610d5f8133610312565b610d9a5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016103e1565b6060610c49878787878561162f565b6000546001600160a01b03163314610dd35760405162461bcd60e51b81526004016103e190612748565b610dde838383611155565b505050565b336001600160a01b0383161415610e4e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103e1565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546001600160a01b03163314610ee45760405162461bcd60e51b81526004016103e190612748565b85858585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505084831490508015610f2b5750805182145b610f475760405162461bcd60e51b81526004016103e19061277d565b606060005b8b811015610fc857610fb68d8d83818110610f6957610f696127ab565b9050602002016020810190610f7e919061272d565b8c8c84818110610f9057610f906127ab565b905060200201358b8b85818110610fa957610fa96127ab565b9050602002013585611324565b80610fc0816128af565b915050610f4c565b50505050505050505050505050565b6000838152600460205260409020600101548390869060ff1661100c5760405162461bcd60e51b81526004016103e190612878565b6000546001600160a01b031633148061102d57506001600160a01b03811633145b8061103d575061103d8133610312565b6110785760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016103e1565b610c49878787878761162f565b6000546001600160a01b031633146110af5760405162461bcd60e51b81526004016103e190612748565b6001600160a01b0381166111145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e1565b61111d816115df565b50565b6000546001600160a01b0316331461114a5760405162461bcd60e51b81526004016103e190612748565b610dde8383836113fc565b600083815260046020526040902080548491611174916109f59061283d565b156111915760405162461bcd60e51b81526004016103e1906128fa565b82826111d282828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144392505050565b156111ef5760405162461bcd60e51b81526004016103e1906128ca565b6000868152600460205260409020611208908686611e13565b506000868152600460205260409081902060010154905187917f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced91611254918991899160ff16906129fc565b60405180910390a2505050505050565b6060600380546112739061283d565b80601f016020809104026020016040519081016040528092919081815260200182805461129f9061283d565b80156112ec5780601f106112c1576101008083540402835291602001916112ec565b820191906000526020600020905b8154815290600101906020018083116112cf57829003601f168201915b50505050509050919050565b6060828260405160200161130d929190612a34565b604051602081830303815290604052905092915050565b600083815260046020526040902080548491611343916109f59061283d565b156113605760405162461bcd60e51b81526004016103e1906128fa565b61051885858585611750565b6001600160a01b03851633148061138857506113888533610312565b6113ef5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016103e1565b6105188585858585611853565b60008281526004602052604090208054839161141b916109f59061283d565b156114385760405162461bcd60e51b81526004016103e1906128fa565b610618848484611a33565b511590565b805161145b906003906020840190611e97565b5050565b82826114a082828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061144392505050565b156114bd5760405162461bcd60e51b81526004016103e1906128ca565b600086815260046020526040902080546114db91906109f59061283d565b6115275760405162461bcd60e51b815260206004820152601f60248201527f5469657220616c72656164792065786973747320666f7220746f6b656e49640060448201526064016103e1565b6040805160606020601f880181900402820181018352918101868152909182919088908890819085018382808284376000920182905250938552505050851515602092830152888152600482526040902082518051919261158d92849290910190611e97565b50602091909101516001909101805460ff191691151591909117905560405186907f684099fd398949dc782e92c48c5b6b47f1e1f6cadc408d22d5159752d6c4bced90611254908890889088906129fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0384166116555760405162461bcd60e51b81526004016103e190612a63565b3361166e81878761166588611bb1565b61051888611bb1565b60008481526001602090815260408083206001600160a01b038a168452909152902054838110156116b15760405162461bcd60e51b81526004016103e190612aa8565b60008581526001602090815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906116f0908490612af2565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610c49828888888888611bfc565b6001600160a01b0384166117b05760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103e1565b336117c18160008761166588611bb1565b60008481526001602090815260408083206001600160a01b0389168452909152812080548592906117f3908490612af2565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461051881600087878787611bfc565b81518351146118b55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016103e1565b6001600160a01b0384166118db5760405162461bcd60e51b81526004016103e190612a63565b3360005b84518110156119c55760008582815181106118fc576118fc6127ab565b60200260200101519050600085838151811061191a5761191a6127ab565b60209081029190910181015160008481526001835260408082206001600160a01b038e16835290935291909120549091508181101561196b5760405162461bcd60e51b81526004016103e190612aa8565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906119aa908490612af2565b92505081905550505050806119be906128af565b90506118df565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a15929190612b0a565b60405180910390a4611a2b818787878787611d58565b505050505050565b6001600160a01b038316611a955760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016103e1565b33611ac581856000611aa687611bb1565b611aaf87611bb1565b5050604080516020810190915260009052505050565b60008381526001602090815260408083206001600160a01b038816845290915290205482811015611b445760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016103e1565b60008481526001602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611beb57611beb6127ab565b602090810291909101015292915050565b6001600160a01b0384163b15611a2b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611c409089908990889088908890600401612b38565b6020604051808303816000875af1925050508015611c7b575060408051601f3d908101601f19168201909252611c7891810190612b7d565b60015b611d2857611c87612b9a565b806308c379a01415611cc15750611c9c612bb6565b80611ca75750611cc3565b8060405162461bcd60e51b81526004016103e191906120c0565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103e1565b6001600160e01b0319811663f23a6e6160e01b14610c495760405162461bcd60e51b81526004016103e190612c3f565b6001600160a01b0384163b15611a2b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d9c9089908990889088908890600401612c87565b6020604051808303816000875af1925050508015611dd7575060408051601f3d908101601f19168201909252611dd491810190612b7d565b60015b611de357611c87612b9a565b6001600160e01b0319811663bc197c8160e01b14610c495760405162461bcd60e51b81526004016103e190612c3f565b828054611e1f9061283d565b90600052602060002090601f016020900481019282611e415760008555611e87565b82601f10611e5a5782800160ff19823516178555611e87565b82800160010185558215611e87579182015b82811115611e87578235825591602001919060010190611e6c565b50611e93929150611f0b565b5090565b828054611ea39061283d565b90600052602060002090601f016020900481019282611ec55760008555611e87565b82601f10611ede57805160ff1916838001178555611e87565b82800160010185558215611e87579182015b82811115611e87578251825591602001919060010190611ef0565b5b80821115611e935760008155600101611f0c565b80356001600160a01b0381168114611f3757600080fd5b919050565b60008060408385031215611f4f57600080fd5b611f5883611f20565b946020939093013593505050565b6001600160e01b03198116811461111d57600080fd5b600060208284031215611f8e57600080fd5b81356105d981611f66565b60008083601f840112611fab57600080fd5b5081356001600160401b03811115611fc257600080fd5b6020830191508360208260051b8501011115611fdd57600080fd5b9250929050565b60008060008060408587031215611ffa57600080fd5b84356001600160401b038082111561201157600080fd5b61201d88838901611f99565b9096509450602087013591508082111561203657600080fd5b5061204387828801611f99565b95989497509550505050565b60006020828403121561206157600080fd5b5035919050565b60005b8381101561208357818101518382015260200161206b565b838111156106185750506000910152565b600081518084526120ac816020860160208601612068565b601f01601f19169290920160200192915050565b6020815260006105d96020830184612094565b6000806000606084860312156120e857600080fd5b6120f184611f20565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561214157612141612106565b6040525050565b60006001600160401b0382111561216157612161612106565b5060051b60200190565b600082601f83011261217c57600080fd5b8135602061218982612148565b604051612196828261211c565b83815260059390931b85018201928281019150868411156121b657600080fd5b8286015b848110156121d157803583529183019183016121ba565b509695505050505050565b600082601f8301126121ed57600080fd5b81356001600160401b0381111561220657612206612106565b60405161221d601f8301601f19166020018261211c565b81815284602083860101111561223257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561226757600080fd5b61227086611f20565b945061227e60208701611f20565b935060408601356001600160401b038082111561229a57600080fd5b6122a689838a0161216b565b945060608801359150808211156122bc57600080fd5b6122c889838a0161216b565b935060808801359150808211156122de57600080fd5b506122eb888289016121dc565b9150509295509295909350565b6000806000806000806060878903121561231157600080fd5b86356001600160401b038082111561232857600080fd5b6123348a838b01611f99565b9098509650602089013591508082111561234d57600080fd5b6123598a838b01611f99565b9096509450604089013591508082111561237257600080fd5b5061237f89828a01611f99565b979a9699509497509295939492505050565b60008083601f8401126123a357600080fd5b5081356001600160401b038111156123ba57600080fd5b602083019150836020828501011115611fdd57600080fd5b600080602083850312156123e557600080fd5b82356001600160401b038111156123fb57600080fd5b61240785828601612391565b90969095509350505050565b6000806040838503121561242657600080fd5b82356001600160401b038082111561243d57600080fd5b818501915085601f83011261245157600080fd5b8135602061245e82612148565b60405161246b828261211c565b83815260059390931b850182019282810191508984111561248b57600080fd5b948201945b838610156124b0576124a186611f20565b82529482019490820190612490565b965050860135925050808211156124c657600080fd5b506124d38582860161216b565b9150509250929050565b600081518084526020808501945080840160005b8381101561250d578151875295820195908201906001016124f1565b509495945050505050565b6020815260006105d960208301846124dd565b80358015158114611f3757600080fd5b6000806040838503121561254e57600080fd5b8235915061255e6020840161252b565b90509250929050565b6000806000806060858703121561257d57600080fd5b8435935060208501356001600160401b0381111561259a57600080fd5b6125a687828801612391565b90945092506125b990506040860161252b565b905092959194509250565b6040815260006125d76040830185612094565b905082151560208301529392505050565b600080600080608085870312156125fe57600080fd5b61260785611f20565b935061261560208601611f20565b93969395505050506040820135916060013590565b60008060006040848603121561263f57600080fd5b8335925060208401356001600160401b0381111561265c57600080fd5b61266886828701612391565b9497909650939450505050565b6000806040838503121561268857600080fd5b61269183611f20565b915061255e6020840161252b565b600080604083850312156126b257600080fd5b6126bb83611f20565b915061255e60208401611f20565b600080600080600060a086880312156126e157600080fd5b6126ea86611f20565b94506126f860208701611f20565b9350604086013592506060860135915060808601356001600160401b0381111561272157600080fd5b6122eb888289016121dc565b60006020828403121561273f57600080fd5b6105d982611f20565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273092dce0eae840c2e4e4c2f240dad2e6dac2e8c6d60631b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126127d857600080fd5b8301803591506001600160401b038211156127f257600080fd5b602001915036819003821315611fdd57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561283457612834612807565b60010192915050565b600181811c9082168061285157607f821691505b6020821081141561287257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5472616e736665722064697361626c656420666f722074686973207469657200604082015260600190565b60006000198214156128c3576128c3612807565b5060010190565b602080825260169082015275537472696e672063616e6e6f7420626520656d70747960501b604082015260600190565b602080825260139082015272151a595c88191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60408152600080845481600182811c91508083168061294757607f831692505b602080841082141561296757634e487b7160e01b86526022600452602486fd5b60408801849052606088018280156129865760018114612997576129c2565b60ff198716825282820197506129c2565b60008c81526020902060005b878110156129bc578154848201529086019084016129a3565b83019850505b50508596506129d48189018a15159052565b5050505050509392505050565b6000602082840312156129f357600080fd5b6105d98261252b565b6040815282604082015282846060830137600060608483018101919091529115156020820152601f909201601f191690910101919050565b60008351612a46818460208801612068565b835190830190612a5a818360208801612068565b01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60008219821115612b0557612b05612807565b500190565b604081526000612b1d60408301856124dd565b8281036020840152612b2f81856124dd565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612b7290830184612094565b979650505050505050565b600060208284031215612b8f57600080fd5b81516105d981611f66565b600060033d1115612bb35760046000803e5060005160e01c5b90565b600060443d1015612bc45790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612bf357505050505090565b8285019150815181811115612c0b5750505050505090565b843d8701016020828501011115612c255750505050505090565b612c346020828601018761211c565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612cb3908301866124dd565b8281036060840152612cc581866124dd565b90508281036080840152612cd98185612094565b9897505050505050505056fea264697066735822122059d054c72946aa2234dadafd0ebe84b872490651a49b8143d075ae7b9ed56f6964736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchCreateTokenTiers(uint256[],string[],bool[])": {
        "details": "creates multiple new token tiers",
        "params": {
          "tokenIds": "array of identifiers for the new token tiers",
          "transferable": "array of bools determining if tokens from specific tier should be transferable or not",
          "uriIds": "array of uriIds for the new token tiers"
        }
      },
      "burn(address,uint256,uint256)": {
        "details": "burns specified amount token(s) of specific id from specified account",
        "params": {
          "account": "address of token holder",
          "amount": "units of token to be burnt from beneficiary",
          "id": "id of token, aka. tier"
        }
      },
      "burnFromMultiple(address[],uint256[],uint256[])": {
        "details": "burns from multiple addresses arbitrary units of tokens of ONE token id per address                      example: burn 3 units of tokenId 1 from alice and 4 units of tokenId 2 froms bob",
        "params": {
          "accounts": "list of token holder addresses",
          "amounts": "list of burn amounts",
          "tokenIds": "list of token ids (aka tiers)"
        }
      },
      "changeBaseUri(string)": {
        "details": "sets a base uri, that is the first part of the url where the metadata for a tokenId is stored",
        "params": {
          "_newBaseUri": "baseUrl (e.g. www.filestoring.com/)"
        }
      },
      "createTokenTier(uint256,string,bool)": {
        "details": "creates a new token tier",
        "params": {
          "tokenId": "identifier for the new token tier",
          "transferable": "determines if tokens from specific tier should be transferable or not",
          "uriId": "identifier that is appended to the baseUri together forming the uri where the metadata lives"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256)": {
        "details": "mints specified amount token(s) of specific id to specified account",
        "params": {
          "account": "beneficiary address",
          "amount": "units of token to be minted to beneficiary",
          "id": "id of token, aka. tier"
        }
      },
      "mintToMultiple(address[],uint256[],uint256[])": {
        "details": "mints to multiple addresses arbitrary units of tokens of ONE token id per address",
        "params": {
          "accounts": "list of beneficiary addresses",
          "amounts": "list of mint amounts",
          "tokenIds": "list of token ids (aka tiers)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "batch transfers tokens from one address to another allowing custom data parameter",
        "params": {
          "amounts": "amounts of token to be transferred",
          "from": "address from which token will be transferred",
          "ids": "ids of token to be transferred",
          "to": "recipient of address"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "transfers tokens from one address to another allowing custom data parameter",
        "params": {
          "amount": "amount of token to be transferred",
          "from": "address from which token will be transferred",
          "id": "id of token to be transferred",
          "to": "recipient of address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFromWithoutData(address,address,uint256,uint256)": {
        "details": "transfers tokens from one address to another and uses 0x0 as default data parameter",
        "params": {
          "amount": "amount of token to be transferred",
          "from": "address from which token will be transferred",
          "id": "id of token to be transferred",
          "to": "recipient of address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMultipleUriIdentifiers(uint256[],string[])": {
        "details": "update uri identifiers for multiple token ids (tiers)",
        "params": {
          "tokenIds": "tokenIds for which the uri should be updated (must be in same order as uriIds)",
          "uriIds": "identifiers that are appended to the baseUri together forming the uri where the metadata lives (must be in same order ass tokenIds)"
        }
      },
      "updateTransferableStatus(uint256,bool)": {
        "details": "updates transferability for a given token id (tier)",
        "params": {
          "tokenId": "tokenId for which transferability should be updated",
          "transferable": "determines whether tokens from tier should be transferable or not"
        }
      },
      "updateUriIdentifier(uint256,string)": {
        "details": "updates the identifier that is appended to the baseUri for a specific tokenId (tier)",
        "params": {
          "tokenId": "tokenId for which the uri should be updated",
          "uriId": "identifier that is appended to the baseUri together forming the uri where the metadata lives"
        }
      },
      "uri(uint256)": {
        "details": "returns the uri for a given token",
        "params": {
          "tokenId": "tokenId for which the uri should be retrieved"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintToMultiple(address[],uint256[],uint256[])": {
        "notice": "example: mint 3 units of tokenId 1 to alice and 4 units of tokenId 2 to bob"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "this is the standard transfer interface for ERC1155 tokens which contracts expect"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "this is the standard transfer interface for ERC1155 tokens which contracts expect"
      },
      "transferFromWithoutData(address,address,uint256,uint256)": {
        "notice": "this is mainly used for manual contract interactions via etherscan"
      },
      "uri(uint256)": {
        "notice": "consists of a concatenation of baseUri and uriId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/governance/Badger.sol:Badger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/governance/Badger.sol:Badger",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 135,
        "contract": "contracts/governance/Badger.sol:Badger",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/governance/Badger.sol:Badger",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1736,
        "contract": "contracts/governance/Badger.sol:Badger",
        "label": "tokenTiers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenTier)1741_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TokenTier)1741_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Badger.TokenTier)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenTier)1741_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenTier)1741_storage": {
        "encoding": "inplace",
        "label": "struct Badger.TokenTier",
        "members": [
          {
            "astId": 1738,
            "contract": "contracts/governance/Badger.sol:Badger",
            "label": "uriId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1740,
            "contract": "contracts/governance/Badger.sol:Badger",
            "label": "transferable",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}