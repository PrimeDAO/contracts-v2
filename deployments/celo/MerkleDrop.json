{
  "address": "0xD0dB40F709783588dAA2ab4BBf5cb74076763Ac4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "week",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "RemovedFunder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "TrancheAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "TrancheExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimTranche",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trancheId",
          "type": "uint256"
        }
      ],
      "name": "expireTranche",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_nexus",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_funders",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nexus",
      "outputs": [
        {
          "internalType": "contract INexus",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAllocation",
          "type": "uint256"
        }
      ],
      "name": "seedNewAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x85f5be285c45113c56291622083d9ac9eeed713595f0dd5657def4821f8176ac",
  "receipt": {
    "to": null,
    "from": "0xBCa976a45495D34C8CDa61bBf87941B1EAf437cf",
    "contractAddress": "0xD0dB40F709783588dAA2ab4BBf5cb74076763Ac4",
    "transactionIndex": 3,
    "gasUsed": "1905977",
    "logsBloom": "0x
    "blockHash": "0x369a65dc3e9468c17ae3507cc44a63a4d511098ca971ff6d33da7e51a90e670c",
    "transactionHash": "0x85f5be285c45113c56291622083d9ac9eeed713595f0dd5657def4821f8176ac",
    "logs": [],
    "blockNumber": 14008061,
    "cumulativeGasUsed": "3498000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c84c9c1f5c36903ea538e6e3297b7f57",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedFunder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"TrancheExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheId\",\"type\":\"uint256\"}],\"name\":\"expireTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"}],\"name\":\"seedNewAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"claimTranche(address,uint256,uint256,bytes32[])\":{\"notice\":\"************************************* CLAIMING***************************************\"},\"seedNewAllocations(bytes32,uint256)\":{\"notice\":\"************************************* ADMIN***************************************\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/migration/MerkleDrop.sol\":\"MerkleDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModule } from \\\"../shared/InitializableModule.sol\\\";\\n\\n/**\\n * @title   InitializableGovernableWhitelist\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\\n *          to allow the function calls only from the whitelisted addresses.\\n * @dev     Implementing contracts are responsible for adding their own add and remove methods\\n *          as the original purpose of this whitelist is for read optimisation.\\n */\\ncontract InitializableGovernableWhitelist is InitializableModule {\\n\\n    event Whitelisted(address indexed _address);\\n\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the whitelisted address.\\n     */\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"Not a whitelisted address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     * @param _whitelisted Array of whitelisted addresses.\\n     */\\n    function _initialize(\\n        address _nexus,\\n        address[] memory _whitelisted\\n    )\\n        internal\\n    {\\n        InitializableModule._initialize(_nexus);\\n\\n        require(_whitelisted.length > 0, \\\"Empty whitelist array\\\");\\n\\n        for(uint256 i = 0; i < _whitelisted.length; i++) {\\n            _addWhitelist(_whitelisted[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a new whitelist address\\n     * @param _address Address to add in whitelist\\n     */\\n    function _addWhitelist(address _address) internal {\\n        require(_address != address(0), \\\"Address is zero\\\");\\n        require(! whitelist[_address], \\\"Already whitelisted\\\");\\n\\n        whitelist[_address] = true;\\n\\n        emit Whitelisted(_address);\\n    }\\n\\n}\",\"keccak256\":\"0xda302d020b1282b552c24a495a5770cf8cec4350694afd0932fbfb66978042b1\"},\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"},\"@mstable/protocol/contracts/shared/InitializableModule.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModuleKeys } from \\\"./InitializableModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   InitializableModule\\n * @author  Stability Labs Pty. Ltd.\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\ncontract InitializableModule is InitializableModuleKeys {\\n\\n    INexus public nexus;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(\\n            msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    function _initialize(address _nexus) internal {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n        InitializableModuleKeys._initialize();\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\",\"keccak256\":\"0xda15abf73529ae7255529b4a69b9e202901eb09b4e32703277539f23002d95f9\"},\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/migration/MerkleDrop.sol\":{\"content\":\"/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n*/\\n\\n/*\\n This is a contract that has been adapted from mStable. \\n The original smart contract can be found here: https://github.com/mstable/merkle-drop\\n There have only been slight adaptations such as the removal of two external functions,\\n the renaming of some parameters,\\n and the addition of a blocknumber that needs to have passed for a drop to be claimable.\\n*/\\n\\n// MerkelDrop.sol was originally published SPDX-License-Identifier: AGPL-3.0-or-later.\\n// Republished by PrimeDAO under GNU General Public License v3.0.\\n\\n// MerkleDrop contract. Smart contract for executing merkle drops for ERC20 tokens.\\n// Copyright (C) 2021 PrimeDao\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {MerkleProof} from \\\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"openzeppelin-contracts-sol5/math/SafeMath.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport {InitializableGovernableWhitelist} from \\\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\\\";\\n\\ncontract MerkleDrop is Initializable, InitializableGovernableWhitelist {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event Claimed(address claimant, uint256 week, uint256 balance);\\n    event TrancheAdded(\\n        uint256 tranche,\\n        bytes32 merkleRoot,\\n        uint256 totalAmount\\n    );\\n    event TrancheExpired(uint256 tranche);\\n    event RemovedFunder(address indexed _address);\\n\\n    IERC20 public token;\\n\\n    mapping(uint256 => bytes32) public merkleRoots;\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n    uint256 tranches;\\n\\n    function initialize(\\n        address _nexus,\\n        address[] calldata _funders,\\n        IERC20 _token\\n    ) external initializer {\\n        InitializableGovernableWhitelist._initialize(_nexus, _funders);\\n        token = _token;\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    function seedNewAllocations(bytes32 _merkleRoot, uint256 _totalAllocation)\\n        public\\n        onlyWhitelisted\\n        returns (uint256 trancheId)\\n    {\\n        token.transferFrom(msg.sender, address(this), _totalAllocation);\\n\\n        trancheId = tranches;\\n        merkleRoots[trancheId] = _merkleRoot;\\n\\n        tranches = tranches.add(1);\\n\\n        emit TrancheAdded(trancheId, _merkleRoot, _totalAllocation);\\n    }\\n\\n    function expireTranche(uint256 _trancheId) public onlyWhitelisted {\\n        merkleRoots[_trancheId] = bytes32(0);\\n\\n        emit TrancheExpired(_trancheId);\\n    }\\n\\n    /***************************************\\n                  CLAIMING\\n    ****************************************/\\n\\n    function claimTranche(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) public {\\n        _claimTranche(_claimer, _tranche, _balance, _merkleProof);\\n        _disburse(_claimer, _balance);\\n    }\\n\\n    function verifyClaim(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) public view returns (bool valid) {\\n        return _verifyClaim(_claimer, _tranche, _balance, _merkleProof);\\n    }\\n\\n    /***************************************\\n              CLAIMING - INTERNAL\\n    ****************************************/\\n\\n    function _claimTranche(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) private {\\n        require(_tranche < tranches, \\\"Tranche does not yet exist\\\");\\n\\n        require(!claimed[_tranche][_claimer], \\\"LP has already claimed\\\");\\n        require(\\n            _verifyClaim(_claimer, _tranche, _balance, _merkleProof),\\n            \\\"Incorrect merkle proof\\\"\\n        );\\n\\n        claimed[_tranche][_claimer] = true;\\n\\n        emit Claimed(_claimer, _tranche, _balance);\\n    }\\n\\n    function _verifyClaim(\\n        address _claimer,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    ) private view returns (bool valid) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_claimer, _balance));\\n        return MerkleProof.verify(_merkleProof, merkleRoots[_tranche], leaf);\\n    }\\n\\n    function _disburse(address _claimer, uint256 _balance) private {\\n        if (_balance > 0) {\\n            token.safeTransfer(_claimer, _balance);\\n        } else {\\n            revert(\\n                \\\"No balance would be transferred - not going to waste your gas\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97372fa83bec68fe57e2e71aa2f712e792c40670d35d9d7a159cd55a638b9ec4\"},\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xf60e60a8f48a3f2cbe2cacb45d5115d8920a3fefed772a283befaec0d29886c2\"},\"openzeppelin-contracts-sol5/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"openzeppelin-contracts-sol5/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cd54e72c11610066578063cd54e72c14610181578063d5efd20a1461019d578063dc5b68a6146101b9578063eb0d07f5146101d5578063fc0c546a146102055761009e565b8063120aa877146100a357806365ef53b1146100d357806371c5ecb1146101035780639b19251a14610133578063a3f5c1d214610163575b600080fd5b6100bd60048036036100b891908101906113e1565b610223565b6040516100ca9190611c9c565b60405180910390f35b6100ed60048036036100e8919081019061137c565b610252565b6040516100fa9190611ec8565b60405180910390f35b61011d600480360361011891908101906113b8565b61040c565b60405161012a9190611cb7565b60405180910390f35b61014d60048036036101489190810190611243565b610424565b60405161015a9190611c9c565b60405180910390f35b61016b610444565b6040516101789190611ced565b60405180910390f35b61019b600480360361019691908101906112d8565b61046a565b005b6101b760048036036101b291908101906113b8565b610486565b005b6101d360048036036101ce919081019061126c565b610567565b005b6101ef60048036036101ea91908101906112d8565b6106e0565b6040516101fc9190611c9c565b60405180910390f35b61020d6106f8565b60405161021a9190611cd2565b60405180910390f35b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d790611dc8565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161033f93929190611c05565b602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103919190810190611353565b50604054905082603e6000838152602001908152602001600020819055506103c5600160405461071e90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516103fe93929190611ee3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61047684848484610773565b610480848361094a565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990611dc8565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf8160405161055c9190611ec8565b60405180910390a150565b600060019054906101000a900460ff168061058657506105856109e4565b5b8061059d57506000809054906101000a900460ff16155b6105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390611de8565b60405180910390fd5b60008060019054906101000a900460ff16159050801561062c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61067785858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506109fb565b81603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106d95760008060016101000a81548160ff0219169083151502179055505b5050505050565b60006106ee85858585610a85565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611d48565b60405180910390fd5b8091505092915050565b60405483106107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90611d68565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611e48565b60405180910390fd5b61086184848484610a85565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790611d28565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a84848460405161093c93929190611c65565b60405180910390a150505050565b60008111156109a5576109a08282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610adc9092919063ffffffff16565b6109e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d790611e28565b60405180910390fd5b5050565b6000803090506000813b9050600081149250505090565b610a0482610b7b565b6000815111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90611da8565b60405180910390fd5b60008090505b8151811015610a8057610a73828281518110610a6657fe5b6020026020010151610c37565b8080600101915050610a4e565b505050565b6000808584604051602001610a9b929190611aee565b604051602081830303815290604052805190602001209050610ad183603e60008881526020019081526020016000205483610dd2565b915050949350505050565b610b76838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610b14929190611c3c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290611d08565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c34610ff0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90611e68565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90611e08565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b60008082905060008090505b8551811015610e70576000868281518110610df557fe5b60200260200101519050808311610e36578281604051602001610e19929190611b1a565b604051602081830303815290604052805190602001209250610e62565b8083604051602001610e49929190611b1a565b6040516020818303038152906040528051906020012092505b508080600101915050610dde565b508381149150509392505050565b610e9d8273ffffffffffffffffffffffffffffffffffffffff166110c2565b610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390611ea8565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610f059190611b46565b6000604051808303816000865af19150503d8060008114610f42576040519150601f19603f3d011682016040523d82523d6000602084013e610f47565b606091505b509150915081610f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8390611d88565b60405180910390fd5b600081511115610fea5780806020019051610faa9190810190611353565b610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090611e88565b60405180910390fd5b5b50505050565b604051610ffc90611bc6565b604051809103902060338190555060405161101690611b72565b604051809103902060348190555060405161103090611bdb565b604051809103902060358190555060405161104a90611bb1565b604051809103902060368190555060405161106490611b9c565b604051809103902060378190555060405161107e90611b87565b604051809103902060388190555060405161109890611bf0565b60405180910390206039819055506040516110b290611b5d565b6040518091039020603a81905550565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561110457506000801b8214155b92505050919050565b60008135905061111c816120fb565b92915050565b60008083601f84011261113457600080fd5b8235905067ffffffffffffffff81111561114d57600080fd5b60208301915083602082028301111561116557600080fd5b9250929050565b600082601f83011261117d57600080fd5b813561119061118b82611f47565b611f1a565b915081818352602084019350602081019050838560208402820111156111b557600080fd5b60005b838110156111e557816111cb8882611204565b8452602084019350602083019250506001810190506111b8565b5050505092915050565b6000815190506111fe81612112565b92915050565b60008135905061121381612129565b92915050565b60008135905061122881612140565b92915050565b60008135905061123d81612157565b92915050565b60006020828403121561125557600080fd5b60006112638482850161110d565b91505092915050565b6000806000806060858703121561128257600080fd5b60006112908782880161110d565b945050602085013567ffffffffffffffff8111156112ad57600080fd5b6112b987828801611122565b935093505060406112cc87828801611219565b91505092959194509250565b600080600080608085870312156112ee57600080fd5b60006112fc8782880161110d565b945050602061130d8782880161122e565b935050604061131e8782880161122e565b925050606085013567ffffffffffffffff81111561133b57600080fd5b6113478782880161116c565b91505092959194509250565b60006020828403121561136557600080fd5b6000611373848285016111ef565b91505092915050565b6000806040838503121561138f57600080fd5b600061139d85828601611204565b92505060206113ae8582860161122e565b9150509250929050565b6000602082840312156113ca57600080fd5b60006113d88482850161122e565b91505092915050565b600080604083850312156113f457600080fd5b60006114028582860161122e565b92505060206114138582860161110d565b9150509250929050565b61142681612005565b82525050565b61143581611fa1565b82525050565b61144c61144782611fa1565b6120b6565b82525050565b61145b81611fb3565b82525050565b61146a81611fbf565b82525050565b61148161147c82611fbf565b6120c8565b82525050565b600061149282611f6f565b61149c8185611f7a565b93506114ac818560208601612083565b80840191505092915050565b6114c181612017565b82525050565b6114d08161203b565b82525050565b60006114e3601583611f85565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b6000611523600e83611f96565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b6000611563600783611f96565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006115a3601683611f85565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006115e3601b83611f85565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611623601a83611f85565b91507f5472616e63686520646f6573206e6f74207965742065786973740000000000006000830152602082019050919050565b6000611663601083611f96565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b60006116a3602083611f85565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b60006116e3600783611f96565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611723601583611f85565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b6000611763601983611f85565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b60006117a3600983611f96565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b60006117e3600a83611f96565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611823600a83611f96565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611863602e83611f85565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006118c9601383611f85565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b6000611909603d83611f85565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b600061196f601683611f85565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b60006119af600f83611f85565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b60006119ef602a83611f85565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a55600983611f96565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611a95601f83611f85565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ad181611ffb565b82525050565b611ae8611ae382611ffb565b6120e4565b82525050565b6000611afa828561143b565b601482019150611b0a8284611ad7565b6020820191508190509392505050565b6000611b268285611470565b602082019150611b368284611470565b6020820191508190509392505050565b6000611b528284611487565b915081905092915050565b6000611b6882611516565b9150819050919050565b6000611b7d82611556565b9150819050919050565b6000611b9282611656565b9150819050919050565b6000611ba7826116d6565b9150819050919050565b6000611bbc82611796565b9150819050919050565b6000611bd1826117d6565b9150819050919050565b6000611be682611816565b9150819050919050565b6000611bfb82611a48565b9150819050919050565b6000606082019050611c1a600083018661141d565b611c27602083018561142c565b611c346040830184611ac8565b949350505050565b6000604082019050611c51600083018561142c565b611c5e6020830184611ac8565b9392505050565b6000606082019050611c7a600083018661142c565b611c876020830185611ac8565b611c946040830184611ac8565b949350505050565b6000602082019050611cb16000830184611452565b92915050565b6000602082019050611ccc6000830184611461565b92915050565b6000602082019050611ce760008301846114b8565b92915050565b6000602082019050611d0260008301846114c7565b92915050565b60006020820190508181036000830152611d21816114d6565b9050919050565b60006020820190508181036000830152611d4181611596565b9050919050565b60006020820190508181036000830152611d61816115d6565b9050919050565b60006020820190508181036000830152611d8181611616565b9050919050565b60006020820190508181036000830152611da181611696565b9050919050565b60006020820190508181036000830152611dc181611716565b9050919050565b60006020820190508181036000830152611de181611756565b9050919050565b60006020820190508181036000830152611e0181611856565b9050919050565b60006020820190508181036000830152611e21816118bc565b9050919050565b60006020820190508181036000830152611e41816118fc565b9050919050565b60006020820190508181036000830152611e6181611962565b9050919050565b60006020820190508181036000830152611e81816119a2565b9050919050565b60006020820190508181036000830152611ea1816119e2565b9050919050565b60006020820190508181036000830152611ec181611a88565b9050919050565b6000602082019050611edd6000830184611ac8565b92915050565b6000606082019050611ef86000830186611ac8565b611f056020830185611461565b611f126040830184611ac8565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715611f3d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611f5e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611fac82611fdb565b9050919050565b60008115159050919050565b6000819050919050565b6000611fd482611fa1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120108261205f565b9050919050565b600061202282612029565b9050919050565b600061203482611fdb565b9050919050565b60006120468261204d565b9050919050565b600061205882611fdb565b9050919050565b600061206a82612071565b9050919050565b600061207c82611fdb565b9050919050565b60005b838110156120a1578082015181840152602081019050612086565b838111156120b0576000848401525b50505050565b60006120c1826120d2565b9050919050565b6000819050919050565b60006120dd826120ee565b9050919050565b6000819050919050565b60008160601b9050919050565b61210481611fa1565b811461210f57600080fd5b50565b61211b81611fb3565b811461212657600080fd5b50565b61213281611fbf565b811461213d57600080fd5b50565b61214981611fc9565b811461215457600080fd5b50565b61216081611ffb565b811461216b57600080fd5b5056fea365627a7a723158202c94884502cccfc7927569f43c6bae77346f2356704a0b93c7395f88060bfc716c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cd54e72c11610066578063cd54e72c14610181578063d5efd20a1461019d578063dc5b68a6146101b9578063eb0d07f5146101d5578063fc0c546a146102055761009e565b8063120aa877146100a357806365ef53b1146100d357806371c5ecb1146101035780639b19251a14610133578063a3f5c1d214610163575b600080fd5b6100bd60048036036100b891908101906113e1565b610223565b6040516100ca9190611c9c565b60405180910390f35b6100ed60048036036100e8919081019061137c565b610252565b6040516100fa9190611ec8565b60405180910390f35b61011d600480360361011891908101906113b8565b61040c565b60405161012a9190611cb7565b60405180910390f35b61014d60048036036101489190810190611243565b610424565b60405161015a9190611c9c565b60405180910390f35b61016b610444565b6040516101789190611ced565b60405180910390f35b61019b600480360361019691908101906112d8565b61046a565b005b6101b760048036036101b291908101906113b8565b610486565b005b6101d360048036036101ce919081019061126c565b610567565b005b6101ef60048036036101ea91908101906112d8565b6106e0565b6040516101fc9190611c9c565b60405180910390f35b61020d6106f8565b60405161021a9190611cd2565b60405180910390f35b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d790611dc8565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161033f93929190611c05565b602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103919190810190611353565b50604054905082603e6000838152602001908152602001600020819055506103c5600160405461071e90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516103fe93929190611ee3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61047684848484610773565b610480848361094a565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990611dc8565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf8160405161055c9190611ec8565b60405180910390a150565b600060019054906101000a900460ff168061058657506105856109e4565b5b8061059d57506000809054906101000a900460ff16155b6105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390611de8565b60405180910390fd5b60008060019054906101000a900460ff16159050801561062c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61067785858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506109fb565b81603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156106d95760008060016101000a81548160ff0219169083151502179055505b5050505050565b60006106ee85858585610a85565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076090611d48565b60405180910390fd5b8091505092915050565b60405483106107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90611d68565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611e48565b60405180910390fd5b61086184848484610a85565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790611d28565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a84848460405161093c93929190611c65565b60405180910390a150505050565b60008111156109a5576109a08282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610adc9092919063ffffffff16565b6109e0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d790611e28565b60405180910390fd5b5050565b6000803090506000813b9050600081149250505090565b610a0482610b7b565b6000815111610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90611da8565b60405180910390fd5b60008090505b8151811015610a8057610a73828281518110610a6657fe5b6020026020010151610c37565b8080600101915050610a4e565b505050565b6000808584604051602001610a9b929190611aee565b604051602081830303815290604052805190602001209050610ad183603e60008881526020019081526020016000205483610dd2565b915050949350505050565b610b76838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610b14929190611c3c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be290611d08565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c34610ff0565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e90611e68565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90611e08565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b60008082905060008090505b8551811015610e70576000868281518110610df557fe5b60200260200101519050808311610e36578281604051602001610e19929190611b1a565b604051602081830303815290604052805190602001209250610e62565b8083604051602001610e49929190611b1a565b6040516020818303038152906040528051906020012092505b508080600101915050610dde565b508381149150509392505050565b610e9d8273ffffffffffffffffffffffffffffffffffffffff166110c2565b610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed390611ea8565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610f059190611b46565b6000604051808303816000865af19150503d8060008114610f42576040519150601f19603f3d011682016040523d82523d6000602084013e610f47565b606091505b509150915081610f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8390611d88565b60405180910390fd5b600081511115610fea5780806020019051610faa9190810190611353565b610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090611e88565b60405180910390fd5b5b50505050565b604051610ffc90611bc6565b604051809103902060338190555060405161101690611b72565b604051809103902060348190555060405161103090611bdb565b604051809103902060358190555060405161104a90611bb1565b604051809103902060368190555060405161106490611b9c565b604051809103902060378190555060405161107e90611b87565b604051809103902060388190555060405161109890611bf0565b60405180910390206039819055506040516110b290611b5d565b6040518091039020603a81905550565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561110457506000801b8214155b92505050919050565b60008135905061111c816120fb565b92915050565b60008083601f84011261113457600080fd5b8235905067ffffffffffffffff81111561114d57600080fd5b60208301915083602082028301111561116557600080fd5b9250929050565b600082601f83011261117d57600080fd5b813561119061118b82611f47565b611f1a565b915081818352602084019350602081019050838560208402820111156111b557600080fd5b60005b838110156111e557816111cb8882611204565b8452602084019350602083019250506001810190506111b8565b5050505092915050565b6000815190506111fe81612112565b92915050565b60008135905061121381612129565b92915050565b60008135905061122881612140565b92915050565b60008135905061123d81612157565b92915050565b60006020828403121561125557600080fd5b60006112638482850161110d565b91505092915050565b6000806000806060858703121561128257600080fd5b60006112908782880161110d565b945050602085013567ffffffffffffffff8111156112ad57600080fd5b6112b987828801611122565b935093505060406112cc87828801611219565b91505092959194509250565b600080600080608085870312156112ee57600080fd5b60006112fc8782880161110d565b945050602061130d8782880161122e565b935050604061131e8782880161122e565b925050606085013567ffffffffffffffff81111561133b57600080fd5b6113478782880161116c565b91505092959194509250565b60006020828403121561136557600080fd5b6000611373848285016111ef565b91505092915050565b6000806040838503121561138f57600080fd5b600061139d85828601611204565b92505060206113ae8582860161122e565b9150509250929050565b6000602082840312156113ca57600080fd5b60006113d88482850161122e565b91505092915050565b600080604083850312156113f457600080fd5b60006114028582860161122e565b92505060206114138582860161110d565b9150509250929050565b61142681612005565b82525050565b61143581611fa1565b82525050565b61144c61144782611fa1565b6120b6565b82525050565b61145b81611fb3565b82525050565b61146a81611fbf565b82525050565b61148161147c82611fbf565b6120c8565b82525050565b600061149282611f6f565b61149c8185611f7a565b93506114ac818560208601612083565b80840191505092915050565b6114c181612017565b82525050565b6114d08161203b565b82525050565b60006114e3601583611f85565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b6000611523600e83611f96565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b6000611563600783611f96565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006115a3601683611f85565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006115e3601b83611f85565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611623601a83611f85565b91507f5472616e63686520646f6573206e6f74207965742065786973740000000000006000830152602082019050919050565b6000611663601083611f96565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b60006116a3602083611f85565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b60006116e3600783611f96565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611723601583611f85565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b6000611763601983611f85565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b60006117a3600983611f96565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b60006117e3600a83611f96565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611823600a83611f96565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b6000611863602e83611f85565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006118c9601383611f85565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b6000611909603d83611f85565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b600061196f601683611f85565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b60006119af600f83611f85565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b60006119ef602a83611f85565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a55600983611f96565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611a95601f83611f85565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ad181611ffb565b82525050565b611ae8611ae382611ffb565b6120e4565b82525050565b6000611afa828561143b565b601482019150611b0a8284611ad7565b6020820191508190509392505050565b6000611b268285611470565b602082019150611b368284611470565b6020820191508190509392505050565b6000611b528284611487565b915081905092915050565b6000611b6882611516565b9150819050919050565b6000611b7d82611556565b9150819050919050565b6000611b9282611656565b9150819050919050565b6000611ba7826116d6565b9150819050919050565b6000611bbc82611796565b9150819050919050565b6000611bd1826117d6565b9150819050919050565b6000611be682611816565b9150819050919050565b6000611bfb82611a48565b9150819050919050565b6000606082019050611c1a600083018661141d565b611c27602083018561142c565b611c346040830184611ac8565b949350505050565b6000604082019050611c51600083018561142c565b611c5e6020830184611ac8565b9392505050565b6000606082019050611c7a600083018661142c565b611c876020830185611ac8565b611c946040830184611ac8565b949350505050565b6000602082019050611cb16000830184611452565b92915050565b6000602082019050611ccc6000830184611461565b92915050565b6000602082019050611ce760008301846114b8565b92915050565b6000602082019050611d0260008301846114c7565b92915050565b60006020820190508181036000830152611d21816114d6565b9050919050565b60006020820190508181036000830152611d4181611596565b9050919050565b60006020820190508181036000830152611d61816115d6565b9050919050565b60006020820190508181036000830152611d8181611616565b9050919050565b60006020820190508181036000830152611da181611696565b9050919050565b60006020820190508181036000830152611dc181611716565b9050919050565b60006020820190508181036000830152611de181611756565b9050919050565b60006020820190508181036000830152611e0181611856565b9050919050565b60006020820190508181036000830152611e21816118bc565b9050919050565b60006020820190508181036000830152611e41816118fc565b9050919050565b60006020820190508181036000830152611e6181611962565b9050919050565b60006020820190508181036000830152611e81816119a2565b9050919050565b60006020820190508181036000830152611ea1816119e2565b9050919050565b60006020820190508181036000830152611ec181611a88565b9050919050565b6000602082019050611edd6000830184611ac8565b92915050565b6000606082019050611ef86000830186611ac8565b611f056020830185611461565b611f126040830184611ac8565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715611f3d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611f5e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611fac82611fdb565b9050919050565b60008115159050919050565b6000819050919050565b6000611fd482611fa1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006120108261205f565b9050919050565b600061202282612029565b9050919050565b600061203482611fdb565b9050919050565b60006120468261204d565b9050919050565b600061205882611fdb565b9050919050565b600061206a82612071565b9050919050565b600061207c82611fdb565b9050919050565b60005b838110156120a1578082015181840152602081019050612086565b838111156120b0576000848401525b50505050565b60006120c1826120d2565b9050919050565b6000819050919050565b60006120dd826120ee565b9050919050565b6000819050919050565b60008160601b9050919050565b61210481611fa1565b811461210f57600080fd5b50565b61211b81611fb3565b811461212657600080fd5b50565b61213281611fbf565b811461213d57600080fd5b50565b61214981611fc9565b811461215457600080fd5b50565b61216081611ffb565b811461216b57600080fd5b5056fea365627a7a723158202c94884502cccfc7927569f43c6bae77346f2356704a0b93c7395f88060bfc716c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "claimTranche(address,uint256,uint256,bytes32[])": {
        "notice": "************************************* CLAIMING***************************************"
      },
      "seedNewAllocations(bytes32,uint256)": {
        "notice": "************************************* ADMIN***************************************"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 422,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 424,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 486,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_GOVERNANCE",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 353,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_STAKING",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 355,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_PROXY_ADMIN",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 357,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_ORACLE_HUB",
        "offset": 0,
        "slot": "54",
        "type": "t_bytes32"
      },
      {
        "astId": 359,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_MANAGER",
        "offset": 0,
        "slot": "55",
        "type": "t_bytes32"
      },
      {
        "astId": 361,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_RECOLLATERALISER",
        "offset": 0,
        "slot": "56",
        "type": "t_bytes32"
      },
      {
        "astId": 363,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_META_TOKEN",
        "offset": 0,
        "slot": "57",
        "type": "t_bytes32"
      },
      {
        "astId": 365,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_SAVINGS_MANAGER",
        "offset": 0,
        "slot": "58",
        "type": "t_bytes32"
      },
      {
        "astId": 164,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "nexus",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(INexus)154"
      },
      {
        "astId": 13,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "whitelist",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 538,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "token",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(IERC20)1126"
      },
      {
        "astId": 542,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 548,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "claimed",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 550,
        "contract": "contracts/migration/MerkleDrop.sol:MerkleDrop",
        "label": "tranches",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1126": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INexus)154": {
        "encoding": "inplace",
        "label": "contract INexus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}