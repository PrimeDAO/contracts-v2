{
  "address": "0x9E44019Fd8e65F2cb95a5C0C057E238D4fc8e836",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_functionSignatures",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "SignatureCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "allowedTransactions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_functionSignature",
          "type": "bytes4"
        }
      ],
      "name": "approveNewTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "approvedSignatures",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "enum Enum.Operation",
          "name": "_operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_safeTxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gasToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_refundReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "generateSignature",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        }
      ],
      "name": "setSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce913a94fa3a882fd48368a10e022f29be132eefabe160c8e9534547a0636ac4",
  "receipt": {
    "to": null,
    "from": "0x67BE2C36e75B7439ffc2DCb99dBdF4fbB2455930",
    "contractAddress": "0x9E44019Fd8e65F2cb95a5C0C057E238D4fc8e836",
    "transactionIndex": 104,
    "gasUsed": "844265",
    "logsBloom": "0x
    "blockHash": "0x5beb418959fa14a4c329178e9a9e4024f1f24108461f07a138f9b57ae8f6bf7b",
    "transactionHash": "0xce913a94fa3a882fd48368a10e022f29be132eefabe160c8e9534547a0636ac4",
    "logs": [],
    "blockNumber": 9462865,
    "cumulativeGasUsed": "22628058",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2E46E481d57477A0663a7Ec61E7eDc65F4cb7F5C",
    [
      "0xE3Ba9BA90616e862E7645fC4Fcad151ae3E28970"
    ],
    [
      "0xfd3bd38a"
    ]
  ],
  "solcInputHash": "025ba52ff4b85503373a5427884f6d74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_functionSignatures\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SignatureCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"allowedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_functionSignature\",\"type\":\"bytes4\"}],\"name\":\"approveNewTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedSignatures\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"_operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"generateSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"}],\"name\":\"setSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.\",\"kind\":\"dev\",\"methods\":{\"approveNewTransaction(address,bytes4)\":{\"details\":\"add new contracts and functions\",\"params\":{\"_contract\":\"contract address\",\"_functionSignature\":\"function signature for the contract\"}},\"constructor\":{\"details\":\"Signer Constructor\",\"params\":{\"_contracts\":\"array of contract addresses\",\"_functionSignatures\":\"array of function signatures\",\"_safe\":\"Gnosis Safe address.\"}},\"generateSignature(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)\":{\"details\":\"Signature generator\",\"params\":{\"_baseGas\":\"base gas for gnosis safe.\",\"_data\":\"encoded transaction data.\",\"_gasPrice\":\"gas price for gnosis safe transaction.\",\"_gasToken\":\"token which gas needs to paid for gnosis safe transaction.\",\"_nonce\":\"gnosis safe contract nonce.\",\"_operation\":\"type of operation call.\",\"_refundReceiver\":\"address account to receive refund for remaining gas.\",\"_safeTxGas\":\"safe transaction gas for gnosis safe.\",\"_to\":\"receiver address.\",\"_value\":\"value in wei.\"}},\"isValidSignature(bytes,bytes)\":{\"details\":\"Validate signature using EIP1271\",\"params\":{\"_data\":\"Encoded transaction hash supplied to verify signature.\",\"_signature\":\"Signature that needs to be verified.\"}},\"setSafe(address)\":{\"details\":\"set new safe\",\"params\":{\"_safe\":\"safe address\"}}},\"title\":\"PrimeDAO Signer Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SignerV2.sol\":\"SignerV2\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5b6e9bf17f28738ce88e751f420b0559f5151ba7bec2ff3c7bb31e42673d6801\",\"license\":\"LGPL-3.0-only\"},\"contracts/utils/SignerV2.sol\":{\"content\":\"/*\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// solium-disable linebreak-style\\npragma solidity 0.8.6;\\n\\nimport \\\"./interface/Safe.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\\\";\\n\\n/**\\n * @title PrimeDAO Signer Contract\\n * @dev   Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.\\n */\\ncontract SignerV2 is ISignatureValidator {\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35;\\n    bytes32 private constant MSG_TYPEHASH =\\n        0xa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d; // mapping for msg typehash\\n\\n    mapping(bytes32 => bytes32) public approvedSignatures;\\n\\n    /* solium-disable */\\n    address public safe;\\n    mapping(address => mapping(bytes4 => bool)) public allowedTransactions;\\n    /* solium-enable */\\n\\n    event SignatureCreated(bytes signature, bytes32 indexed hash);\\n\\n    modifier onlySafe() {\\n        require(msg.sender == safe, \\\"Signer: only safe functionality\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev                       Signer Constructor\\n     * @param _safe               Gnosis Safe address.\\n     * @param _contracts          array of contract addresses\\n     * @param _functionSignatures array of function signatures\\n     */\\n    constructor(\\n        address _safe,\\n        address[] memory _contracts,\\n        bytes4[] memory _functionSignatures\\n    ) {\\n        require(_safe != address(0), \\\"Signer: Safe address cannot be zero\\\");\\n        safe = _safe;\\n        for (uint256 i; i < _contracts.length; i++) {\\n            allowedTransactions[_contracts[i]][_functionSignatures[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev                   Signature generator\\n     * @param _to             receiver address.\\n     * @param _value          value in wei.\\n     * @param _data           encoded transaction data.\\n     * @param _operation      type of operation call.\\n     * @param _safeTxGas      safe transaction gas for gnosis safe.\\n     * @param _baseGas        base gas for gnosis safe.\\n     * @param _gasPrice       gas price for gnosis safe transaction.\\n     * @param _gasToken       token which gas needs to paid for gnosis safe transaction.\\n     * @param _refundReceiver address account to receive refund for remaining gas.\\n     * @param _nonce          gnosis safe contract nonce.\\n     */\\n    function generateSignature(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data,\\n        Enum.Operation _operation,\\n        uint256 _safeTxGas,\\n        uint256 _baseGas,\\n        uint256 _gasPrice,\\n        address _gasToken,\\n        address _refundReceiver,\\n        uint256 _nonce\\n    ) external returns (bytes memory signature, bytes32 hash) {\\n        // check if transaction parameters are correct\\n        require(\\n            allowedTransactions[_to][_getFunctionHashFromData(_data)],\\n            \\\"Signer: can only sign calls to approved contract function\\\"\\n        );\\n        require(\\n            _value == 0 &&\\n                _refundReceiver == address(0) &&\\n                _operation == Enum.Operation.Call,\\n            \\\"Signer: invalid arguments provided\\\"\\n        );\\n\\n        // get contractTransactionHash from gnosis safe\\n        hash = Safe(safe).getTransactionHash(\\n            _to,\\n            0,\\n            _data,\\n            _operation,\\n            _safeTxGas,\\n            _baseGas,\\n            _gasPrice,\\n            _gasToken,\\n            _refundReceiver,\\n            _nonce\\n        );\\n\\n        bytes memory paddedAddress = bytes.concat(\\n            bytes12(0),\\n            bytes20(address(this))\\n        );\\n        bytes memory messageHash = _encodeMessageHash(hash);\\n        // check if transaction is not signed before\\n        require(\\n            approvedSignatures[hash] != keccak256(messageHash),\\n            \\\"Signer: transaction already signed\\\"\\n        );\\n\\n        // generate signature and add it to approvedSignatures mapping\\n        signature = bytes.concat(\\n            paddedAddress,\\n            bytes32(uint256(65)),\\n            bytes1(0),\\n            bytes32(uint256(messageHash.length)),\\n            messageHash\\n        );\\n        approvedSignatures[hash] = keccak256(messageHash);\\n        emit SignatureCreated(signature, hash);\\n    }\\n\\n    /**\\n     * @dev                Validate signature using EIP1271\\n     * @param _data        Encoded transaction hash supplied to verify signature.\\n     * @param _signature   Signature that needs to be verified.\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature)\\n        public\\n        view\\n        override\\n        returns (bytes4)\\n    {\\n        if (_data.length == 32) {\\n            bytes32 hash;\\n            assembly {\\n                hash := mload(add(_data, 32))\\n            }\\n            if (approvedSignatures[hash] == keccak256(_signature)) {\\n                return EIP1271_MAGIC_VALUE;\\n            }\\n        } else {\\n            if (approvedSignatures[keccak256(_data)] == keccak256(_signature)) {\\n                return EIP1271_MAGIC_VALUE;\\n            }\\n        }\\n        return \\\"0x\\\";\\n    }\\n\\n    /**\\n     * @dev               Get the byte hash of function call i.e. first four bytes of data\\n     * @param data        encoded transaction data.\\n     */\\n    function _getFunctionHashFromData(bytes memory data)\\n        private\\n        pure\\n        returns (bytes4 functionHash)\\n    {\\n        assembly {\\n            functionHash := mload(add(data, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev                encode message with contants\\n     * @param message      the message that needs to be encoded\\n     */\\n    function _encodeMessageHash(bytes32 message)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes32 safeMessageHash = keccak256(abi.encode(MSG_TYPEHASH, message));\\n        return\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0x23),\\n                keccak256(\\n                    abi.encode(DOMAIN_SEPARATOR_TYPEHASH, safeMessageHash)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev                set new safe\\n     * @param _safe        safe address\\n     */\\n    function setSafe(address _safe) public onlySafe {\\n        require(_safe != address(0), \\\"Signer: new safe cannot be zero address\\\");\\n        safe = _safe;\\n    }\\n\\n    /**\\n     * @dev                      add new contracts and functions\\n     * @param _contract           contract address\\n     * @param _functionSignature function signature for the contract\\n     */\\n    function approveNewTransaction(address _contract, bytes4 _functionSignature)\\n        external\\n        onlySafe\\n    {\\n        require(\\n            _contract != address(0),\\n            \\\"Signer: contract address cannot be zero\\\"\\n        );\\n        require(\\n            _functionSignature != bytes4(0),\\n            \\\"Signer: function signature cannot be zero\\\"\\n        );\\n        allowedTransactions[_contract][_functionSignature] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x9130d1f22bae6e491848324faea15696cddd88af7b9367bb46d35f24fc369a4a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interface/Safe.sol\":{\"content\":\"/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/* solium-disable */\\npragma solidity 0.8.6;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface Safe {\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xefa8ced906d09d4dbba9d8430a540a2c666fd523ae2e7c4798854d166a6a8ed1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010fa380380620010fa83398101604081905262000034916200021e565b6001600160a01b0383166200009b5760405162461bcd60e51b815260206004820152602360248201527f5369676e65723a205361666520616464726573732063616e6e6f74206265207a60448201526265726f60e81b606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b03851617905560005b82518110156200016557600160026000858481518110620000de57620000de6200038c565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008484815181106200011d576200011d6200038c565b6020908102919091018101516001600160e01b0319168252810191909152604001600020805460ff1916911515919091179055806200015c8162000362565b915050620000b9565b50505050620003b8565b80516001600160a01b03811681146200018757600080fd5b919050565b600082601f8301126200019e57600080fd5b81516020620001b7620001b1836200033c565b62000309565b80838252828201915082860187848660051b8901011115620001d857600080fd5b6000805b86811015620002105782516001600160e01b031981168114620001fd578283fd5b85529385019391850191600101620001dc565b509198975050505050505050565b6000806000606084860312156200023457600080fd5b6200023f846200016f565b602085810151919450906001600160401b03808211156200025f57600080fd5b818701915087601f8301126200027457600080fd5b815162000285620001b1826200033c565b8082825285820191508585018b878560051b8801011115620002a657600080fd5b600095505b83861015620002d457620002bf816200016f565b835260019590950194918601918601620002ab565b5060408a01519097509450505080831115620002ef57600080fd5b5050620002ff868287016200018c565b9150509250925092565b604051601f8201601f191681016001600160401b0381118282101715620003345762000334620003a2565b604052919050565b60006001600160401b03821115620003585762000358620003a2565b5060051b60200190565b60006000198214156200038557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610d3280620003c86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635db0cb941161005b5780635db0cb94146100f357806374fe857a14610106578063e14ff99814610127578063f164e6ea1461015557600080fd5b8063186f03541461008257806320c13b0b146100b25780632435f0a5146100de575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100c0366004610adc565b610193565b6040516001600160e01b031990911681526020016100a9565b6100f16100ec36600461097e565b61021c565b005b6100f161010136600461095c565b610385565b6101196101143660046109c2565b610467565b6040516100a9929190610c7e565b610147610135366004610aaa565b60006020819052908152604090205481565b6040519081526020016100a9565b61018361016336600461097e565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100a9565b60008251602014156101d857602083810151835184830120600082815292839052604090922054909114156101d257506320c13b0b60e01b9050610216565b5061020e565b81805190602001206000808580519060200120815260200190815260200160002054141561020e57506320c13b0b60e01b610216565b5061060f60f31b5b92915050565b6001546001600160a01b0316331461027b5760405162461bcd60e51b815260206004820152601f60248201527f5369676e65723a206f6e6c7920736166652066756e6374696f6e616c6974790060448201526064015b60405180910390fd5b6001600160a01b0382166102e15760405162461bcd60e51b815260206004820152602760248201527f5369676e65723a20636f6e747261637420616464726573732063616e6e6f74206044820152666265207a65726f60c81b6064820152608401610272565b6001600160e01b0319811661034a5760405162461bcd60e51b815260206004820152602960248201527f5369676e65723a2066756e6374696f6e207369676e61747572652063616e6e6f60448201526874206265207a65726f60b81b6064820152608401610272565b6001600160a01b0390911660009081526002602090815260408083206001600160e01b0319909416835292905220805460ff19166001179055565b6001546001600160a01b031633146103df5760405162461bcd60e51b815260206004820152601f60248201527f5369676e65723a206f6e6c7920736166652066756e6374696f6e616c697479006044820152606401610272565b6001600160a01b0381166104455760405162461bcd60e51b815260206004820152602760248201527f5369676e65723a206e657720736166652063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608401610272565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606000600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060006104d18d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061089d92505050565b6001600160e01b031916815260208101919091526040016000205460ff166105615760405162461bcd60e51b815260206004820152603960248201527f5369676e65723a2063616e206f6e6c79207369676e2063616c6c7320746f206160448201527f7070726f76656420636f6e74726163742066756e6374696f6e000000000000006064820152608401610272565b8b15801561057657506001600160a01b038416155b80156105935750600089600181111561059157610591610cd0565b145b6105ea5760405162461bcd60e51b815260206004820152602260248201527f5369676e65723a20696e76616c696420617267756d656e74732070726f766964604482015261195960f21b6064820152608401610272565b600160009054906101000a90046001600160a01b03166001600160a01b031663d8d11f788e60008e8e8e8e8e8e8e8e8e6040518c63ffffffff1660e01b81526004016106409b9a99989796959493929190610bba565b60206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610ac3565b604080516000602082018190526bffffffffffffffffffffffff193060601b16602c830152929350016040516020818303038152906040529050600061079383604080517fa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d602080830191909152818301939093528151808203830181526060820183528051908401207f7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35608083015260a0808301919091528251808303909101815260c0820183528051930192909220601960f81b60e0840152602360f81b60e184015260e28084019190915281518084039091018152610102909201905290565b905080805190602001206000808581526020019081526020016000205414156108095760405162461bcd60e51b815260206004820152602260248201527f5369676e65723a207472616e73616374696f6e20616c7265616479207369676e604482015261195960f21b6064820152608401610272565b80516040516108249184916041916000918690602001610b6c565b6040516020818303038152906040529350808051906020012060008085815260200190815260200160002081905550827f4418bf19096bdd1b926a95d3cba8654e780b1b8b9a68526fb2faa0de58040d85856040516108839190610c6b565b60405180910390a250509b509b9950505050505050505050565b6020015190565b80356001600160a01b03811681146108bb57600080fd5b919050565b600082601f8301126108d157600080fd5b813567ffffffffffffffff808211156108ec576108ec610ce6565b604051601f8301601f19908116603f0116810190828211818310171561091457610914610ce6565b8160405283815286602085880101111561092d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600281106108bb57600080fd5b60006020828403121561096e57600080fd5b610977826108a4565b9392505050565b6000806040838503121561099157600080fd5b61099a836108a4565b915060208301356001600160e01b0319811681146109b757600080fd5b809150509250929050565b60008060008060008060008060008060006101408c8e0312156109e457600080fd5b6109ed8c6108a4565b9a5060208c0135995060408c013567ffffffffffffffff80821115610a1157600080fd5b818e0191508e601f830112610a2557600080fd5b813581811115610a3457600080fd5b8f6020828501011115610a4657600080fd5b602083019b50809a50505050610a5e60608d0161094d565b965060808c0135955060a08c0135945060c08c01359350610a8160e08d016108a4565b9250610a906101008d016108a4565b91506101208c013590509295989b509295989b9093969950565b600060208284031215610abc57600080fd5b5035919050565b600060208284031215610ad557600080fd5b5051919050565b60008060408385031215610aef57600080fd5b823567ffffffffffffffff80821115610b0757600080fd5b610b13868387016108c0565b93506020850135915080821115610b2957600080fd5b50610b36858286016108c0565b9150509250929050565b60008151808452610b58816020860160208601610ca0565b601f01601f19169290920160200192915050565b60008651610b7e818460208b01610ca0565b808301905086815260ff60f81b861660208201528460218201528351610bab816041840160208801610ca0565b01604101979650505050505050565b6001600160a01b038c168152602081018b905261014060408201819052810189905260006101608a8c828501376000838c01820152601f8b01601f1916830101905060028910610c1a57634e487b7160e01b600052602160045260246000fd5b8860608301528760808301528660a08301528560c0830152610c4760e08301866001600160a01b03169052565b6001600160a01b039390931661010082015261012001529998505050505050505050565b6020815260006109776020830184610b40565b604081526000610c916040830185610b40565b90508260208301529392505050565b60005b83811015610cbb578181015183820152602001610ca3565b83811115610cca576000848401525b50505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204fc2068fff79c5f7237ce66fb0c778f9ebc26d4fe4abfe8eb00e243e5d4bbdb564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635db0cb941161005b5780635db0cb94146100f357806374fe857a14610106578063e14ff99814610127578063f164e6ea1461015557600080fd5b8063186f03541461008257806320c13b0b146100b25780632435f0a5146100de575b600080fd5b600154610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100c0366004610adc565b610193565b6040516001600160e01b031990911681526020016100a9565b6100f16100ec36600461097e565b61021c565b005b6100f161010136600461095c565b610385565b6101196101143660046109c2565b610467565b6040516100a9929190610c7e565b610147610135366004610aaa565b60006020819052908152604090205481565b6040519081526020016100a9565b61018361016336600461097e565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100a9565b60008251602014156101d857602083810151835184830120600082815292839052604090922054909114156101d257506320c13b0b60e01b9050610216565b5061020e565b81805190602001206000808580519060200120815260200190815260200160002054141561020e57506320c13b0b60e01b610216565b5061060f60f31b5b92915050565b6001546001600160a01b0316331461027b5760405162461bcd60e51b815260206004820152601f60248201527f5369676e65723a206f6e6c7920736166652066756e6374696f6e616c6974790060448201526064015b60405180910390fd5b6001600160a01b0382166102e15760405162461bcd60e51b815260206004820152602760248201527f5369676e65723a20636f6e747261637420616464726573732063616e6e6f74206044820152666265207a65726f60c81b6064820152608401610272565b6001600160e01b0319811661034a5760405162461bcd60e51b815260206004820152602960248201527f5369676e65723a2066756e6374696f6e207369676e61747572652063616e6e6f60448201526874206265207a65726f60b81b6064820152608401610272565b6001600160a01b0390911660009081526002602090815260408083206001600160e01b0319909416835292905220805460ff19166001179055565b6001546001600160a01b031633146103df5760405162461bcd60e51b815260206004820152601f60248201527f5369676e65723a206f6e6c7920736166652066756e6374696f6e616c697479006044820152606401610272565b6001600160a01b0381166104455760405162461bcd60e51b815260206004820152602760248201527f5369676e65723a206e657720736166652063616e6e6f74206265207a65726f206044820152666164647265737360c81b6064820152608401610272565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606000600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060006104d18d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061089d92505050565b6001600160e01b031916815260208101919091526040016000205460ff166105615760405162461bcd60e51b815260206004820152603960248201527f5369676e65723a2063616e206f6e6c79207369676e2063616c6c7320746f206160448201527f7070726f76656420636f6e74726163742066756e6374696f6e000000000000006064820152608401610272565b8b15801561057657506001600160a01b038416155b80156105935750600089600181111561059157610591610cd0565b145b6105ea5760405162461bcd60e51b815260206004820152602260248201527f5369676e65723a20696e76616c696420617267756d656e74732070726f766964604482015261195960f21b6064820152608401610272565b600160009054906101000a90046001600160a01b03166001600160a01b031663d8d11f788e60008e8e8e8e8e8e8e8e8e6040518c63ffffffff1660e01b81526004016106409b9a99989796959493929190610bba565b60206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610ac3565b604080516000602082018190526bffffffffffffffffffffffff193060601b16602c830152929350016040516020818303038152906040529050600061079383604080517fa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d602080830191909152818301939093528151808203830181526060820183528051908401207f7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35608083015260a0808301919091528251808303909101815260c0820183528051930192909220601960f81b60e0840152602360f81b60e184015260e28084019190915281518084039091018152610102909201905290565b905080805190602001206000808581526020019081526020016000205414156108095760405162461bcd60e51b815260206004820152602260248201527f5369676e65723a207472616e73616374696f6e20616c7265616479207369676e604482015261195960f21b6064820152608401610272565b80516040516108249184916041916000918690602001610b6c565b6040516020818303038152906040529350808051906020012060008085815260200190815260200160002081905550827f4418bf19096bdd1b926a95d3cba8654e780b1b8b9a68526fb2faa0de58040d85856040516108839190610c6b565b60405180910390a250509b509b9950505050505050505050565b6020015190565b80356001600160a01b03811681146108bb57600080fd5b919050565b600082601f8301126108d157600080fd5b813567ffffffffffffffff808211156108ec576108ec610ce6565b604051601f8301601f19908116603f0116810190828211818310171561091457610914610ce6565b8160405283815286602085880101111561092d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035600281106108bb57600080fd5b60006020828403121561096e57600080fd5b610977826108a4565b9392505050565b6000806040838503121561099157600080fd5b61099a836108a4565b915060208301356001600160e01b0319811681146109b757600080fd5b809150509250929050565b60008060008060008060008060008060006101408c8e0312156109e457600080fd5b6109ed8c6108a4565b9a5060208c0135995060408c013567ffffffffffffffff80821115610a1157600080fd5b818e0191508e601f830112610a2557600080fd5b813581811115610a3457600080fd5b8f6020828501011115610a4657600080fd5b602083019b50809a50505050610a5e60608d0161094d565b965060808c0135955060a08c0135945060c08c01359350610a8160e08d016108a4565b9250610a906101008d016108a4565b91506101208c013590509295989b509295989b9093969950565b600060208284031215610abc57600080fd5b5035919050565b600060208284031215610ad557600080fd5b5051919050565b60008060408385031215610aef57600080fd5b823567ffffffffffffffff80821115610b0757600080fd5b610b13868387016108c0565b93506020850135915080821115610b2957600080fd5b50610b36858286016108c0565b9150509250929050565b60008151808452610b58816020860160208601610ca0565b601f01601f19169290920160200192915050565b60008651610b7e818460208b01610ca0565b808301905086815260ff60f81b861660208201528460218201528351610bab816041840160208801610ca0565b01604101979650505050505050565b6001600160a01b038c168152602081018b905261014060408201819052810189905260006101608a8c828501376000838c01820152601f8b01601f1916830101905060028910610c1a57634e487b7160e01b600052602160045260246000fd5b8860608301528760808301528660a08301528560c0830152610c4760e08301866001600160a01b03169052565b6001600160a01b039390931661010082015261012001529998505050505050505050565b6020815260006109776020830184610b40565b604081526000610c916040830185610b40565b90508260208301529392505050565b60005b83811015610cbb578181015183820152602001610ca3565b83811115610cca576000848401525b50505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204fc2068fff79c5f7237ce66fb0c778f9ebc26d4fe4abfe8eb00e243e5d4bbdb564736f6c63430008060033",
  "devdoc": {
    "details": "Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.",
    "kind": "dev",
    "methods": {
      "approveNewTransaction(address,bytes4)": {
        "details": "add new contracts and functions",
        "params": {
          "_contract": "contract address",
          "_functionSignature": "function signature for the contract"
        }
      },
      "constructor": {
        "details": "Signer Constructor",
        "params": {
          "_contracts": "array of contract addresses",
          "_functionSignatures": "array of function signatures",
          "_safe": "Gnosis Safe address."
        }
      },
      "generateSignature(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": {
        "details": "Signature generator",
        "params": {
          "_baseGas": "base gas for gnosis safe.",
          "_data": "encoded transaction data.",
          "_gasPrice": "gas price for gnosis safe transaction.",
          "_gasToken": "token which gas needs to paid for gnosis safe transaction.",
          "_nonce": "gnosis safe contract nonce.",
          "_operation": "type of operation call.",
          "_refundReceiver": "address account to receive refund for remaining gas.",
          "_safeTxGas": "safe transaction gas for gnosis safe.",
          "_to": "receiver address.",
          "_value": "value in wei."
        }
      },
      "isValidSignature(bytes,bytes)": {
        "details": "Validate signature using EIP1271",
        "params": {
          "_data": "Encoded transaction hash supplied to verify signature.",
          "_signature": "Signature that needs to be verified."
        }
      },
      "setSafe(address)": {
        "details": "set new safe",
        "params": {
          "_safe": "safe address"
        }
      }
    },
    "title": "PrimeDAO Signer Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2919,
        "contract": "contracts/utils/SignerV2.sol:SignerV2",
        "label": "approvedSignatures",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 2921,
        "contract": "contracts/utils/SignerV2.sol:SignerV2",
        "label": "safe",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2927,
        "contract": "contracts/utils/SignerV2.sol:SignerV2",
        "label": "allowedTransactions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}