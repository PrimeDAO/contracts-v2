{
  "language": "Solidity",
  "sources": {
    "contracts/lbp/LBPManager.sol": {
      "content": "/*\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0x8e3689df(bytes32 c__0x8e3689df) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\nimport \"../utils/interface/ILBPFactory.sol\";\nimport \"../utils/interface/IVault.sol\";\nimport \"../utils/interface/ILBP.sol\";\n\n/**\n * @title LBPManager contract.\n * @dev   Smart contract for managing interactions with a Balancer LBP.\n */\ncontract LBPManager {\nfunction c_0x0511755d(bytes32 c__0x0511755d) public pure {}\n\n    // Constants\n    uint256 private constant HUNDRED_PERCENT = 10e18; // Used in calculating the fee.\n\n    // Locked parameter\n    string public symbol; // Symbol of the LBP.\n    string public name; // Name of the LBP.\n    address public admin; // Address of the admin of this contract.\n    address public beneficiary; // Address that recieves fees.\n    uint256 public feePercentage; // Fee expressed as a % (e.g. 10**18 = 100% fee, toWei('1') = 100%)\n    uint256 public swapFeePercentage; // Percentage of fee paid for every swap in the LBP.\n    IERC20[] public tokenList; // Tokens that are used in the LBP, sorted by address in numerical order (ascending).\n    uint256[] public amounts; // Amount of tokens to be added as liquidity in LBP.\n    uint256[] public startWeights; // Array containing the startWeights for the project & funding token.\n    uint256[] public endWeights; // Array containing the endWeights for the project & funding token.\n    uint256[] public startTimeEndTime; // Array containing the startTime and endTime for the LBP.\n    ILBP public lbp; // Address of LBP that is managed by this contract.\n    bytes public metadata; // IPFS Hash of the LBP creation wizard information.\n    uint8 private projectTokenIndex; // Index repesenting the project token in the tokenList.\n    address public LBPFactory; // Address of Balancers LBP factory.\n\n    // Contract logic\n    bool public poolFunded; // true:- LBP is funded; false:- LBP is not funded.\n    bool public initialized; // true:- LBPManager initialized; false:- LBPManager not initialized. Makes sure, only initialized once.\n\n    event LBPManagerAdminChanged(\n        address indexed oldAdmin,\n        address indexed newAdmin\n    );\n    event FeeTransferred(\n        address indexed beneficiary,\n        address tokenAddress,\n        uint256 amount\n    );\n    event PoolTokensWithdrawn(address indexed LbpAddress, uint256 amount);\n    event MetadataUpdated(bytes indexed metadata);\n\n    modifier onlyAdmin() {c_0x0511755d(0xb137225c7a0801b5d6f852e4283c02610c4021dd86c7a4539ac79b01da61f92c); /* function */ \n\nc_0x0511755d(0x2c853911b2b07b4cdd2c353f0424dc6c4d6e9d392aa7192d5a49ba53b4263829); /* line */ \n        c_0x0511755d(0x81e00ea52b78a7d506d29fe9f58653a76ec2acc7c915cdeca5cd69cfc7812c96); /* requirePre */ \nc_0x0511755d(0x4aeeaa272bacdb4f1cb71c2d612f6a9661a6ad1c819156a7ea70ce05d7285c41); /* statement */ \nrequire(msg.sender == admin, \"LBPManager: caller is not admin\");c_0x0511755d(0x2093f378bb18b7126a48cf5f337df1fb415abc58f298c52efde081f2b4ff0ee7); /* requirePost */ \n\nc_0x0511755d(0x160501e0daa8197bd584b4a703832da6496104d6791519abb4b5fd90cbc00827); /* line */ \n        _;\n    }\n\n    /**\n     * @dev                             Transfer admin rights.\n     * @param _newAdmin                 Address of the new admin.\n     */\n    function transferAdminRights(address _newAdmin) external onlyAdmin {c_0x0511755d(0xe5bfa4905316958041c6ce632df9a5ab25b004bd28e94b502ee2caa92b9d1c3f); /* function */ \n\nc_0x0511755d(0x417b35084475207ab914880b7e0b2e2b9027885f24abd9e0977dc739b15baf5f); /* line */ \n        c_0x0511755d(0x5abcdd5ac92018b4a48c105ea9e1fcec6f7f011aadcc3e5ca1b8127fb53de489); /* requirePre */ \nc_0x0511755d(0x113a318088b8785cd552abf761a38ead601b923aea0ed06a46f3d084b467bd4f); /* statement */ \nrequire(_newAdmin != address(0), \"LBPManager: new admin is zero\");c_0x0511755d(0x3ba4e05d5c8ead39b02b705895d0a8ac22a9518a8c269e834808f4305380b5e4); /* requirePost */ \n\n\nc_0x0511755d(0xcbfeb4c004051321bf0aa1f0e56c7af33c7b6924808a4dfbbb43c2390cd516dd); /* line */ \n        c_0x0511755d(0x5506685574cc608dc63761f072bfe29d759e24e960ea83d1ae77591ccba6a0d6); /* statement */ \nemit LBPManagerAdminChanged(admin, _newAdmin);\nc_0x0511755d(0x074328520e8f4ee801775ef310ac760b86bad579f59d13ca3e35d03f92dd1f2b); /* line */ \n        c_0x0511755d(0x5d8a32eb011161b60a7230f0c6b86953b33ac8f8ef4ed4cb0b4ff8aff91dab70); /* statement */ \nadmin = _newAdmin;\n    }\n\n    /**\n     * @dev                             Initialize LBPManager.\n     * @param _LBPFactory               LBP factory address.\n     * @param _beneficiary              The address that receives the feePercentage.\n     * @param _name                     Name of the LBP.\n     * @param _symbol                   Symbol of the LBP.\n     * @param _tokenList                Array containing two addresses in order of:\n                                            1. The address of the project token being distributed.\n                                            2. The address of the funding token being exchanged for the project token.\n     * @param _amounts                  Array containing two parameters in order of:\n                                            1. The amounts of project token to be added as liquidity to the LBP.\n                                            2. The amounts of funding token to be added as liquidity to the LBP.\n     * @param _startWeights             Array containing two parametes in order of:\n                                            1. The start weight for the project token in the LBP.\n                                            2. The start weight for the funding token in the LBP.\n     * @param _startTimeEndTime         Array containing two parameters in order of:\n                                            1. Start time for the LBP.\n                                            2. End time for the LBP.\n     * @param _endWeights               Array containing two parametes in order of:\n                                            1. The end weight for the project token in the LBP.\n                                            2. The end weight for the funding token in the LBP.\n    * @param _fees                      Array containing two parameters in order of:\n                                            1. Percentage of fee paid for every swap in the LBP.\n                                            2. Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\n     */\n    function initializeLBPManager(\n        address _LBPFactory,\n        address _beneficiary,\n        string memory _name,\n        string memory _symbol,\n        IERC20[] memory _tokenList,\n        uint256[] memory _amounts,\n        uint256[] memory _startWeights,\n        uint256[] memory _startTimeEndTime,\n        uint256[] memory _endWeights,\n        uint256[] memory _fees,\n        bytes memory _metadata\n    ) external {c_0x0511755d(0xf08c3d90b8856000e38528730106bf95848c94c1845eb747cc6411e08dec2065); /* function */ \n\nc_0x0511755d(0x7e45d817f216d49ce193773c4670bccd1cc6a7eb5d3b6b7a184d8f39726c2aac); /* line */ \n        c_0x0511755d(0xfdc4262a39e95a6036eb2b094cdb9eed33cd48da2462c7f9cb30de32f5d8ddcb); /* requirePre */ \nc_0x0511755d(0x00e02a80b026bf050d94428f11b8ea3fd13145f8e586ebddb1ba2b488b9e6115); /* statement */ \nrequire(!initialized, \"LBPManager: already initialized\");c_0x0511755d(0xece33c413ed3e57f61af27205cb4e821042c42e386bc73b39a9c69062134c7d3); /* requirePost */ \n\nc_0x0511755d(0x9832964d72663f30da082abcf21cecfd0844c2e35784da4c1852c9203380cb9c); /* line */ \n        c_0x0511755d(0x60a448b960d4862ddbf29350ab7a03ab44cb95347d81e19fcf76c5be79764358); /* requirePre */ \nc_0x0511755d(0x9e8a392f4deb357e70165948cfe522a52154ade0dd24f0a433390c33b86bd22f); /* statement */ \nrequire(_beneficiary != address(0), \"LBPManager: _beneficiary is zero\");c_0x0511755d(0x5d0840f8007c9305f4d829ee1c2c78c95246b71fb1dee0c74549b682e4158c96); /* requirePost */ \n\nc_0x0511755d(0xa3699d1d2e1c254402ba626f58f1a6a68ebeef430e99d51198cd41ce340edfcf); /* line */ \n        c_0x0511755d(0xfb969159db1932373dedcde6c771b3be1022112f30cfb184a28af047fdff679f); /* requirePre */ \nc_0x0511755d(0xc5665738678a4714390af93bce85f1689a1aef0842c1d87a072e4c1cc6fea1c0); /* statement */ \nrequire(_fees[0] >= 1e12, \"LBPManager: swapFeePercentage to low\");c_0x0511755d(0x78b96aaab3a75a4a7b565d475c1cdd1e5818a4af8e38ba435f4775c477af034d); /* requirePost */ \n // 0.0001%\nc_0x0511755d(0x474501316897b271193505925d1d195190e05363ece72bde746e1804b23a18de); /* line */ \n        c_0x0511755d(0xd98bb332eac6cde4f51e06980c705443eb89794d8999bd49ba1bd25fb0bbf537); /* requirePre */ \nc_0x0511755d(0xd6ca83a9d4575b10be9c3a9a4d7c28ff36a2cd687a16de13701e013ba3f2da68); /* statement */ \nrequire(_fees[0] <= 1e17, \"LBPManager: swapFeePercentage to high\");c_0x0511755d(0xb5509cc514b31c2cb0d89ec833dd106f4eb548cd8a07376cf2437110432df354); /* requirePost */ \n // 10%\nc_0x0511755d(0xd7059d2d8f1cc96a50ae0af1aa5439b30921a3e732f104c839143111dd8b1502); /* line */ \n        c_0x0511755d(0x9fe441a206b93f64a12eff35a107a111b83c3e039c85c7b634291f26d10d03e8); /* requirePre */ \nc_0x0511755d(0xa57edf46217390256657fedfe6d260650dcd287f4562cc9d41c9170766421a05); /* statement */ \nrequire(_tokenList.length == 2, \"LBPManager: tokenList wrong size\");c_0x0511755d(0xf3cea05c766029d8385e2d807cf730ca4ae148ba9cd08d74de299c64da0b23df); /* requirePost */ \n\n\nc_0x0511755d(0xeedad3c410c90bf2b24b6ef9ddbededa36ff1b9a8654add4086fd34211c73c12); /* line */ \n        c_0x0511755d(0x29b1d986d090fd308a58f64258f140b97f71f663524bcbd50190f94c974a18dd); /* statement */ \ninitialized = true;\nc_0x0511755d(0x3a88b87c4c93e5a5ba8ea68a4eebb3f5f0ef051650ddfe2a4f4d855639aef298); /* line */ \n        c_0x0511755d(0x29ff1d07def85268ef2af841295ccea032f3ad3d9aa36fc498d095c7720d29c5); /* statement */ \nadmin = msg.sender;\nc_0x0511755d(0x7789d2ca9bf694586ea32b98d410d53d51e28c00eb3a09d0f6afdb3bb91e8e11); /* line */ \n        c_0x0511755d(0x1bb80c9387f2ea6481d3a21dc495dd6138b9e16dab030221d169965d2a3a2bc7); /* statement */ \nswapFeePercentage = _fees[0];\nc_0x0511755d(0xd6ecb282cf8c4bdc584156ed65fc3f3ff23dc1c5fd12e4018bd6770aed0858a6); /* line */ \n        c_0x0511755d(0x7ea39fa712095a37de68ad850e7688e0e7f406bdcf7e1b013b047ef4eda2a9e3); /* statement */ \nfeePercentage = _fees[1];\nc_0x0511755d(0xb5d4c7d2a5017b2c0c4b2288bc37e21e97b60df235b71622c5974af6eeb5eebe); /* line */ \n        c_0x0511755d(0x1dfccc67176cf4b4cd19450efd949c7095b5a99fac2a61234a1837247c0072ab); /* statement */ \nbeneficiary = _beneficiary;\nc_0x0511755d(0x63554f645fe0c602f31f91913e52fba6fb0915387dcbd216d3d348667fa29119); /* line */ \n        c_0x0511755d(0x60cdcee125d7a77071ef18dc317e319932d997cbdf6dbb437fb0711e9c6698d7); /* statement */ \nmetadata = _metadata;\nc_0x0511755d(0xc79f1c170ef9c771a93fbbce29f89889a634b74b0ab636aad9439d14cef7b0c3); /* line */ \n        c_0x0511755d(0x9ef4378c686e70250531511b42a6fadd81b372323f96b9ee8a2ebf804df3ae98); /* statement */ \nstartTimeEndTime = _startTimeEndTime;\nc_0x0511755d(0xf70ec82d524dafcfe156e936b30c358b1d083fdd27e2855a2bffd866751b8954); /* line */ \n        c_0x0511755d(0xb207a9c185fdc46500f229a020f7a6d5c630763949a46172f7e433ecdce1d2a2); /* statement */ \nname = _name;\nc_0x0511755d(0x85c6a3a876bb32c1c2646a36cc83e4b99fa5fb0668f7ff6de514e73d76356822); /* line */ \n        c_0x0511755d(0x6629c95fefd4e34e27d9dba7f5328ba47468132c71e0679d0497b07e342e58f0); /* statement */ \nsymbol = _symbol;\nc_0x0511755d(0xf59a288fe6d767a9b2b46eee17377ed3259ff4adb6f0ebd42b91dbceb5810830); /* line */ \n        c_0x0511755d(0x2de13c453fa09a75ed1666777f77f01136eb6781e89387d7ef0dc1faa1baa368); /* statement */ \nLBPFactory = _LBPFactory;\n\n        // Token addresses are sorted in numerical order (ascending) as specified by Balancer\nc_0x0511755d(0x789d0929f1d6c0b00ca2ea9b7eb4695288a3e4e394c2402c593b3bf0c3dd0723); /* line */ \n        c_0x0511755d(0xf0165014909445c46c03a689ab8e10a393e4a2276cca4345584138dcc3a02cf5); /* statement */ \nif (address(_tokenList[0]) > address(_tokenList[1])) {c_0x0511755d(0x77de4b8c9a08fe35a336f424c88b0e431edaff2b799e790a21481ad5fdd930e0); /* branch */ \n\nc_0x0511755d(0x8c63dee3bbd0e69ee56e0e7e19598e6fcb520e6a3fbf784b9f808bd417794b82); /* line */ \n            c_0x0511755d(0x181a392cc6795bbf2124313317ea26b318dbf0454ea0df2431f962dcfa84b669); /* statement */ \nprojectTokenIndex = 1;\nc_0x0511755d(0xcde805bf299b77626c5b1a7c1358dcabca508c2b1101c566eccb1a3361c948c9); /* line */ \n            c_0x0511755d(0x55ef34d54437bbf59d29c05bae149492aec2fe7ca107815f5a7845194d5020e7); /* statement */ \ntokenList.push(_tokenList[1]);\nc_0x0511755d(0x229d61a3e02a3ecf129c4dd94397a28a4f820d4c3b942995406025affe399ff8); /* line */ \n            c_0x0511755d(0xd1f9a4e52608706b4f0aa91bab5d5a2f8317addae34fb4faa589212771c1d4ab); /* statement */ \ntokenList.push(_tokenList[0]);\n\nc_0x0511755d(0xc15b2f0b6836ef911e65bbebfa4937fb5f3676b3b8cd4d3a2e600b6e46798704); /* line */ \n            c_0x0511755d(0xe8212788021e612ce73b6e2167cec96553de448bbe90b103c81215e8690a9832); /* statement */ \namounts.push(_amounts[1]);\nc_0x0511755d(0x78491309c0b1ef8fe7d82312f94453a4faf3b350d8097fabbf6b501cc9aaecfa); /* line */ \n            c_0x0511755d(0x208d6bea17a903604cba56fe2ad9558ab54d68e87716fc9ea44461e9a84367d3); /* statement */ \namounts.push(_amounts[0]);\n\nc_0x0511755d(0x465832a6e1c132d8f2934b98178372a09f4c509455ad01cc09be200b83002b16); /* line */ \n            c_0x0511755d(0xdf9e6661a30d7f527b1a47ef728295c5e0f725fe8c6e74ab862752b3ab9ab46b); /* statement */ \nstartWeights.push(_startWeights[1]);\nc_0x0511755d(0x1118f4f171184f4b11ffa8305afff1b0502d0441c5729929ca418331da04e652); /* line */ \n            c_0x0511755d(0xca5221c5bcc672a592a066acd9fa7737de0308155c4b9359457c0ceec4cdec49); /* statement */ \nstartWeights.push(_startWeights[0]);\n\nc_0x0511755d(0x7a9bbc0016052d83302bbb8e349363aea6df57f8d0faa18b8a924e80f936ced5); /* line */ \n            c_0x0511755d(0x44f602df8a16848dde5d10767279f29a601e148193bc59340eebb3f9787e3987); /* statement */ \nendWeights.push(_endWeights[1]);\nc_0x0511755d(0x109102c208db1ac362b8ff24b0861de6fa9a3ac1694678c14844f750dc004cdd); /* line */ \n            c_0x0511755d(0xb0d7b179c88a064d768b8f23e7b0629a73e68c82f47510744fb17ab240992838); /* statement */ \nendWeights.push(_endWeights[0]);\n        } else {c_0x0511755d(0xb723da46abbe26f8d04eda8964378a324a809ca05f10f4ae697bdb6d333a1556); /* branch */ \n\nc_0x0511755d(0x928e5fbcace51c56e8a2fd4c724ba4fcae6bbc30193031bfa5f8e2715185484c); /* line */ \n            c_0x0511755d(0x0222d627c1d1328ede307364b4af06a53244589439004949adcace2277ca6380); /* statement */ \nprojectTokenIndex = 0;\nc_0x0511755d(0x1157f4fe0e313374846f1837f1506401f44962fef96eaa6015af11a5d3451e7d); /* line */ \n            c_0x0511755d(0x10983047756554de5a9559f4e31e68d58da543991bc64eeae85d89793ec393c4); /* statement */ \ntokenList = _tokenList;\nc_0x0511755d(0x3997a8e0458e0910b153e8eb15fc2ab9329aee2cd58d85ac49dcc8022ef5f38c); /* line */ \n            c_0x0511755d(0x9933c487a9903891141d739a623cd3ac124d12e5b1f0a7eb13465347dbeb7a22); /* statement */ \namounts = _amounts;\nc_0x0511755d(0xfcd0636f1c09d3d968cd387f6af390f74026b4d72bd4a35652561c84c03fdcb7); /* line */ \n            c_0x0511755d(0xc74aaa70ef5f5737d9de9f5012277c3cfe022047c452f031b2fac4350992e8f3); /* statement */ \nstartWeights = _startWeights;\nc_0x0511755d(0x1c893e1a6bbea627f2cf662964904d98dbfc89f86ca60457171ecff7e6d0b75f); /* line */ \n            c_0x0511755d(0xd78a88e4364fbf7c9f78f8fd9baf5084178802bf475aa88c0954a7fe74e342f1); /* statement */ \nendWeights = _endWeights;\n        }\n    }\n\n    /**\n     * @dev                             Subtracts the fee, deploys the LBP and adds liquidity to it.\n     * @param _sender                   Address of the liquidity provider.\n     */\n    function initializeLBP(address _sender) external onlyAdmin {c_0x0511755d(0x67e7266b21f7dad00dd91a3e0f2da77fdc73eb0377c671947bb9b1ff86884912); /* function */ \n\nc_0x0511755d(0xfe1da4eea08f2e177653c0f11fe0957ee00f3adbde1fcce0404d0802457ba5a2); /* line */ \n        c_0x0511755d(0xc71597ef35c10488036e182a9ba29991634accccd8a88d03fc608822a1418836); /* requirePre */ \nc_0x0511755d(0x7085d79abb0b9c573bfce86eee93e0627108d293fc01979aba8deea3cb0ac8f2); /* statement */ \nrequire(\n            initialized == true,\n            \"LBPManager: LBPManager in not initialized\"\n        );c_0x0511755d(0x91d75d8593e636ed06b16e03293479a80cdefd6dfde9ab00e9dcd1f46f26785b); /* requirePost */ \n\nc_0x0511755d(0x8ceca5b318eaafea62475fbe25d1ce05f18f84ba8a17ac6ff1328766c6cef63f); /* line */ \n        c_0x0511755d(0xb78216e22fa2b1066e37b62668f688d278393f5f32326fd931effecb2cb5c48b); /* requirePre */ \nc_0x0511755d(0xbf3c812423787735f2642b2ab19d6a2c06cf426a0e59a277fb32d993d7211f7a); /* statement */ \nrequire(!poolFunded, \"LBPManager: pool already funded\");c_0x0511755d(0x898946ab514cb48bdf9abf9070787b5a9c5114164d7764512838841ee08ba812); /* requirePost */ \n\nc_0x0511755d(0xc16eb21508b24a1c6844ccda24ffb0d403be08facde44dd8a2327bacd610c7de); /* line */ \n        c_0x0511755d(0xa1c1f7103743c3901a6d84b5c3e7e4724cb1f6e8ec1e9c707417627d3c45e813); /* statement */ \npoolFunded = true;\n\nc_0x0511755d(0x5904462c95cabd5f6c8c1dcddc683ca46872e2f8455dcaa575f822f640bda62d); /* line */ \n        c_0x0511755d(0x9c0f6ecd8c6535403f8066a9c001b1ad7c9848a40cb13ac4b11b9826ce516e2b); /* statement */ \nlbp = ILBP(\n            ILBPFactory(LBPFactory).create(\n                name,\n                symbol,\n                tokenList,\n                startWeights,\n                swapFeePercentage,\n                address(this),\n                true // SwapEnabled is set to true at pool creation.\n            )\n        );\n\nc_0x0511755d(0xb1f2f595cf355778af949292a75dcb362e4bee68efaab90279a587a37ae0ed34); /* line */ \n        c_0x0511755d(0x0aa141a4b1e6d98fa72d68deb2629f5f9be2ddd9da8376f7d389df8e6dc4da50); /* statement */ \nlbp.updateWeightsGradually(\n            startTimeEndTime[0],\n            startTimeEndTime[1],\n            endWeights\n        );\n\nc_0x0511755d(0x4cdc4cf958e2e4ad830318bdc04868ceb7d4889b94f6e18a50e0fcb37769e2b2); /* line */ \n        c_0x0511755d(0xbb2bd0d724500507c56535488c8654b1880b4360d2e2b7afed5dc7335c1911d1); /* statement */ \nIVault vault = lbp.getVault();\n\nc_0x0511755d(0x307013614f826f6fd641b79952f314209e4c510362b67e7fc7726913d6058132); /* line */ \n        c_0x0511755d(0x25adb3218e24559e60a25d01e6681bf7eb801df4bef54fdba2e5ed231603b9af); /* statement */ \nif (feePercentage != 0) {c_0x0511755d(0xd9641580621d742e860ba3b9f8e4e596473c38b88a2a88d87c476ba728c1b1eb); /* branch */ \n\n            // Transfer fee to beneficiary.\nc_0x0511755d(0x92857b7592b88ef7f776b118df08ea93ce66ad94ffebeb4d3899635cc346204a); /* line */ \n            c_0x0511755d(0xfda8d008e6d2daccb0108d1bb50d54bf2020edc654532a93b0bd5c4091043d7d); /* statement */ \ntokenList[projectTokenIndex].transferFrom(\n                _sender,\n                beneficiary,\n                _feeAmountRequired()\n            );\nc_0x0511755d(0xdbe05ce6c2aa0839c2eec9e681f150d6c2daad8a2a608aae9a7f2b26786a60d8); /* line */ \n            c_0x0511755d(0xec6b824eb41b75381bce0a8472beafdfca941ff0bf542962f275433b54d84a17); /* statement */ \nemit FeeTransferred(\n                beneficiary,\n                address(tokenList[projectTokenIndex]),\n                _feeAmountRequired()\n            );\n        }else { c_0x0511755d(0x98c8684594d83f3c1a396be0f09835447204c8014997cffe3550b230f14ba9e0); /* branch */ \n}\n\nc_0x0511755d(0xc5c2e21312431aa178c0463563f7868feeb713d8fb862ea8bfb0dbd62681462b); /* line */ \n        c_0x0511755d(0xdb8ace21b9f2272860caed3a36763af133471bb19e80552f16a798d19ae5fd66); /* statement */ \nfor (uint8 i; i < tokenList.length; i++) {\nc_0x0511755d(0xa4202d0a6b25333b2b2247b70669af401a0da5c21e228e430fa20a91068112ce); /* line */ \n            c_0x0511755d(0x2ddcdfa4786f8e459a1ee32ec35846d558817c57dc9bb4f15b571edd05b2cf83); /* statement */ \ntokenList[i].transferFrom(_sender, address(this), amounts[i]);\nc_0x0511755d(0xd51c697052d0fbc46ea464c875cdfc17c4eb91420034618997d122777bb6cc56); /* line */ \n            c_0x0511755d(0x17f6236435ffececf56103cb119992c4548198cb7b9e8332907a6f1e5ec4cdc5); /* statement */ \ntokenList[i].approve(address(vault), amounts[i]);\n        }\n\nc_0x0511755d(0xacbfded05c4c836299435b4e99f5190f697b14754901c677d1be686cd3945441); /* line */ \n        c_0x0511755d(0x7f2607d1690712b3d9b0764596f72a036ab897fe4e8b504327a2c590ac84f0b5); /* statement */ \nIVault.JoinPoolRequest memory request = IVault.JoinPoolRequest({\n            maxAmountsIn: amounts,\n            userData: abi.encode(0, amounts), // JOIN_KIND_INIT = 0, used when adding liquidity for the first time.\n            fromInternalBalance: false, // It is not possible to add liquidity through the internal Vault balance.\n            assets: tokenList\n        });\n\nc_0x0511755d(0x6d5e9c20973a08c7e4dd9e30cbf8a457241bc2116db242a1388967995dfcdb81); /* line */ \n        c_0x0511755d(0x07f02883be5f13f7c2adfa61a553abe110db2200873c42b30913482d5943944f); /* statement */ \nvault.joinPool(lbp.getPoolId(), address(this), address(this), request);\n    }\n\n    /**\n     * @dev                             Exit pool or remove liquidity from pool.\n     * @param _receiver                 Address of the liquidity receiver, after exiting the LBP.\n     */\n    function removeLiquidity(address payable _receiver) external onlyAdmin {c_0x0511755d(0x1e79a2ebbb22030258570f37f030c7b790dc85c538e5db8ad1daaa4dbb703a4e); /* function */ \n\nc_0x0511755d(0x2b197a20839a8bf17a7216a0e51038d3d4dab538c2fa71604fdc2f782b366a63); /* line */ \n        c_0x0511755d(0xd2865d41cc5d5cf520d2b0b5cbbf8953f12b9647d74c9e271eecaac84fe5db2a); /* requirePre */ \nc_0x0511755d(0xa54b5fc2f7bed3d9268c9d00bfb54371d958356c3d7ea91ffdcfb9f4530fba50); /* statement */ \nrequire(\n            _receiver != payable(address(0)),\n            \"LBPManager: receiver is zero\"\n        );c_0x0511755d(0x8ca0bf21d2505a26635041d5812e4e10409c7d84797b6d0140ae561fc9f202e7); /* requirePost */ \n\nc_0x0511755d(0x5a17f8a93b3ad71ed7c60370e26dc206f5e3e596266ad98a64be5b5262d710c8); /* line */ \n        c_0x0511755d(0x7f27723031262d89b6c5ae6ffac9d7ff112fd6238f6c903c3bec8379cd23a111); /* requirePre */ \nc_0x0511755d(0xaa01443c236279663330cc0ad723cb92be01d5cd107f81eaf914e5bd89ae7a59); /* statement */ \nrequire(\n            lbp.balanceOf(address(this)) > 0,\n            \"LBPManager: no BPT token balance\"\n        );c_0x0511755d(0x9660ccc86a7dca593f8a98a52d58eec3c9d472094bb090857a2bec301f9a61bd); /* requirePost */ \n\n\nc_0x0511755d(0xb65b23f8d32d2a8dde561bcba6e1324721af345574d9152887166de9cee830bd); /* line */ \n        c_0x0511755d(0x0bcb18dd3cdd7f04c41c25b6a45595c49fb4af96567f7bc9e8954585d5697818); /* statement */ \nuint256 endTime;\nc_0x0511755d(0x416eda298387f4a9ef97d79da62b92d4137fdc3b5b9469a651f55e70cce4dde8); /* line */ \n        c_0x0511755d(0x871ab7e87535a4ddd5fdd9c19b5d6cf8c1ae5670fb0b9a1dabcff133556820e2); /* statement */ \n(, endTime, ) = lbp.getGradualWeightUpdateParams();\n\nc_0x0511755d(0x5b66df424f929e0abe6a703703c1c3a7e3743b063fa8228f791a9c069260c467); /* line */ \n        c_0x0511755d(0x4eac9df437de2c8a046332ed1d0033df388a10bf3585ecd5f502e153b20fd155); /* requirePre */ \nc_0x0511755d(0x128e37834a572a32081a121427a89c74b72794f1716c4285dd1c0cd442d9d3e8); /* statement */ \nrequire(block.timestamp >= endTime, \"LBPManager: endtime not reached\");c_0x0511755d(0x82a992ad1aa33a6550dcc180220449065f1410220673d7ef6e6d24a393f26444); /* requirePost */ \n\n\nc_0x0511755d(0xf7e7b073524830810d28ff0219216191b6dadb9497c0caaffbe8e8ad18121b22); /* line */ \n        c_0x0511755d(0x6d970778c27f00fa8c61df98b54d389273ed640a6cf811438ec4864e92339596); /* statement */ \nIVault vault = lbp.getVault();\n\nc_0x0511755d(0x1a0093fa69c9c51ca1c4958328c84ac5b45989146ca2873613e8aa077e5fb30e); /* line */ \n        c_0x0511755d(0x4e529c00066239927e45d236841be2782b61426c9297c786f7a6d9beb3cd6df4); /* statement */ \nIVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({\n            minAmountsOut: new uint256[](tokenList.length), // To remove all funding from the pool. Initializes to [0, 0]\n            userData: abi.encode(1, lbp.balanceOf(address(this))),\n            toInternalBalance: false,\n            assets: tokenList\n        });\n\nc_0x0511755d(0x39481f5af9414f14a11ba86c1e6f48dbd99bd562322248e17bceecf080be65f7); /* line */ \n        c_0x0511755d(0x7cf545b99a79870a490cb2ba4cb3d5df629231bc4fc5b0b0a0443617a8b7068f); /* statement */ \nlbp.approve(address(vault), lbp.balanceOf(address(this)));\n\nc_0x0511755d(0x714ae00bbc11a5033dea8312a308263a48745f111b70e144f792fca8cf88d893); /* line */ \n        c_0x0511755d(0xd7d1512475e13e6fa461956398a4c51f141a4dd623805a97807703198e3ae4ca); /* statement */ \nvault.exitPool(lbp.getPoolId(), address(this), _receiver, request);\n    }\n\n    /*\n        DISCLAIMER:\n        The method below is an advanced functionality. By invoking this method, you are withdrawing\n        the BPT tokens, which are necessary to exit the pool. If you chose to remove the BPT tokens,\n        the LBPManager will no longer be able to remove liquidity. By withdrawing the BPT tokens\n        you agree on removing all the responsibility from the LBPManger for removing liquidity from\n        the pool and transferring this responsibility to the holder of the BPT tokens. Any possible\n        loss of funds by choosing to withdraw the BPT tokens is not the responsibility of\n        LBPManager or PrimeDao. After withdrawing the BPT tokens, liquidity has to be withdrawn\n        directly from Balancer's LBP. LBPManager or PrimeDAO will no longer provide support to do so.\n    */\n    /**\n     * @dev                             Withdraw pool tokens if available.\n     * @param _receiver                 Address of the BPT tokens receiver.\n     */\n    function withdrawPoolTokens(address _receiver) external onlyAdmin {c_0x0511755d(0x1f7661734640e8eb4dab63efca9bf8736a2607512caca0156d8c2e32cca42033); /* function */ \n\nc_0x0511755d(0x3ba3950081153237f74150d610612745531bb65e0ac97f9cabc8ef4fab0eb0ae); /* line */ \n        c_0x0511755d(0x02eda9b4c409ef95313f2ecf958e92158fc14cbfe2a749fbfb035ffd75978b00); /* requirePre */ \nc_0x0511755d(0x6c45c63be5ff359004e805db23b92cf4f1c62870ffedfad55e6ba33c6cdd82f1); /* statement */ \nrequire(_receiver != address(0), \"LBPManager: receiver is zero\");c_0x0511755d(0xda2e2974e0f27a1e5093d803498d9211176d693d5ac15f7c66eb7019ae8bd5ff); /* requirePost */ \n\n\nc_0x0511755d(0x9c9ca46ef7f9c0ae34639bbe66c27429b2b2c6f5d3eddc32dce4abf5341cd0ab); /* line */ \n        c_0x0511755d(0xeb63c8728642129f94458c362dd2b4bdc6d9d80d4383b499a2654ab657a68464); /* statement */ \nuint256 endTime;\nc_0x0511755d(0x198cbd648cd8410f4870c7d1e058a887d31c012cd3bd09c9f2dcc1113cf61cb3); /* line */ \n        c_0x0511755d(0x6db843e5d148c72b8c33f68db9de839b2349193506584c2afcb34d628f3450c4); /* statement */ \n(, endTime, ) = lbp.getGradualWeightUpdateParams();\nc_0x0511755d(0x36a39780d6a529397619170d6e9122a82301632323a1507d2088a16d7938d7ec); /* line */ \n        c_0x0511755d(0x8fcd839a0edb8d51499ebfe2ffbe3dd72e5daca894ba0058bfd9c00e340172e5); /* requirePre */ \nc_0x0511755d(0x665c9a9e5f6ba425612651b70f6147bc80a4c1812e374773a7f92804bf8b6049); /* statement */ \nrequire(block.timestamp >= endTime, \"LBPManager: endtime not reached\");c_0x0511755d(0x8a89749c8ca5baacabdc57a9696c17afa0d2aa1751a67a942e095ba1b4ab6bd8); /* requirePost */ \n\n\nc_0x0511755d(0x255b7e920472ba06b529440e2a6ce4bdaf9b5b1a0c6a23ad11ae11509d6ec0d8); /* line */ \n        c_0x0511755d(0x3e9781f710bef6eb1e258902d2321e306231bed9e9510d775fd4bfe5085beb6e); /* requirePre */ \nc_0x0511755d(0x79254d5f99ffdbe28d57ec154d916bd82475a14a2defc1e219a7b6f88fcb472f); /* statement */ \nrequire(\n            lbp.balanceOf(address(this)) > 0,\n            \"LBPManager: no BPT token balance\"\n        );c_0x0511755d(0xe459cb2907db726bd1c9c8dd077378a6efd51761fb063e1528407291e3925156); /* requirePost */ \n\n\nc_0x0511755d(0x9c2a6066533c4f42f0cc71bd079511334bb0f9d346067a2785d4867b8105bfaf); /* line */ \n        c_0x0511755d(0xec20c9588981aa540821c7e33c55c0af416c05092f59d7b8f8e6f467ff15754f); /* statement */ \nemit PoolTokensWithdrawn(address(lbp), lbp.balanceOf(address(this)));\nc_0x0511755d(0xfe920fd05d5dc5e94022ac628b6af616eb1b164ebf09ce70e252db823fd1feb6); /* line */ \n        c_0x0511755d(0xde7b71c2bdf34fe3639e970c15d1c0ab93b70ee71ded95f86e6ca6debd5824db); /* statement */ \nlbp.transfer(_receiver, lbp.balanceOf(address(this)));\n    }\n\n    /**\n     * @dev                             Can pause/unpause trading.\n     * @param _swapEnabled              Enables/disables swapping.\n     */\n    function setSwapEnabled(bool _swapEnabled) external onlyAdmin {c_0x0511755d(0x558ab3a0f2068f134e53c8f5dfcd5f99921b311e98293c7a88fd51d5a762ac83); /* function */ \n\nc_0x0511755d(0x02210aafcb4270a3cb6aba4878e1e76849b1029408a39206082ffedaf0f7f54e); /* line */ \n        c_0x0511755d(0x61a60222700dc70ecc4f3a37d5dcd47b69bdf82c19774841eea2d18b71ae0ee5); /* statement */ \nlbp.setSwapEnabled(_swapEnabled);\n    }\n\n    /**\n     * @dev             Get required amount of project tokens to cover for fees and the actual LBP.\n     */\n    function projectTokensRequired()\n        external\n        view\n        returns (uint256 projectTokenAmounts)\n    {c_0x0511755d(0x93af70374d1d67efdc467881d9aca434e6f5aa92f96c2753e8c759b968e1101c); /* function */ \n\nc_0x0511755d(0xd4d641d569427e89720157f96bf117ea7cf466ddb6611795eaa6c2540358ed2c); /* line */ \n        c_0x0511755d(0x9042ac201d06683f806229fabf7aff50e51948c5d0b560f9824538a87c4299d9); /* statement */ \nprojectTokenAmounts = amounts[projectTokenIndex] + _feeAmountRequired();\n    }\n\n    /**\n     * @dev                             Updates metadata.\n     * @param _metadata                 LBP wizard contract metadata, that is an IPFS Hash.\n     */\n    function updateMetadata(bytes memory _metadata) external onlyAdmin {c_0x0511755d(0xaba74b78299e29d4965090f586bd5688828f7afb5822544340bd96872b4653de); /* function */ \n\nc_0x0511755d(0xe825dc985e2257e45d1cb25e0f2befd60ec3e57d31c56eeb9a267fba41767866); /* line */ \n        c_0x0511755d(0xa5ba57988a13b5cbd0a91a1bcfc0bae363bac53c843f1bfe2cd13b816c5d17a0); /* statement */ \nmetadata = _metadata;\nc_0x0511755d(0xe4ac3e2888e1d70e74eabc312dd5af5bfd07ffc214067d27ec25ad28c94d4153); /* line */ \n        c_0x0511755d(0xbefe42b6898a1809c68646d695521f5e8600cde9b9b312ce78f4b79fe208321b); /* statement */ \nemit MetadataUpdated(_metadata);\n    }\n\n    /**\n     * @dev             Get required amount of project tokens to cover for fees.\n     */\n    function _feeAmountRequired() internal view returns (uint256 feeAmount) {c_0x0511755d(0x2a615048531acdfc8a0ae28f7bac6d457483cdf6c67ac89bf9335edf45264fc8); /* function */ \n\nc_0x0511755d(0xfe669d6cdd13486a31cfc660054399571842c37d023ffbe0d380b2ffaaf6c7d0); /* line */ \n        c_0x0511755d(0xa3bf8edebe832fdbe12b026f5adeecc3f9ba3c9d0f51303a9f4c050da558d6d6); /* statement */ \nfeeAmount =\n            (amounts[projectTokenIndex] * feePercentage) /\n            HUNDRED_PERCENT;\n    }\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/utils/interface/ILBPFactory.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n/* solium-disable */\npragma solidity ^0.8.6;\nfunction c_0x8788bdc1(bytes32 c__0x8788bdc1) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\n\ninterface ILBPFactory {\n    function create(\n        string memory name,\n        string memory symbol,\n        IERC20[] memory tokens,\n        uint256[] memory weights,\n        uint256 swapFeePercentage,\n        address owner,\n        bool swapEnabledOnStart\n    ) external returns (address);\n}\n"
    },
    "contracts/utils/interface/IVault.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n/* solium-disable */\npragma solidity ^0.8.6;\nfunction c_0xcb83e517(bytes32 c__0xcb83e517) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\n\ninterface IVault {\n    struct JoinPoolRequest {\n        IERC20[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    struct ExitPoolRequest {\n        IERC20[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n}\n"
    },
    "contracts/utils/interface/ILBP.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n/* solium-disable */\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\nimport \"./IVault.sol\";\n\npragma solidity ^0.8.6;\nfunction c_0x769ee75f(bytes32 c__0x769ee75f) pure {}\n\n\ninterface ILBP is IERC20 {\n    function updateWeightsGradually(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] memory endWeights\n    ) external;\n\n    function getGradualWeightUpdateParams()\n        external\n        view\n        returns (\n            uint256 startTime,\n            uint256 endTime,\n            uint256[] memory endWeights\n        );\n\n    function getPoolId() external view returns (bytes32);\n\n    function getVault() external view returns (IVault);\n\n    function setSwapEnabled(bool swapEnabled) external;\n\n    function getSwapEnabled() external view returns (bool);\n\n    function getSwapFeePercentage() external view returns (uint256);\n}\n"
    },
    "contracts/lbp/LBPManagerFactory.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n// solium-disable linebreak-style\npragma solidity ^0.8.6;\nfunction c_0xea48cd94(bytes32 c__0xea48cd94) pure {}\n\n\nimport \"../utils/CloneFactory.sol\";\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\nimport \"./LBPManager.sol\";\n\n/**\n * @title LBPManager Factory\n * @dev   Governance to create new LBPManager contracts.\n */\ncontract LBPManagerFactory is CloneFactory, Ownable {\nfunction c_0x580d9a73(bytes32 c__0x580d9a73) public pure {}\n\n    address public masterCopy;\n    address public LBPFactory;\n\n    event LBPManagerDeployed(\n        address indexed lbpManager,\n        address indexed admin,\n        bytes metadata\n    );\n\n    event LBPFactoryChanged(\n        address indexed oldLBPFactory,\n        address indexed newLBPFactory\n    );\n\n    event MastercopyChanged(\n        address indexed oldMasterCopy,\n        address indexed newMasterCopy\n    );\n\n    /**\n     * @dev                             Constructor.\n     * @param _LBPFactory               The address of Balancers LBP factory.\n     */\n    constructor(address _LBPFactory) {c_0x580d9a73(0x2abd10ee99bce0de044e3885e602a4c141c022b7f14d0202cf1250d2afb1fbd7); /* function */ \n\nc_0x580d9a73(0xf30080e90bc5b219ef656502f5d7e3c880a4a6ac6b375b7f07a8b826b5903fed); /* line */ \n        c_0x580d9a73(0x2358dc0c02c55df603b75d58f3ad9cad477955842968b2a136255773e4000964); /* requirePre */ \nc_0x580d9a73(0xf0c71d9a19401d79902f8ae9e258af8576fcf3591212144fef5bf05f6f46f07c); /* statement */ \nrequire(_LBPFactory != address(0), \"LBPMFactory: LBPFactory is zero\");c_0x580d9a73(0xd517f1adc1075f60caf53fcf47bfc11884cbbbd3ffcb7b71f7af153f1eb71124); /* requirePost */ \n\nc_0x580d9a73(0x2748e93b0902f012a54ededa81890a4caadf84f8dd29d8556d5f48198bc45408); /* line */ \n        c_0x580d9a73(0x29fa12da3a1eb54c0ea451b326030019ccf67da02dd043a09ec6e70acd788a15); /* statement */ \nLBPFactory = _LBPFactory;\n    }\n\n    modifier validAddress(address addressToCheck) {c_0x580d9a73(0x2ab36f183873cce2662913a2a3901a5912a6e6c0052f43056aa350ed371a452a); /* function */ \n\nc_0x580d9a73(0x2eecfe61cd43dc1cf60e436091d5af8a57a868788062c4551812e65075cce125); /* line */ \n        c_0x580d9a73(0x255e2d8d4ba95985894d324b1a501630ecac20374bff074ee43934bd26363533); /* requirePre */ \nc_0x580d9a73(0xca7817e0ece73588027efee89a353d6c554a8dfc29242759bde19ab8c6af8691); /* statement */ \nrequire(addressToCheck != address(0), \"LBPMFactory: address is zero\");c_0x580d9a73(0xd5e0e626547d089421587834bb4a6aeda59c96e011f7dd5d60be2a139059f038); /* requirePost */ \n\nc_0x580d9a73(0x7677801492a23eba051f36626320e5b2626c37ff714b1e230c6cdfc0e917e79a); /* line */ \n        c_0x580d9a73(0x824bc3bf31bff9cd5a3e30bc1b87e08dbdf231859391cf6ece5ed1606962437b); /* requirePre */ \nc_0x580d9a73(0x1ecb8251791362c17d8508ae93b7023123cf70cc979810568292072eb7ecbf96); /* statement */ \nrequire(\n            addressToCheck != address(this),\n            \"LBPMFactory: address same as LBPManagerFactory\"\n        );c_0x580d9a73(0x9f3c88349eaf212372d3f048a362bdb087585c80243501e6aeecf6b861954a34); /* requirePost */ \n\nc_0x580d9a73(0x52e7859bf947f919a47468169fbb00d34e7d7e92f9097a9d85f732e718563f7f); /* line */ \n        _;\n    }\n\n    /**\n     * @dev                             Set LBPManager contract which works as a base for clones.\n     * @param _masterCopy               The address of the new LBPManager basis.\n     */\n    function setMasterCopy(address _masterCopy)\n        external\n        onlyOwner\n        validAddress(_masterCopy)\n    {c_0x580d9a73(0xda17d986670be8df9343b20e09deca5ac99953f012ce8a06c9d5f453385b83cc); /* function */ \n\nc_0x580d9a73(0xb653030e41800581a92dbadb22f1c049e2de6de6b7704c209b1a613243af7d5f); /* line */ \n        c_0x580d9a73(0xddb448787ba1f0fd583a0500e512a1011ba8fcefd7b07f050e4659aa062e143b); /* statement */ \nemit MastercopyChanged(masterCopy, _masterCopy);\nc_0x580d9a73(0x2e8fa50c7396b8c8734c0084d9f4a1b83bee41b80a198f7a6bd4fffdd24dc060); /* line */ \n        c_0x580d9a73(0xbab6ffca1268acbea9bee54f070e7a8fcb496add21405fd18b41aae737b6bae6); /* statement */ \nmasterCopy = _masterCopy;\n    }\n\n    /**\n     * @dev                             Set Balancers LBP Factory contract as basis for deploying LBPs.\n     * @param _LBPFactory               The address of Balancers LBP factory.\n     */\n    function setLBPFactory(address _LBPFactory)\n        external\n        onlyOwner\n        validAddress(_LBPFactory)\n    {c_0x580d9a73(0x7d406ed2607e16bcae7e4e83b36769e5d1bbc8a46ddc36c45ce662e17b6af3e1); /* function */ \n\nc_0x580d9a73(0x9699f3ebcd75ca5ad4733c23a7e639848965132b8c9a1c0a8cd8f2b74b746318); /* line */ \n        c_0x580d9a73(0x852601587d1ebe1a88765bd222c861343b7efe2f4efa5a4463139f45e713e65f); /* statement */ \nemit LBPFactoryChanged(LBPFactory, _LBPFactory);\nc_0x580d9a73(0xc1d6cc1c631cabfa1fc8dabb83439bfc19789ae89c99004d7c8c5d972a3c747e); /* line */ \n        c_0x580d9a73(0x7b1879cb4d159bf73b5278117bfa82db46987aaf59ff47857ae8b7de6a238825); /* statement */ \nLBPFactory = _LBPFactory;\n    }\n\n    /**\n     * @dev                             Deploy and initialize LBPManager.\n     * @param _admin                    The address of the admin of the LBPManager.\n     * @param _beneficiary              The address that receives the _fees.\n     * @param _name                     Name of the LBP.\n     * @param _symbol                   Symbol of the LBP.\n     * @param _tokenList                Numerically sorted array (ascending) containing two addresses:\n                                            - The address of the project token being distributed.\n                                            - The address of the funding token being exchanged for the project token.\n     * @param _amounts                  Sorted array to match the _tokenList, containing two parameters:\n                                            - The amounts of project token to be added as liquidity to the LBP.\n                                            - The amounts of funding token to be added as liquidity to the LBP.\n     * @param _startWeights                  Sorted array to match the _tokenList, containing two parametes:\n                                            - The start weight for the project token in the LBP.\n                                            - The start weight for the funding token in the LBP.\n     * @param _startTimeEndtime         Array containing two parameters:\n                                            - Start time for the LBP.\n                                            - End time for the LBP.\n     * @param _endWeights               Sorted array to match the _tokenList, containing two parametes:\n                                            - The end weight for the project token in the LBP.\n                                            - The end weight for the funding token in the LBP.\n     * @param _fees                     Array containing two parameters:\n                                            - Percentage of fee paid for every swap in the LBP.\n                                            - Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\n     */\n    function deployLBPManager(\n        address _admin,\n        address _beneficiary,\n        string memory _name,\n        string memory _symbol,\n        IERC20[] memory _tokenList,\n        uint256[] memory _amounts,\n        uint256[] memory _startWeights,\n        uint256[] memory _startTimeEndtime,\n        uint256[] memory _endWeights,\n        uint256[] memory _fees,\n        bytes memory _metadata\n    ) external onlyOwner {c_0x580d9a73(0x5d4f58481901a171f70f16c8277996965d0b1763bd5f9d1a1c09ecbd557a62ee); /* function */ \n\nc_0x580d9a73(0xe943eb0e7c5293dca8a833c7d2879b18abfb28b1897035ece1152ba278f0c98f); /* line */ \n        c_0x580d9a73(0xf9791973f5d6a3655a17f035846002fdeca0f745855ef382df9c41508f68e75e); /* requirePre */ \nc_0x580d9a73(0xcd9e8d448df82394e5559c1a5496357cfd76efc92222094c38d696078980be8a); /* statement */ \nrequire(\n            masterCopy != address(0),\n            \"LBPMFactory: LBPManager mastercopy not set\"\n        );c_0x580d9a73(0xb3c3990b23c947776686978409e13df711d4964a7df567d5c9aa27622618f3d9); /* requirePost */ \n\n\nc_0x580d9a73(0x6114a733baf22c4ade39c22fd20ada1bdb45ffde8293e6289e7bb3620b0885d4); /* line */ \n        c_0x580d9a73(0x40412e65ce00bebf0eca179126fb0a76861cd83059af700d8ec879918907ece8); /* statement */ \naddress lbpManager = createClone(masterCopy);\n\nc_0x580d9a73(0xc4a0f467a2a9ed24a001237b607c5bdc046535013733275892525f1ecfa343a9); /* line */ \n        c_0x580d9a73(0xad14afbcb4bf4c6cd3e66eb6e9517b2a15cc75b23922e4b95c093dfe7d58c2ef); /* statement */ \nLBPManager(lbpManager).initializeLBPManager(\n            LBPFactory,\n            _beneficiary,\n            _name,\n            _symbol,\n            _tokenList,\n            _amounts,\n            _startWeights,\n            _startTimeEndtime,\n            _endWeights,\n            _fees,\n            _metadata\n        );\n\nc_0x580d9a73(0x4b713c3ee57a6f6f764943ca8f6957bdfe3b0fc49878cfffffd2ca3a178ae0aa); /* line */ \n        c_0x580d9a73(0x9960367727cc27bd9e46084c7dcd2e182e1e761d0908eb603ab6e759a0caa2a0); /* statement */ \nLBPManager(lbpManager).transferAdminRights(_admin);\n\nc_0x580d9a73(0xf9cd332c1b485576594fb020908e5a243eb3f022af92011495641b98929553f7); /* line */ \n        c_0x580d9a73(0xed50e1d93a3baeece14fd7911f2103da3474d83ab02945468d547b461107b2a9); /* statement */ \nemit LBPManagerDeployed(lbpManager, _admin, _metadata);\n    }\n}\n"
    },
    "contracts/utils/CloneFactory.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n* ===========\n*\n* CloneFactory.sol was originally published under MIT license.\n* Republished by PrimeDAO under GNU General Public License v3.0.\n*\n*/\n\n/*\nThe MIT License (MIT)\nCopyright (c) 2018 Murray Software, LLC.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n// solium-disable linebreak-style\n// solhint-disable max-line-length\n// solhint-disable no-inline-assembly\n\npragma solidity 0.8.6;\nfunction c_0x41716dd8(bytes32 c__0x41716dd8) pure {}\n\n\ncontract CloneFactory {\nfunction c_0xc9f04f20(bytes32 c__0xc9f04f20) public pure {}\n\n    function createClone(address target) internal returns (address result) {c_0xc9f04f20(0x6c49435093f495431ec5b67566563fb323cb97833e1d4b6975038ffea22ab98c); /* function */ \n\nc_0xc9f04f20(0x723baa5d49dc2ff713ddf49d0a947158c173688950e2cdb5076c24155d526393); /* line */ \n        c_0xc9f04f20(0x91c78166cb5b0e641c6b4fad8cc0cceaf10a65a3faf0083ad4c6c1469e5bf3c5); /* statement */ \nbytes20 targetBytes = bytes20(target);\nc_0xc9f04f20(0xa01e2bb763b6961f36393184904fb95f33c27e68284b3c764a283222c963ca21); /* line */ \n        assembly {\n            let clone := mload(0x40)\n            mstore(\n                clone,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(\n                add(clone, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            result := create(0, clone, 0x37)\n        }\n    }\n\n    function isClone(address target, address query)\n        internal\n        view\n        returns (bool result)\n    {c_0xc9f04f20(0x6b845ab51ef403541363e4b020d3abb22c8845eba2d1cb49770d898ba3496c43); /* function */ \n\nc_0xc9f04f20(0x1a1c0439cd0037bc2e47384d1f252f076642501459bc67b60f21dac2036e4ad8); /* line */ \n        c_0xc9f04f20(0xfa5e5222d2354f3069f6ed36b1264b001965734f2a0c0c5142b94049b83cb953); /* statement */ \nbytes20 targetBytes = bytes20(target);\nc_0xc9f04f20(0x3332b545e842ab2783b0342acab007b49d703e371b6d4cc92aa254385609f3a0); /* line */ \n        assembly {\n            let clone := mload(0x40)\n            mstore(\n                clone,\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\n            )\n            mstore(add(clone, 0xa), targetBytes)\n            mstore(\n                add(clone, 0x1e),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n\n            let other := add(clone, 0x40)\n            extcodecopy(query, other, 0, 0x2d)\n            result := and(\n                eq(mload(clone), mload(other)),\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n            )\n        }\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/seed/SeedFactory.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable linebreak-style\r\n/* solhint-disable space-after-comma */\r\n\r\npragma solidity 0.8.6;\nfunction c_0xb7289165(bytes32 c__0xb7289165) pure {}\n\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\nimport \"openzeppelin-contracts-sol8/access/Ownable.sol\";\r\nimport \"./Seed.sol\";\r\nimport \"../utils/CloneFactory.sol\";\r\n\r\n/**\r\n * @title PrimeDAO Seed Factory\r\n * @dev   Enable PrimeDAO governance to create new Seed contracts.\r\n */\r\ncontract SeedFactory is CloneFactory, Ownable {\nfunction c_0xfa613eb8(bytes32 c__0xfa613eb8) public pure {}\n\r\n    Seed public masterCopy;\r\n\r\n    event SeedCreated(address indexed newSeed, address indexed admin);\r\n\r\n    /**\r\n     * @dev               Set Seed contract which works as a base for clones.\r\n     * @param _masterCopy The address of the new Seed basis.\r\n     */\r\n    function setMasterCopy(Seed _masterCopy) external onlyOwner {c_0xfa613eb8(0x7c085f369b3d100c8077463dfaa3cf50bd29b0cd194a5b1d1a52888a3d875b9f); /* function */ \n\r\nc_0xfa613eb8(0x4862fe7c3cd92d9666ec9aef4aa33cf023b53f81fdf7d9125a5fabbb2f09347d); /* line */ \n        c_0xfa613eb8(0xc401339974a52405080f323f2dabb811926f68d905306432e8c61f9506ad9ca8); /* requirePre */ \nc_0xfa613eb8(0x1702ebba1c417a1b688a0e17bc3dbab862721c02dbda5688f4c6cca2d336f361); /* statement */ \nrequire(\r\n            address(_masterCopy) != address(0),\r\n            \"SeedFactory: new mastercopy cannot be zero address\"\r\n        );c_0xfa613eb8(0xcfc60cdd1bee63ef9796b19b26cbee373279a0257fa6a92a66cfd743384f9e04); /* requirePost */ \n\r\nc_0xfa613eb8(0xa2aa31bfedfd215caebdc31c0f5c8bac0a17731eeb91e58db825bd89bdd96aab); /* line */ \n        c_0xfa613eb8(0x7c86e787f52ab42cc8629061ed0cdf84f4ecaa6e7d5c0ba6bd5d188c5173748d); /* statement */ \nmasterCopy = _masterCopy;\r\n    }\r\n\r\n    /**\r\n      * @dev                                Deploys Seed contract.\r\n      * @param _beneficiary                 The address that recieves fees.\r\n      * @param _admin                       The address of the admin of this contract. Funds contract\r\n                                            and has permissions to whitelist users, pause and close contract.\r\n      * @param _tokens                      Array containing two params:\r\n                                                - The address of the seed token being distributed.\r\n      *                                         - The address of the funding token being exchanged for seed token.\r\n      * @param _softHardThresholds          Array containing two params:\r\n                                                - the minimum funding token collection threshold in wei denomination.\r\n                                                - the highest possible funding token amount to be raised in wei denomination.\r\n      * @param _price                       price of a SeedToken, expressed in fundingTokens, with precision of 10**18\r\n      * @param _startTime                   Distribution start time in unix timecode.\r\n      * @param _endTime                     Distribution end time in unix timecode.\r\n      * @param _vestingDurationAndCliff       Array containing two params:\r\n                                                - Vesting period duration in days.\r\n                                                - Cliff duration in days.\r\n      * @param _permissionedSeed      Set to true if only whitelisted adresses are allowed to participate.\r\n      * @param _fee                   Success fee expressed as a % (e.g. 10**18 = 100% fee, 10**16 = 1%)\r\n      * @param _metadata              Seed contract metadata, that is IPFS URI\r\n    */\r\n    function deploySeed(\r\n        address _beneficiary,\r\n        address _admin,\r\n        address[] memory _tokens,\r\n        uint256[] memory _softHardThresholds,\r\n        uint256[] memory _price,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint32[] memory _vestingDurationAndCliff,\r\n        bool _permissionedSeed,\r\n        uint256 _fee,\r\n        bytes memory _metadata\r\n    ) external onlyOwner returns (address _newSeed) {c_0xfa613eb8(0xd7021a9d40b6b4794211b7e41171c84872562d2a5dceafa0bf447b7a9eb467a1); /* function */ \n\r\nc_0xfa613eb8(0xff4f4ede8f4670e80242833422248b3d3cf90128374d3ed7f159b9c71925b1a1); /* line */ \n        {\r\nc_0xfa613eb8(0x3a8d4a0b6a32480ebaf0517b9699d618f228161289cb457416c79ccdd43b5846); /* line */ \n            c_0xfa613eb8(0x3ac4e1005dc1b2744fc501b4898711747f0eb297e895f0fae3d1351c94aad7d6); /* requirePre */ \nc_0xfa613eb8(0xeb866d36a2e53da7c64adea39ea6b1a92d46beb1632c7fea1318cf296bbd752d); /* statement */ \nrequire(\r\n                address(masterCopy) != address(0),\r\n                \"SeedFactory: mastercopy cannot be zero address\"\r\n            );c_0xfa613eb8(0x5b3cfbec26798d2eac492690070a96889065412eeb3a1395cb920a7f6250988f); /* requirePost */ \n\r\nc_0xfa613eb8(0x9386edd410c014166d1b04608298520d2c093659b54aac0645e9cde5656be9e8); /* line */ \n            c_0xfa613eb8(0x8fb16066635f7f849684f633d701ecd1fdbc522f41040269d98b2c330dc00ab1); /* requirePre */ \nc_0xfa613eb8(0x45378bb000fd5d3e0058dd75d49b0c79188f9109d415addc0d7608560bc4a8a4); /* statement */ \nrequire(\r\n                _vestingDurationAndCliff.length == 2,\r\n                \"SeedFactory: Hasn't provided both vesting duration and cliff\"\r\n            );c_0xfa613eb8(0xcae145bccc280e7012c41c8217bda8c03f3a788b4a47b85725c2536f35f034b0); /* requirePost */ \n\r\n        }\r\n\r\n        // deploy clone\r\nc_0xfa613eb8(0xb36c70d4568891e1db7e51282559201c881e8a6ea76e1ab7526037693d1af275); /* line */ \n        c_0xfa613eb8(0x0316d75a5f002376923bea976d1771cf1454c4146ee1fae9863ab4f0f605ea5d); /* statement */ \n_newSeed = createClone(address(masterCopy));\r\n\r\nc_0xfa613eb8(0xd3fdcc3c891c2ed69f6eb4b513917a19e5a48a110dbd52b67e71c5d8e23467c1); /* line */ \n        c_0xfa613eb8(0xe5b54b545d9c173d56a2d95e8a84b7abbdebe90c58c6f71ebdd63d90c7fee603); /* statement */ \nSeed(_newSeed).updateMetadata(_metadata);\r\n\r\nc_0xfa613eb8(0x6b8423203c30c0a7d644d730e367c87f40b6d222fc4e83dd466efc38ba340f4b); /* line */ \n        {\r\n            // initialize\r\nc_0xfa613eb8(0x8ef6f544ed7470d3268fb014fd917ef28593989c7d126a396ea34f96cec67619); /* line */ \n            c_0xfa613eb8(0x71ae8ee14756ff9bd911001f285286364ae0c07db773fe186f7feb4271c3674c); /* statement */ \nSeed(_newSeed).initialize(\r\n                _beneficiary,\r\n                _admin,\r\n                _tokens,\r\n                _softHardThresholds,\r\n                _price,\r\n                _startTime,\r\n                _endTime,\r\n                _vestingDurationAndCliff[0],\r\n                _vestingDurationAndCliff[1],\r\n                _permissionedSeed,\r\n                _fee\r\n            );\r\n        }\r\n\r\nc_0xfa613eb8(0xc8567888df28bf9d6530113d7e4f00fc45fb410a2dd774d1d7b94b18f2f128e4); /* line */ \n        c_0xfa613eb8(0xb77d3346faa3275755b1446182a18e5c3560d7df3ee49300a47b1515f420e93d); /* statement */ \nemit SeedCreated(address(_newSeed), _admin);\r\n    }\r\n}\r\n"
    },
    "openzeppelin-contracts-sol8/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/seed/Seed.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n// solium-disable operator-whitespace\n/* solhint-disable space-after-comma */\n/* solhint-disable max-states-count */\n// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0x18a6b88a(bytes32 c__0x18a6b88a) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\n\n/**\n * @title PrimeDAO Seed contract\n * @dev   Smart contract for seed phases of liquid launch.\n */\ncontract Seed {\nfunction c_0xeb5bb505(bytes32 c__0xeb5bb505) public pure {}\n\n    // Locked parameters\n    address public beneficiary;\n    address public admin;\n    uint256 public softCap;\n    uint256 public hardCap;\n    uint256 public seedAmountRequired; // Amount of seed required for distribution\n    uint256 public feeAmountRequired; // Amount of seed required for fee\n    uint256 public price; // price of a SeedToken, expressed in fundingTokens, with precision of 10**18\n    uint256 public startTime;\n    uint256 public endTime; // set by project admin, this is the last resort endTime to be applied when\n    //     maximumReached has not been reached by then\n    bool public permissionedSeed;\n    uint32 public vestingDuration;\n    uint32 public vestingCliff;\n    IERC20 public seedToken;\n    IERC20 public fundingToken;\n    uint256 public fee; // Success fee expressed as a % (e.g. 10**18 = 100% fee, 10**16 = 1%)\n\n    bytes public metadata; // IPFS Hash\n\n    uint256 internal constant PRECISION = 10**18; // used for precision e.g. 1 ETH = 10**18 wei; toWei(\"1\") = 10**18\n    uint8 private _seedTokenDecimal;\n\n    // Contract logic\n    bool public closed; // is the distribution closed\n    bool public paused; // is the distribution paused\n    bool public isFunded; // distribution can only start when required seed tokens have been funded\n    bool public initialized; // is this contract initialized [not necessary that it is funded]\n    bool public minimumReached; // if the softCap[minimum limit of funding token] is reached\n    bool public maximumReached; // if the hardCap[maximum limit of funding token] is reached\n    uint256 public vestingStartTime; // timestamp for when vesting starts, by default == endTime,\n    //     otherwise when maximumReached is reached\n    uint256 public totalFunderCount; // Total funders that have contributed.\n    uint256 public seedRemainder; // Amount of seed tokens remaining to be distributed\n    uint256 public seedClaimed; // Amount of seed token claimed by the user.\n    uint256 public feeRemainder; // Amount of seed tokens remaining for the fee\n    uint256 public fundingCollected; // Amount of funding tokens collected by the seed contract.\n    uint256 public fundingWithdrawn; // Amount of funding token withdrawn from the seed contract.\n\n    mapping(address => bool) public whitelisted; // funders that are whitelisted and allowed to contribute\n    mapping(address => FunderPortfolio) public funders; // funder address to funder portfolio\n\n    event SeedsPurchased(address indexed recipient, uint256 amountPurchased);\n    event TokensClaimed(\n        address indexed recipient,\n        uint256 amount,\n        address indexed beneficiary,\n        uint256 feeAmount\n    );\n    event FundingReclaimed(address indexed recipient, uint256 amountReclaimed);\n    event MetadataUpdated(bytes indexed metadata);\n\n    struct FunderPortfolio {\n        uint256 totalClaimed; // Total amount of seed tokens claimed\n        uint256 fundingAmount; // Total amount of funding tokens contributed\n    }\n\n    modifier onlyAdmin() {c_0xeb5bb505(0xd0684c03993dbd14df55a9cff3db29cccb786ced33518117476360ea4dd60dcd); /* function */ \n\nc_0xeb5bb505(0x68152bded59161bd606b1d5f01439116d47a78ecaf8fd057774aaa2119da63cb); /* line */ \n        c_0xeb5bb505(0xe57a194ca22f5960aff1e671bd21c38cd1d6d391915038584f9c40984bcb10f8); /* requirePre */ \nc_0xeb5bb505(0x62a3f760ae81aee5e20884105ff4aced8b2741e44653c41844105577d8230066); /* statement */ \nrequire(msg.sender == admin, \"Seed: caller should be admin\");c_0xeb5bb505(0x9290b72c67a526c116ad8f1c2f142edaa330531f24d2f63221c3db29982b2580); /* requirePost */ \n\nc_0xeb5bb505(0x22f01aebd75b1219d5f9200d3389e7edbf6da329d7e7005fe3176d1eaef7af13); /* line */ \n        _;\n    }\n\n    modifier isActive() {c_0xeb5bb505(0x62b9a3542a2acf2f05fc5c6120f9301075ed7395122533739c6381f877e882ae); /* function */ \n\nc_0xeb5bb505(0xca43deb5c415a47457e00d91a1178daabec6ac27e3e40e108406bd5167260d9c); /* line */ \n        c_0xeb5bb505(0xe0ea3724bd49c10cacb7414229219bbafdb285af55d4f884cd4df47cd2010043); /* requirePre */ \nc_0xeb5bb505(0x91e366f4bfcac5c405ca18f3097cebc1e1536a32697fcf7bc6ca96dbbd00944f); /* statement */ \nrequire(!closed, \"Seed: should not be closed\");c_0xeb5bb505(0xd41962241df33d28d6c7ec0ad40c7f2b7ad3dcb5245227bb89f08b889e5773f2); /* requirePost */ \n\nc_0xeb5bb505(0x658fb4ace7c0ae8635fb593dc0360e46a9cfae63bffc792756811cb08c4ec404); /* line */ \n        c_0xeb5bb505(0x0a27ff6b23bfc47e74792a3dcb4dee90dc772c6773f906beb677517ce2d79dc6); /* requirePre */ \nc_0xeb5bb505(0xf763c578dd07f0fcd9b07cd391b9b0f9748627266556b22b53334f13d12ed97a); /* statement */ \nrequire(!paused, \"Seed: should not be paused\");c_0xeb5bb505(0x2b86ef932044cebfaca1133aae70b57fa47e82f0e756e06511a7ed0caab7880e); /* requirePost */ \n\nc_0xeb5bb505(0xd6aa5cd9988e4abd1163fd721666035b638e18b39c688ad5b527467b3d4eb734); /* line */ \n        _;\n    }\n\n    /**\n      * @dev                          Initialize Seed.\n      * @param _beneficiary           The address that recieves fees.\n      * @param _admin                 The address of the admin of this contract. Funds contract\n                                      and has permissions to whitelist users, pause and close contract.\n      * @param _tokens                Array containing two params:\n                                        - The address of the seed token being distributed.\n      *                                 - The address of the funding token being exchanged for seed token.\n      * @param _softHardThresholds    Array containing two params:\n                                        - the minimum funding token collection threshold in wei denomination.\n                                        - the highest possible funding token amount to be raised in wei denomination.\n      * @param _price                 price of a SeedToken, expressed in fundingTokens, with precision of 10**18\n      * @param _startTime             Distribution start time in unix timecode.\n      * @param _endTime               Distribution end time in unix timecode.\n      * @param _vestingDuration       Vesting period duration in seconds.\n      * @param _vestingCliff          Cliff duration in seconds.\n      * @param _permissionedSeed      Set to true if only whitelisted adresses are allowed to participate.\n      * @param _fee                   Success fee expressed as a % (e.g. 10**18 = 100% fee, toWei('1') = 100%)\n    */\n    function initialize(\n        address _beneficiary,\n        address _admin,\n        address[] memory _tokens,\n        uint256[] memory _softHardThresholds,\n        uint256[] memory _price,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint32 _vestingDuration,\n        uint32 _vestingCliff,\n        bool _permissionedSeed,\n        uint256 _fee\n    ) external {c_0xeb5bb505(0x57eb8b046027b3886a78fde3487ab020f8ecb371e556e44e17efedafec0afd4b); /* function */ \n\nc_0xeb5bb505(0x39e904b70884c90a247b5450258eae1406f650a90bc915e4a2bad0eb4461857c); /* line */ \n        c_0xeb5bb505(0xa00691dd84bd76747fadd825114288f254cc01db8b549a1aabf801a13ec9ab35); /* requirePre */ \nc_0xeb5bb505(0x8f47c91a9178a0dfcce28a1fbfcd0914c3abebf913f75ba0d3eee5b0600b95ca); /* statement */ \nrequire(!initialized, \"Seed: contract already initialized\");c_0xeb5bb505(0x2d5e063757ed0fdbe81b384a27dccc4821b0bb7c8f0f0ed902e17c24d13c8a01); /* requirePost */ \n\nc_0xeb5bb505(0x3a13afe17cbb77675ec5667cafb55c918fa858f23e7f3951f90c8ef84bbb69b8); /* line */ \n        c_0xeb5bb505(0x6507aa1d4b07db95336793263d87d6404ac3eb9e40a3fd4b2f3625b4876c817b); /* statement */ \ninitialized = true;\n\n        // parameter check\nc_0xeb5bb505(0xd5bc75c91de8e7835c25ed6dadd24cdcbcca0be65c1d5d37e233ab42e623cfcd); /* line */ \n        c_0xeb5bb505(0x324bc4d690f5d43439124096086eb15cdb45152b6e5a4fe9da0dbf8a907045c0); /* requirePre */ \nc_0xeb5bb505(0x58f58c5966a68dfea1e60991cb0920b73513bd62d5d8a4cea59e5d448e468ade); /* statement */ \nrequire(\n            _tokens[0] != _tokens[1],\n            \"SeedFactory: seedToken cannot be fundingToken\"\n        );c_0xeb5bb505(0x4b2523975bf0125f30328d7e6ded42f297b82f8cc63babb9aca099efd7d1115e); /* requirePost */ \n\nc_0xeb5bb505(0xf903325362cdf05c4fceac2e1745ec7c7c3b7dc109cb20e072fed9cb9ba7e296); /* line */ \n        c_0xeb5bb505(0x63f72d40ecfdb4d0cd66c63e2abba16ecd291b4ab3e5dbdcaacda50693e9e254); /* requirePre */ \nc_0xeb5bb505(0xec2687deb9a09cb1037462caf92df267bcc1c6eadec0255d234b3f82e52a3768); /* statement */ \nrequire(\n            _softHardThresholds[1] >= _softHardThresholds[0],\n            \"SeedFactory: hardCap cannot be less than softCap\"\n        );c_0xeb5bb505(0xfbecb1d489ab068f359d3cc12c4600a4af0d23bceb1a1c7c11a2ee0a27ed6511); /* requirePost */ \n\nc_0xeb5bb505(0xc45c9ee19ea74169c8b660c004d850a1aff989f6c69608608b91b85d5503bc11); /* line */ \n        c_0xeb5bb505(0x59ac23093d983e866a6ba3de9a6cf2fb68dfdaf434f5de1766e6040e507de99e); /* requirePre */ \nc_0xeb5bb505(0xd754f9eda7a1424d76b0aeeb918f7bbcedcc6d8cbabb274f705993ff3e0aa8c3); /* statement */ \nrequire(\n            _vestingDuration >= _vestingCliff,\n            \"SeedFactory: vestingDuration cannot be less than vestingCliff\"\n        );c_0xeb5bb505(0x2ec1abf46e416c6110caf68d2940446a63bf3ec7bd324e9e24ccaad1d73f20b5); /* requirePost */ \n\nc_0xeb5bb505(0x9e21a0c73c0f7ec2c92e23a1df54396e794963ab5d199baeec990e83097d0a3d); /* line */ \n        c_0xeb5bb505(0xac2670dd6c5f8996f7e5fa0fe9bf6836400dfec97c74c9181a3f042fe9dfba16); /* requirePre */ \nc_0xeb5bb505(0x100d99a9805600a421c6b3490f98b25557cc48ba50bd4383ccc9cb3f4ab88568); /* statement */ \nrequire(\n            _endTime > _startTime,\n            \"SeedFactory: endTime cannot be less than equal to startTime\"\n        );c_0xeb5bb505(0x3af8d7a5e005c68df76d00768b11480083ead7876da0c5b05f8ca9ba576e29d8); /* requirePost */ \n\n\nc_0xeb5bb505(0x091e8c45df660493cfe1f4392ba361abd872484db1832668ae6450258e6e082d); /* line */ \n        c_0xeb5bb505(0x9812122308dadf31d33f42735283120ac3f57ceb88fb69bdf55a491d10a29000); /* statement */ \nbeneficiary = _beneficiary;\nc_0xeb5bb505(0xd4ebf0847a7d7dad06064dc5676153c3670ff11dfbedfc4bab7484cc7f67639d); /* line */ \n        c_0xeb5bb505(0x5db496166a3a12f64dcfd14315363b4c06b9c076f9d56b2764a6cdfe5ce36c4b); /* statement */ \nadmin = _admin;\nc_0xeb5bb505(0x9ffab04af98ba94e5e8d4a8eeeba6007320ecde37c2f83a4455089e8c1d31e25); /* line */ \n        c_0xeb5bb505(0xaeaabd02456842453a9a07bd61ccc2e2fdba367f731f6990af411339373b92ef); /* statement */ \nsoftCap = _softHardThresholds[0];\nc_0xeb5bb505(0x7e20db9852dd850df97b4b6331cd9d19b715cbaa451ccb5b89366994c5ac4eb7); /* line */ \n        c_0xeb5bb505(0x6150a31a6fb7538190806910f259fd923473f5991c2f81adf7a4c0db7018a5ba); /* statement */ \nhardCap = _softHardThresholds[1];\nc_0xeb5bb505(0xa106ae43e91c6ef0f3122e88f37296384b3b864bd8e27ca7df9e7a3edb2ad22d); /* line */ \n        c_0xeb5bb505(0x4551cf3ea831e338c7b8a4c7e2385f946dfbe52feb2ac37c0cc66ebaa98f9482); /* statement */ \nprice = _price[0];\nc_0xeb5bb505(0x3d97d6520971435ab3ae27922df714c2972bf227d2b3d326e42e481a05f681de); /* line */ \n        c_0xeb5bb505(0x5d447ceff0c1ec79b68d70762889767be8568541fbcbaaca2d9d999f503bda63); /* statement */ \nstartTime = _startTime;\nc_0xeb5bb505(0x6bce5b6e81443af59fce3e1e8ca34547d70ed4b16cf7cced45a760822fda9f3d); /* line */ \n        c_0xeb5bb505(0xcbfc29b10597473ec92ea7c4dc229d8fea8eb70badd82311a5b47d4bee07489a); /* statement */ \nendTime = _endTime;\nc_0xeb5bb505(0xb5684720da79cea3796a7586cb226482c2f4d5f7135c8ed0768095fb5e3ccce7); /* line */ \n        c_0xeb5bb505(0x608e02f31ee1b44c084d6948f22ae86024546e8043df4dbc234c5f8c2ae5c0a6); /* statement */ \nvestingStartTime = endTime;\nc_0xeb5bb505(0x3a5b193f1a945ebe18c2678939d1b84aea094d447e51ae39758afabc048edc2f); /* line */ \n        c_0xeb5bb505(0x32ea8594fde8e248fe1ca77f341de724ce02ae7fd0ede2be5882209be02b083a); /* statement */ \nvestingDuration = _vestingDuration;\nc_0xeb5bb505(0x4ea2f22d0e60d5de2ad2d7bbf4b6784f9d9f5301b38ba9ad726917f659a40995); /* line */ \n        c_0xeb5bb505(0xfd6cd40d02e4104112e6b0f2c49da850f082c949d75b313f340497bc8ce74d07); /* statement */ \nvestingCliff = _vestingCliff;\nc_0xeb5bb505(0x9cdc18bf1ab22b1711a0542de94a4d72c96ca15b540092b53a125c6642b55924); /* line */ \n        c_0xeb5bb505(0x37b8ce906427b73e06648770af637dfaa32a000adbece2cae0c90abf25341580); /* statement */ \npermissionedSeed = _permissionedSeed;\nc_0xeb5bb505(0x2448491100b2f3bc164a1ad4440f4a0495638a42300873151fbc3125cc3b5b06); /* line */ \n        c_0xeb5bb505(0x51b829a464f50fb61b25913f616d96b95c08f89c792a9262cacae037eed5d4f2); /* statement */ \nseedToken = IERC20(_tokens[0]);\nc_0xeb5bb505(0xc0a7238274ecc7354e3d26bc9adf86a4f23d25604140166bf6a227177277d292); /* line */ \n        c_0xeb5bb505(0x90f97ddeb9ad5fbe5ba420cba27dbe0c5a63a669bb705208cdf09be378d5b96c); /* statement */ \nfundingToken = IERC20(_tokens[1]);\nc_0xeb5bb505(0x6d612181538cd7070bde699437df5744bd1da360beb576944fe2ba682954b3d3); /* line */ \n        c_0xeb5bb505(0xf02b87ea88fb8e5611e44b12bf62c3b46af4d100aff04d3224e8ad5cf9eb2d0c); /* statement */ \nfee = _fee;\nc_0xeb5bb505(0xbaba7b7d9d17ca70efd94f12241c809349f6768d899d04b4c46073081f0e2a11); /* line */ \n        c_0xeb5bb505(0x6d12659a4cda839bffc0f4c5f79d9a11b2d31c93b375a1d31f1228dc051d9b02); /* statement */ \n_seedTokenDecimal = uint8(_price[1]);\n\nc_0xeb5bb505(0x5931e4fbe35fa0bea7669793d13ab7f9720b81a15dee884a3e6d7177f5a4b004); /* line */ \n        c_0xeb5bb505(0x1302dac2418d4281b68437116a952d499e57940b77471799b8eea8c12ab3bf7e); /* statement */ \nseedAmountRequired = (hardCap * (10**_seedTokenDecimal)) / price;\n        // (seedAmountRequired*fee) / (100*FEE_PRECISION) = (seedAmountRequired*fee) / PRECISION\n        //  where FEE_PRECISION = 10**16\nc_0xeb5bb505(0xf04e209728b619fee3c56e6929be9ba561672193047ebde4417976ed2946d37c); /* line */ \n        c_0xeb5bb505(0x8f823a0a99eabd7b39a026cb404f79f811f85dda852158bf94eb00d1f83508f6); /* statement */ \nfeeAmountRequired = (seedAmountRequired * fee) / PRECISION;\nc_0xeb5bb505(0xbde87afa156fb381c2bd8aacc23ee66fa12b3b85407cdf02ea794fe1c1b74ae2); /* line */ \n        c_0xeb5bb505(0xe4058bc5b007770c34a3223e93384cf15747ee988d13493c1853c1d3ef95d606); /* statement */ \nseedRemainder = seedAmountRequired;\nc_0xeb5bb505(0x1b816a60229ab8383493e28cf54c597cf74acc0a85017f41f67044eeb9250c28); /* line */ \n        c_0xeb5bb505(0x1c68e9d645a7dc1860c6ea65303f7e06b56361c58c564a03912c04b8b4fdd16d); /* statement */ \nfeeRemainder = feeAmountRequired;\n    }\n\n    /**\n     * @dev                     Buy seed tokens.\n     * @param _fundingAmount    The amount of funding tokens to contribute.\n     */\n    function buy(uint256 _fundingAmount)\n        external\n        isActive\n        returns (uint256, uint256)\n    {c_0xeb5bb505(0xbe07a753319a01ea46bab039d8b9b2de40c63ebe753d8e9550a63b841dc20eef); /* function */ \n\nc_0xeb5bb505(0xe1afc5e4f2c112ff9fec0f458db4ff30d1d9eabc1ef2c3b722f1bc7b02aff465); /* line */ \n        c_0xeb5bb505(0x4da9148a44dda31e40a84dfd7e8c5988f0f445adb352085be826dcfc5d8582cb); /* requirePre */ \nc_0xeb5bb505(0x2fef5de576f8d32dadafc46a08a5e6a54788ab89e9accbbe28a505b131e5acc6); /* statement */ \nrequire(!maximumReached, \"Seed: maximum funding reached\");c_0xeb5bb505(0x5c559f7cc0ccf34b944658f0da50c0a44886d2dd4c5db2ffd7a9a53a2b04b45d); /* requirePost */ \n\nc_0xeb5bb505(0x8efc6ad6a66af02ad47759cc27a071d9479a5b45fee44d6a5c91e17d0c2a2fed); /* line */ \n        c_0xeb5bb505(0x680c4b2c5434b6b5a84e670c0c89d8c330e7c287b0fe631820ee87d77131d0f9); /* requirePre */ \nc_0xeb5bb505(0x54c69563245687e32751da52662c1d118713d1ee6d343f87afe816d42cbaaee4); /* statement */ \nrequire(\n            !permissionedSeed || whitelisted[msg.sender],\n            \"Seed: sender has no rights\"\n        );c_0xeb5bb505(0xfc09e4f8818aa743fe6b2dcc4768ca3b66b1e3752595036c424a7d3b522c8e36); /* requirePost */ \n\nc_0xeb5bb505(0xe8ffb82a4df183399a5b578f1a85a6a234cd39698dac3903abebe08c643a827a); /* line */ \n        c_0xeb5bb505(0x1233d50901f68c2379f03c95b0765b6a7c017cb645f86ddbd905a16f771b5eb2); /* requirePre */ \nc_0xeb5bb505(0x9cec459d79da98f5f91c23254e9d7b44b2c850b686fe48f55d2daeaaed6509e0); /* statement */ \nrequire(\n            endTime >= block.timestamp && startTime <= block.timestamp,\n            \"Seed: only allowed during distribution period\"\n        );c_0xeb5bb505(0xb66056bd62565b081425c9048cf82ad57bf1ed4165e5abeeeb1b661ac9c5975b); /* requirePost */ \n\nc_0xeb5bb505(0x28df1fbef56f5c43556ee7b79db252bcfeba8457f14e351a06fd00f3177434fb); /* line */ \n        c_0xeb5bb505(0x18fd53b5d4d9c57f15dfe18d8631afc53ea75c3346a7999bd62b97e3af1fbdb9); /* statement */ \nif (!isFunded) {c_0xeb5bb505(0xfc12f94a6001f684fef357553f96ee414252e620e7f6e308bc966734faef380e); /* branch */ \n\nc_0xeb5bb505(0xc74d08e2853ebb1916090fd3f71119416b30c770e69f8876b5187995d2bbed3b); /* line */ \n            c_0xeb5bb505(0xa15c160c20d186fe921c9ea57ff20d9f37a723603b29385c80e2118302aeabce); /* requirePre */ \nc_0xeb5bb505(0x0d2d3eedc7b15b3884b60142bb541032419d1d7a7da086b6d06050fc1dfa1e6f); /* statement */ \nrequire(\n                seedToken.balanceOf(address(this)) >=\n                    seedAmountRequired + feeAmountRequired,\n                \"Seed: sufficient seeds not provided\"\n            );c_0xeb5bb505(0xf82647aaf5a0070bd5c468588ee092935b911c1925179b9c87a478bfcab9a89b); /* requirePost */ \n\nc_0xeb5bb505(0x48c1992500cb02a23f4520a03b6a7418469c258e1702118a62d90cd694dba3df); /* line */ \n            c_0xeb5bb505(0x4e52357ad3274582199a19e0fdc0f2de6740015d9c526e55111037a3a681b902); /* statement */ \nisFunded = true;\n        }else { c_0xeb5bb505(0x94963a59b92cf80663e5de0bd8604b039e0386f865e47f8ce959e01c5a3a679b); /* branch */ \n}\n\nc_0xeb5bb505(0xd4050e8552deb06a97429e1d8abd8e3e6727a88674eab7543c0139397b1fed48); /* line */ \n        c_0xeb5bb505(0x3dd3ca351b2ec321aa53a53b6e85dc104b92d7be9863a47ccc8127278d30bc3b); /* statement */ \nuint256 precision = 10**_seedTokenDecimal;\n        // fundingAmount is an amount of fundingTokens required to buy _seedAmount of SeedTokens\nc_0xeb5bb505(0xbc56bb4fb051709397c1af5fb6491471abff2c4b1412227e1bb45ba16da0e45f); /* line */ \n        c_0xeb5bb505(0x19615eeacdb000c8bda97a6d9419ac53e8e847fe0440014b60c348601ec0ad36); /* statement */ \nuint256 seedAmount = (_fundingAmount * precision) / price;\n\n        // feeAmount is an amount of fee we are going to get in seedTokens\nc_0xeb5bb505(0x0b4644ed5df6fe698e9b7adb17ce92e180581823b699f83a6c32880188aeb5c5); /* line */ \n        c_0xeb5bb505(0xed676d7958daa2e3fc21e708b98d09ae867a4e778156ba83451830ce847ca45d); /* statement */ \nuint256 feeAmount = (seedAmount * fee) / PRECISION;\n\n        // seed amount vested per second > zero, i.e. amountVestedPerSecond = seedAmount/vestingDuration\nc_0xeb5bb505(0x18dcff4315748ebad58e4753f9cf46b75c0361cfede9eec92eba491a6981a0a5); /* line */ \n        c_0xeb5bb505(0x250f0bf7f3df53a2ef0765c9caa8885c1dff753321f7c4f91befe64cecbb87e6); /* requirePre */ \nc_0xeb5bb505(0x4e96ba32c756c27a3d7c291021152ab9b776d740110313f3499bfeb17af616c0); /* statement */ \nrequire(\n            seedAmount >= vestingDuration,\n            \"Seed: amountVestedPerSecond > 0\"\n        );c_0xeb5bb505(0x77c7a0e39f04053e53ee9af2c78d44f5d974bb97ea6a04eeb068e2caed380de0); /* requirePost */ \n\n\n        // total fundingAmount should not be greater than the hardCap\nc_0xeb5bb505(0x244de4aa012934dc0ba239b691ffed0ed010be16f5aa6778fa214557d5889681); /* line */ \n        c_0xeb5bb505(0xec7d82643e0ec2e581bcddbf8317d6cecc2a0f644129c5337d3335e90a54511d); /* requirePre */ \nc_0xeb5bb505(0x6c7acb9aedba5c86620100d1f5553f6358e7bbf914f4f396fddccd38a7f425a1); /* statement */ \nrequire(\n            fundingCollected + _fundingAmount <= hardCap,\n            \"Seed: amount exceeds contract sale hardCap\"\n        );c_0xeb5bb505(0xd3b7fbcdbb3c42044931823df0d4ff6efa65a550e608fe7c77874753038ea745); /* requirePost */ \n\n\nc_0xeb5bb505(0x51e849656317778258d96ede45e2a60ed811a393eaa5d6ad479c34dfa52d5b1a); /* line */ \n        c_0xeb5bb505(0x011a4873b3987753e0ae1bd5975dfbd18de3d47912faa694f21d75f5e4b09878); /* statement */ \nfundingCollected += _fundingAmount;\n\n        // the amount of seed tokens still to be distributed\nc_0xeb5bb505(0x51fc96e0d5e413c77ff353f43ba335f50d88a15dc5d26ce1586b2b88579177f4); /* line */ \n        c_0xeb5bb505(0xd516db2cb0ab70b4ede891424392af4180b22b94319719402b6549e6ee77f11b); /* statement */ \nseedRemainder -= seedAmount;\nc_0xeb5bb505(0x70228fcceaf0dfadddab62db12bd9155bfcaec09297aa8c636e886daa8420011); /* line */ \n        c_0xeb5bb505(0xa820eaf6443748c551e4f9e7e7a64c265e7d568b0ef88799bf07bab515cee5ce); /* statement */ \nfeeRemainder -= feeAmount;\n\nc_0xeb5bb505(0x9235bf2659f8a848bcba39626a2d08c21efd136b355e311785e0e3e2dd844b89); /* line */ \n        c_0xeb5bb505(0xbddb8d96d8cf47304eed9b88b738305069cef218503654a6f8bd8610ee118506); /* statement */ \nif (fundingCollected >= softCap) {c_0xeb5bb505(0x66ae6dec4ee77d7b1e6215f55e754b96f1a9b290119f025203fda18bad3776ab); /* branch */ \n\nc_0xeb5bb505(0xb0006ccea861d008ed59505521251cff99239e1f64a2b4938e28b1127c2e9612); /* line */ \n            c_0xeb5bb505(0xd9c7c8e17165100c5df14384dc8d8e66175fd1dc7a939ff04d110550575ac7cd); /* statement */ \nminimumReached = true;\n        }else { c_0xeb5bb505(0x721a8bb9cebcdd20687e45f4a321273631ebcdb6af3998600899545cdfeb176b); /* branch */ \n}\nc_0xeb5bb505(0x7d676491c4e3d7ffca837851a2f1c0bc1e776443139fb449211003e947db4038); /* line */ \n        c_0xeb5bb505(0x1f59f5089fe5e1310e3dc8e9286bc51ca82cc88bbab7f4830a0a5db2dda40572); /* statement */ \nif (fundingCollected >= hardCap) {c_0xeb5bb505(0xd69cf81797b5a91799b0263cebbaad4fed09a40e27d75db3cc5b96c3d2e92513); /* branch */ \n\nc_0xeb5bb505(0xfc6315b4cbccaf9db9bcc89ba17bae4b8bca826edd3ff493fd47012a31f71379); /* line */ \n            c_0xeb5bb505(0x50f9cbe50169e81bfec8ace6913d75d3b5c79b874c0dbe7a264f8aa55e4e56ed); /* statement */ \nmaximumReached = true;\nc_0xeb5bb505(0xedc9e58d7ee38b4d7a499f1a9b713aad3f4940b502afc77c89e6afed3cc213fc); /* line */ \n            c_0xeb5bb505(0x1340883e560a784077d433041df65b7658513f803d492de46ee791f9a1b66b84); /* statement */ \nvestingStartTime = block.timestamp;\n        }else { c_0xeb5bb505(0xcc3c1504b3c52f7bc0466dbeb7c36e3b9f7bf2f9a0d2c16412c52e6cf5b6c4ed); /* branch */ \n}\n\n        //functionality of addFunder\nc_0xeb5bb505(0x75cc5528d3a4f93fc99f50ffb0f14dfab4a0fdb19b14f582cc58654f41dfb355); /* line */ \n        c_0xeb5bb505(0x042dc36530124be9591fa729edfe4b4612094c35df7a67c91b56020a102eb5f8); /* statement */ \nif (funders[msg.sender].fundingAmount == 0) {c_0xeb5bb505(0xa8f5632efb80339312c1dc23bd8f4bf61534b960ac0d64c397feee50cad63919); /* branch */ \n\nc_0xeb5bb505(0xa9aedcaefd224b12adcae3a2b5a8af43ebbd490ce072b77e0e9cab4742d7541b); /* line */ \n            totalFunderCount++;\n        }else { c_0xeb5bb505(0xa72e73f3b95215d8f0057dc06ae3a2280f43738c52a4a284e60ccd864d27da87); /* branch */ \n}\nc_0xeb5bb505(0x5a7ab81709613b79da6b708d4df0913a5b61a9972f1266782e29a47342f5c889); /* line */ \n        c_0xeb5bb505(0x2571bd0f2597ecec25c1c079b46df127f7247d502cd7eb4031b31ec419a1890e); /* statement */ \nfunders[msg.sender].fundingAmount += _fundingAmount;\n\n        // Here we are sending amount of tokens to pay for seed tokens to purchase\nc_0xeb5bb505(0x248406c01f575c6309541702fb1afc09b2ed09232f951cf547831d57ed240081); /* line */ \n        c_0xeb5bb505(0x4cdd70b5ab4a2366a118589b04586e7dd8183485fba118b711fbc311297e34f6); /* requirePre */ \nc_0xeb5bb505(0xc7672d1334243ccd32126f37c641546ccdc121088148449701f5dee738553d13); /* statement */ \nrequire(\n            fundingToken.transferFrom(\n                msg.sender,\n                address(this),\n                _fundingAmount\n            ),\n            \"Seed: funding token transferFrom failed\"\n        );c_0xeb5bb505(0x4198a5420c019b2709fe47c3ed8a689beb3becc4f2283e20cc7ad41d4946c058); /* requirePost */ \n\n\nc_0xeb5bb505(0x98353c38a4977fe067b1ef2532478dd8615a7439c6d071923cbe4335a8cc6a49); /* line */ \n        c_0xeb5bb505(0xbae925ec5cbff7f336fef257ce18cf480d8c05bd936fb462a8b92ad8dcb1eacc); /* statement */ \nemit SeedsPurchased(msg.sender, seedAmount);\n\nc_0xeb5bb505(0x4df4409b9022389dea7f8af3252e7d5e4b5883cb5f372bd2c813f6745aef7d08); /* line */ \n        c_0xeb5bb505(0x368c2c542bee17e72b6bb3a2c898214d57adcaaa2ed672ba7c141cfcb0f2fdea); /* statement */ \nreturn (seedAmount, feeAmount);\n    }\n\n    /**\n     * @dev                     Claim vested seed tokens.\n     * @param _funder           Address of funder to calculate seconds and amount claimable\n     * @param _claimAmount      The amount of seed token a users wants to claim.\n     */\n    function claim(address _funder, uint256 _claimAmount)\n        external\n        returns (uint256)\n    {c_0xeb5bb505(0x47f53c03184da46be0fb08c8ff100baa689f34b89b066ff11abd16130b87fcd4); /* function */ \n\nc_0xeb5bb505(0x9adf134fdc5fd01100acb4e659597e669cf22f9584ccbf44ea1d5c20a628483e); /* line */ \n        c_0xeb5bb505(0xe86217461113c43c9ded41084a748f398c6bc95f4456f362f5f1bd69a0c9cb4d); /* requirePre */ \nc_0xeb5bb505(0x4954716cb1eed56ed33f91d2a4b1764398a913b18ba34bb55db097ae4dfb87c5); /* statement */ \nrequire(minimumReached, \"Seed: minimum funding amount not met\");c_0xeb5bb505(0x452e8301981ed55b391f0df0dd06409750e40c0d99a7254740a7050b7a49adc0); /* requirePost */ \n\nc_0xeb5bb505(0x82694396e68c769213cd77796afd4288cbf6011188ae70191789df7cd9086b03); /* line */ \n        c_0xeb5bb505(0x2a4e6cebd9e181119e46926a154bee6f67476cbfb707c030319cf38663ef1951); /* requirePre */ \nc_0xeb5bb505(0x9751a68e8413fd20c642f65f2704d3b6dc5662c50c50d7929cb4a0295a7a2eb1); /* statement */ \nrequire(\n            endTime < block.timestamp || maximumReached,\n            \"Seed: the distribution has not yet finished\"\n        );c_0xeb5bb505(0xe930451acee65d66f65305e6b0c880eb88aea14976db38a2786ee78b774980ae); /* requirePost */ \n\nc_0xeb5bb505(0x7c4bfdef431441050d3fb066ae5e97774929716ccf8741e77f013e5447405517); /* line */ \n        c_0xeb5bb505(0x7cd41110c594ced0d03e1d8af119b6aa5ec0055ed148ccc41bf3ad371f098930); /* statement */ \nuint256 amountClaimable;\n\nc_0xeb5bb505(0xcda75c729f1c516e781d03a6f7806cc37e7d175976f977efc68c19c992c1a858); /* line */ \n        c_0xeb5bb505(0x0e7b71a4a8f0b1714573380124229f776f163065fd43433dea362c810748b247); /* statement */ \namountClaimable = calculateClaim(_funder);\nc_0xeb5bb505(0x572206803548865276dffd1d34c597eaac0f7f2c6d99aa9ed866d74ea4423dc9); /* line */ \n        c_0xeb5bb505(0x92bd9083b87cbe23d9b4664a1d90d9a0511ce02896b53930cf0ecc9558d9a3eb); /* requirePre */ \nc_0xeb5bb505(0xf7388100f1d6a1dc43f18c6e5c948846ddd9fcee17ed90bff68e70ae2e40bdc8); /* statement */ \nrequire(amountClaimable > 0, \"Seed: amount claimable is 0\");c_0xeb5bb505(0x5289a6298adaaadf6b5162384069c89f8700c1993e8f6eb856caf078a40c568f); /* requirePost */ \n\nc_0xeb5bb505(0xbdb022c577aee243019eea9c8cb25f2bf8f2f17ad3c17c0f07819a9c9155500f); /* line */ \n        c_0xeb5bb505(0x55b5b6e8ca7b23494c1fb588467477d1a17550fc17462705d00e692545e7e5ea); /* requirePre */ \nc_0xeb5bb505(0xbff98072386ef99c5546c043c8a08d3090f13e5ed77c6478ae537ffb8009f5b3); /* statement */ \nrequire(\n            amountClaimable >= _claimAmount,\n            \"Seed: request is greater than claimable amount\"\n        );c_0xeb5bb505(0xa4cd44bb2ed9f37dce70ae2e9a3a1f23649488cc213b360e7c9af4960d8d5b87); /* requirePost */ \n\nc_0xeb5bb505(0x526fc1e574799356b3108b9951b5ff6446f9c561d594fd4f447ba5706d177077); /* line */ \n        c_0xeb5bb505(0x2633e859308f95a0150d07dc1eb891ab53c724eff7458ee613d506a3efa1a8c6); /* statement */ \nuint256 feeAmountOnClaim = (_claimAmount * fee) / PRECISION;\n\nc_0xeb5bb505(0x191f1a819a78d34a5d482b93962ceebe0062d3efbc2f004097bb801646803058); /* line */ \n        c_0xeb5bb505(0x2a7963aaea9e6335d0357df83ba6fc1235c569d863aba30ac78f352f1926f823); /* statement */ \nfunders[_funder].totalClaimed += _claimAmount;\n\nc_0xeb5bb505(0x7282be0f5985c9c2d9d6f7a27c3598860e42f76d2aa7e811cafcf612983b6722); /* line */ \n        c_0xeb5bb505(0x7d4a338cf6188424f408cfea6291eea600c68cfb14d653316d7ab4319f658c85); /* statement */ \nseedClaimed += _claimAmount;\nc_0xeb5bb505(0x04459f1c22ca72fe318b9f8408b18078a3d0bf35016fb71c698458d5422839d7); /* line */ \n        c_0xeb5bb505(0x8677b0d4e30a1bdc892786dcba17a5d1180daae5cbe6dad983541f7ee4e1607a); /* requirePre */ \nc_0xeb5bb505(0x5f1cc4b594cb8e1695c85acdad36647c3502a0fa449e59ff3ed52d32dd59904c); /* statement */ \nrequire(\n            seedToken.transfer(beneficiary, feeAmountOnClaim) &&\n                seedToken.transfer(_funder, _claimAmount),\n            \"Seed: seed token transfer failed\"\n        );c_0xeb5bb505(0x9fb88ff37113556512b1bd5619b990bcfa07328851ccc9a89c5b6af81637de0a); /* requirePost */ \n\n\nc_0xeb5bb505(0x58c3c44bbcf290b601b559ba77f626e329f20ba3dd1e5ee1841a1fabf8586d6b); /* line */ \n        c_0xeb5bb505(0x7983f07b588f782f3ac316b1202419d142551e980bb16d1837364799655d2aa8); /* statement */ \nemit TokensClaimed(\n            _funder,\n            _claimAmount,\n            beneficiary,\n            feeAmountOnClaim\n        );\n\nc_0xeb5bb505(0xca95534dfea7cf1c6b3d4ca9888270d4e73b10d9f6e3de905450211abfc8f0e4); /* line */ \n        c_0xeb5bb505(0x999c0a82ae1ef0819d01fd69148576bbdea495f17804051c01ed8f07b0aea235); /* statement */ \nreturn feeAmountOnClaim;\n    }\n\n    /**\n     * @dev         Returns funding tokens to user.\n     */\n    function retrieveFundingTokens() external returns (uint256) {c_0xeb5bb505(0x03083c73bfa26a41f29f23bfb63bc6ee567fb25d4215d320b65f037096adf5ac); /* function */ \n\nc_0xeb5bb505(0xac1738f2c44712332dabc474ce480922b5afac834db90d1cf9ceb17c88b1c22b); /* line */ \n        c_0xeb5bb505(0xf95ddc367729350dcb9867dd746a84c0658159abf9a2e3b4196b93a93aa33f82); /* requirePre */ \nc_0xeb5bb505(0x5119dc5402f18e01d2e82eae8a9cc820e293d26ebf9e95525c880aa3f9649a21); /* statement */ \nrequire(\n            startTime <= block.timestamp,\n            \"Seed: distribution haven't started\"\n        );c_0xeb5bb505(0xf213b2831482cba05a85189608ce97e92f02e32d98aead80e329524ad28091dc); /* requirePost */ \n\nc_0xeb5bb505(0x48855dc099f6f0d0534596266a29854039cf22cfc4d4298615c166eae4df30f3); /* line */ \n        c_0xeb5bb505(0x06a29a0b903241b9383d55f8e0c5856c94c74482c6b4338eb7360aaf671dc0d1); /* requirePre */ \nc_0xeb5bb505(0xadac6aa92f26041ad6f4ac2da5c72d4edbaeb8ae0be87877f414df7ff1933b9b); /* statement */ \nrequire(!minimumReached, \"Seed: minimum funding amount met\");c_0xeb5bb505(0xf8515c7cf6c17efc09db4fba94562e0a881467ab07ec1b6a15314e4fe48c4eb3); /* requirePost */ \n\nc_0xeb5bb505(0x1ee28a938e0f3837c315202928c8fd5de8e9c520e016ede77892685f6045fe6b); /* line */ \n        c_0xeb5bb505(0xb456de2d1fe4be2c31707ebd2094cca80535bb46222032aafd894eba8c1ee894); /* statement */ \nFunderPortfolio storage tokenFunder = funders[msg.sender];\nc_0xeb5bb505(0x60839f018d8de98428aacc3ee7752c28685716a8b22865b39f362c333d474443); /* line */ \n        c_0xeb5bb505(0x40548ecef9a46dbde472fd97764a70b11015b878993471f14369e1702db9c923); /* statement */ \nuint256 fundingAmount = tokenFunder.fundingAmount;\nc_0xeb5bb505(0x2757b9e9b51a0797f8d3b900fc453b40da7c6700e3592215b1742e596ca9f2b7); /* line */ \n        c_0xeb5bb505(0xf4065261960d00e6a9de29a8bdf51651abdd53e91f41cbca240db767ae884be0); /* requirePre */ \nc_0xeb5bb505(0xe92693ab5b29a1678f14f418b9a3ce63f345d29de8ff3d5300415d74ece0db70); /* statement */ \nrequire(fundingAmount > 0, \"Seed: zero funding amount\");c_0xeb5bb505(0xd245111281e82f0ef2143f7bf5b98ca773fa2124ce842ffdd72d9a3e03b7f970); /* requirePost */ \n\nc_0xeb5bb505(0x7296b5497615503b7ed342ab98f7475ab82a864ccea16dc053852dfc096d18ea); /* line */ \n        c_0xeb5bb505(0xd4933059d5e4e045a529da1bc0aa86a6b2ff8e172d21e87513e0da84450e89af); /* statement */ \nseedRemainder += seedAmountForFunder(msg.sender);\nc_0xeb5bb505(0x4bb4698127bd2165815f39f64f19d81add9a2e4a04577c270948622d79bfed03); /* line */ \n        c_0xeb5bb505(0xaea279918bb0d5346ce38b3251f628fee410e2408e1092cf88d4117ec4e93fa4); /* statement */ \nfeeRemainder += feeForFunder(msg.sender);\nc_0xeb5bb505(0xe14594f77d7938c548b2f9fe637e0c09be3e947d5e39f9ae7765a79b3040b32d); /* line */ \n        totalFunderCount--;\nc_0xeb5bb505(0xa529475f32a460ca922810aa96d2cee508236de741694f5dd4a713701e849bf7); /* line */ \n        c_0xeb5bb505(0xe129740a0ad6b553dd2fb9a6efb4c0e1b1a82e870d4adb6eecc26d3b683878ef); /* statement */ \ntokenFunder.fundingAmount = 0;\nc_0xeb5bb505(0xb0d1faad9202587adf8e27f010784c2b43dadd87d7620af3f787a947cb828d7e); /* line */ \n        c_0xeb5bb505(0x76097f1829e24753d6eaa132b22647478c331414128b7ab7932c6d0eca97c365); /* statement */ \nfundingCollected -= fundingAmount;\nc_0xeb5bb505(0x568200256c1127a85f75754448a723a6dea08ed536e4cd195fcf1b64446bae02); /* line */ \n        c_0xeb5bb505(0x0d8d4307b9722e3d9ed3250db3cc6d21fbe42a5b8a2e3abb6626188b911ff388); /* requirePre */ \nc_0xeb5bb505(0xa3743fd064ccb0784223fbe3a819bf4624bb3d73df53bd22d8ad7d766d377756); /* statement */ \nrequire(\n            fundingToken.transfer(msg.sender, fundingAmount),\n            \"Seed: cannot return funding tokens to msg.sender\"\n        );c_0xeb5bb505(0x29194ab41b6bf2becbff0d6055bdbd8ed865b5d9f9754d19c5d43f500bb283d8); /* requirePost */ \n\nc_0xeb5bb505(0xcddd7663ab2764011b91536e694fc58507e6940423f829162f4406db2abf84cd); /* line */ \n        c_0xeb5bb505(0xab56fa7501031aeb2926237254178d72c1ec95d18f5f66e1c58b643d00b29cc2); /* statement */ \nemit FundingReclaimed(msg.sender, fundingAmount);\n\nc_0xeb5bb505(0xd1eebd952761bc9e18ae16ef70b85cca0c5025a40b3224691bbbbbcee91e733d); /* line */ \n        c_0xeb5bb505(0xa9eac797f8f1de7eea37dac79f5717cbca8295de2fea002b5f0196fe2c3b4fe1); /* statement */ \nreturn fundingAmount;\n    }\n\n    // ADMIN ACTIONS\n\n    /**\n     * @dev                     Pause distribution.\n     */\n    function pause() external onlyAdmin isActive {c_0xeb5bb505(0x94dd5f7ed7383e547d524e8c33ab836ba0d3e1dbfa01f91f4f1b0781d5005c1c); /* function */ \n\nc_0xeb5bb505(0x0042f247ea51ad2c95e0339b11efcddbe7b539fc667878669e3d9e61c4d1a20a); /* line */ \n        c_0xeb5bb505(0xa1d8a44e2958c83232e2fb7a1137f264fec5db7764c1bf920a529ae3b2d47e71); /* statement */ \npaused = true;\n    }\n\n    /**\n     * @dev                     Unpause distribution.\n     */\n    function unpause() external onlyAdmin {c_0xeb5bb505(0x5d2a9c6efef06bf1a6a023b34c95d1509618dda778e0c084f882e925c51b788e); /* function */ \n\nc_0xeb5bb505(0x9f9b41274107e0d4e9ae823ef9360743f1350a83d67e53e1a35a4dcd772f68b8); /* line */ \n        c_0xeb5bb505(0x8ce4b0bc1265c17b84865fdb67f4781acea313f0f15def8eea81a94669d64f41); /* requirePre */ \nc_0xeb5bb505(0xd2b4c2814f2d5a1aa1fcc18b8e5a1f9bd1f885f44bb2369726f4b953ca14ea22); /* statement */ \nrequire(closed != true, \"Seed: should not be closed\");c_0xeb5bb505(0x9aa051504091a902aeeda16728f09c2c5540fff4524212f666f80237204d17a4); /* requirePost */ \n\nc_0xeb5bb505(0x65121afba24093112b02c8f9a11eccb79bc727c8e6dd78db006a7c42a63352f8); /* line */ \n        c_0xeb5bb505(0xc9f4895d263035e9f7784c8e1d06034cadfe6f66fa7e95484e6c8e87787bf000); /* requirePre */ \nc_0xeb5bb505(0xa97193388ed37bcfebc11b6032fdaa4e60acaac7e4a836492d8b6c90b0fcd8f3); /* statement */ \nrequire(paused == true, \"Seed: should be paused\");c_0xeb5bb505(0x3268054bbc334c314bacac08ef57ec757ca4626c2a081842a3ec3682ec9ecf39); /* requirePost */ \n\n\nc_0xeb5bb505(0x90f4dbda6ff47c21aeb86db689c103bb322b91454291d44f83aeb09080740092); /* line */ \n        c_0xeb5bb505(0x028ac4bebf206ff82a8a72e7c3eccfd5c525eacfb534ab104ea75075025ce221); /* statement */ \npaused = false;\n    }\n\n    /**\n      * @dev                Shut down contributions (buying).\n                            Supersedes the normal logic that eventually shuts down buying anyway.\n                            Also shuts down the admin's ability to alter the whitelist.\n    */\n    function close() external onlyAdmin {c_0xeb5bb505(0x26cda82a28c808d230548612c3239d4dd1ad0983fd12d0ec36ea20fbc02e7a93); /* function */ \n\n        // close seed token distribution\nc_0xeb5bb505(0xf73a27ef8d1c975968616a375dd0b004ef79952f104bc2b08c9d3a8d27d2a631); /* line */ \n        c_0xeb5bb505(0x01371778ea1a08e8ddb5061c4c566015b17f6e02d4ffe8fcd96e14ef3059546c); /* requirePre */ \nc_0xeb5bb505(0xcc2c345552c6cb251e76ddca7c93d9d96e23635980e1c20088a6377006c4427a); /* statement */ \nrequire(!closed, \"Seed: should not be closed\");c_0xeb5bb505(0xda8aaa9e2d47c9e391fcf2f5cb7265c76f7ee46741483544a5c0429fbde6cd88); /* requirePost */ \n\nc_0xeb5bb505(0xd814bd4de363321764b067cce16286447299be0041a6f74ae75cd5c48954ddf7); /* line */ \n        c_0xeb5bb505(0xf0f5b4402c85d4567d58761854211733d7e6b9684f85e27e201eba796fa05cf5); /* statement */ \nclosed = true;\nc_0xeb5bb505(0xccd4e92feb6516dae78803ce6dfbd84eaf2c44600c91993a35e21fdb865f120b); /* line */ \n        c_0xeb5bb505(0xee6729f744191aa806bdca8b5778654c353a3104a6f6f62ee9aac8ee3f7a00bf); /* statement */ \npaused = false;\n    }\n\n    /**\n     * @dev                     retrieve remaining seed tokens back to project.\n     * @param _refundReceiver   refund receiver address\n     */\n    function retrieveSeedTokens(address _refundReceiver) external onlyAdmin {c_0xeb5bb505(0x2dc16d504b456d729adfb4be3d8cb646506e1da742f6c0bee5f401bc3ab8d1ee); /* function */ \n\n        // transfer seed tokens back to admin\n        /*\n            Can't withdraw seed tokens until buying has ended and\n            therefore the number of distributable seed tokens can no longer change.\n        */\nc_0xeb5bb505(0xc77726ebda4566811e86dc57d41eff2c3da3ad07b8f75dd092958a45d146e185); /* line */ \n        c_0xeb5bb505(0xc2d5f5413ef17bc3415a2b3369a2c75c0fc8c8734d127b4190f1cd580f04c62a); /* requirePre */ \nc_0xeb5bb505(0xa5e179fd67bf659a392b6a9a7195624f85dec68ed5f2ca6b5803cf7016a67588); /* statement */ \nrequire(\n            closed || maximumReached || block.timestamp >= endTime,\n            \"Seed: The ability to buy seed tokens must have ended before remaining seed tokens can be withdrawn\"\n        );c_0xeb5bb505(0xe7cae085dbc0b10515ff2137f930cefede9a07f00d185acfaafd79c5c42dacf1); /* requirePost */ \n\nc_0xeb5bb505(0x87b2b49d1be2f80efc6ce08e839282d183658fabe2cc17cbeb0d0dbc4f03d22c); /* line */ \n        c_0xeb5bb505(0xaa1266188f39d87b4d9b8f6eb64f72afbd1707c16842e04c0a4e65e0839adb93); /* statement */ \nif (!minimumReached) {c_0xeb5bb505(0x895d9b7d2339e42bd8c2c2cf34bf61dee12f5bc3a94a33f72c4ee2ef88b3c089); /* branch */ \n\nc_0xeb5bb505(0xf49158ca7355c4e38bd54d737569c2a079541c4e8a323cd12bdb477ce1f3654f); /* line */ \n            c_0xeb5bb505(0xd6b66d60e5511f09b2bd1851d26f91c94202caa72cd50a3bf3b84e1e7820e5bf); /* requirePre */ \nc_0xeb5bb505(0xfc91837a84c5380f0b3036e878b01787365fe95a2b93249b8dee1f3125d9c0ee); /* statement */ \nrequire(\n                seedToken.transfer(\n                    _refundReceiver,\n                    seedToken.balanceOf(address(this))\n                ),\n                \"Seed: should transfer seed tokens to refund receiver\"\n            );c_0xeb5bb505(0x97244c4f1c9c19c72c53eaab35f18f4a1ba92e97d2cf8f8335ab7c6d8ba292d4); /* requirePost */ \n\n        } else {c_0xeb5bb505(0x429990eb55a9dc690eee4b496803e1d8e281693ae5c0e9f9d9c50891cff4614f); /* branch */ \n\n            // seed tokens to transfer = balance of seed tokens - totalSeedDistributed\nc_0xeb5bb505(0xa75903bd2a43d17666f6d035e132c9f7b23615e29c271cd3ce87780ce03365fb); /* line */ \n            c_0xeb5bb505(0x3efc56dd87322cabdcf21743875e2538c0c871adb0c3837290afee95fd0a2c49); /* statement */ \nuint256 totalSeedDistributed = (seedAmountRequired +\n                feeAmountRequired) - (seedRemainder + feeRemainder);\nc_0xeb5bb505(0xd9031e27a77fd955dc9f6c9b5af7f674c9f2cf41813cb749d35fee5119725d7f); /* line */ \n            c_0xeb5bb505(0xe4f6391a5076f6d617286aee2fee4d55194543fe9d2e619c00c0fa6c9006ef3b); /* statement */ \nuint256 amountToTransfer = seedToken.balanceOf(address(this)) -\n                totalSeedDistributed;\nc_0xeb5bb505(0x42f8ed4455837f0de99ccc31297cad16cd2404e41c3014c330eacfb2b7c651f6); /* line */ \n            c_0xeb5bb505(0x43d0ab43fb808a6097b1fe6f150be63388bed595c6321e04bce97ee2cc3a8c12); /* requirePre */ \nc_0xeb5bb505(0xb0fe1f52deb5f394c792fb14d4811afec26d23af8eb67ae85a0f2656ce796730); /* statement */ \nrequire(\n                seedToken.transfer(_refundReceiver, amountToTransfer),\n                \"Seed: should transfer seed tokens to refund receiver\"\n            );c_0xeb5bb505(0x98c22615f03bffdcde50240d976aca1f29e7b79b073aee4743a44c2375415865); /* requirePost */ \n\n        }\n    }\n\n    /**\n     * @dev                     Add address to whitelist.\n     * @param _buyer            Address which needs to be whitelisted\n     */\n    function whitelist(address _buyer) external onlyAdmin {c_0xeb5bb505(0xfbe833dbc07901eddbcf9abc59ae9615b8ba1ed66d9de5ccd3bc69288cc882e6); /* function */ \n\nc_0xeb5bb505(0xf75c0a84f234aac5976b464f9b42d8069f02d61b88daf6804eb03a32b4cf887d); /* line */ \n        c_0xeb5bb505(0x939d9ec01fcd8035c65e6593ca373cf5038952c13ad1040b2fe7dfde52465f11); /* requirePre */ \nc_0xeb5bb505(0xc8a42e1b15e30c1133e35e4170b6f0609e39d01c02c449bd50c913472bd5b1ab); /* statement */ \nrequire(!closed, \"Seed: should not be closed\");c_0xeb5bb505(0xe786ca491dd46670fc2fc944fdde4415efd9d4499a27cd7a4e69e1a39139edf3); /* requirePost */ \n\nc_0xeb5bb505(0x7cfb4f65f8e3ad6ab09f1b889f0ba27d9ed990f061c8a47e2c3284fa6693aa27); /* line */ \n        c_0xeb5bb505(0x6ebdd4afc831d8ed3d5addf5eefd9825689f829a5f91546d101d989bbc0aa559); /* requirePre */ \nc_0xeb5bb505(0x9f8ffbc181d63891a3d7988da6a075b7d0bcf8f6d0c0ea6e1863df6834958b2b); /* statement */ \nrequire(permissionedSeed == true, \"Seed: seed is not whitelisted\");c_0xeb5bb505(0x4a611f1330acf9c94a7709b6057751822555c3be77fbe229a2ec793bf79b9bd8); /* requirePost */ \n\n\nc_0xeb5bb505(0xf64fe3da64a10c4e85d7176fb657b6d8d7a519ab095aa13fc74db08b73074052); /* line */ \n        c_0xeb5bb505(0xb26688f59dc389b04f231a918d76b9be600045b564e479e4d2481b202c2904e4); /* statement */ \nwhitelisted[_buyer] = true;\n    }\n\n    /**\n     * @dev                     Add multiple addresses to whitelist.\n     * @param _buyers           Array of addresses to whitelist addresses in batch\n     */\n    function whitelistBatch(address[] memory _buyers) external onlyAdmin {c_0xeb5bb505(0x69c6b35322844c3453439055fd22b8d35971ded75cb4c5bd10d5fe30e433294d); /* function */ \n\nc_0xeb5bb505(0x241bd6a94d315339e39660847a0cbb47a979d044dedb14ca702f9bb6315c2463); /* line */ \n        c_0xeb5bb505(0xdfff8040232bd90a11d488ba3b50ed2758a48792fb0df228b1d733abce501962); /* requirePre */ \nc_0xeb5bb505(0x1da0b4ec5a091ea28df37ccd98bb28fd9c9b23c18b93e81ab07c13faa08a3961); /* statement */ \nrequire(!closed, \"Seed: should not be closed\");c_0xeb5bb505(0x2c5b55c26bb337cb1ffa884a7c1eb5c01232e804a1fcf1878f2e7d5a6c540e80); /* requirePost */ \n\nc_0xeb5bb505(0x9c716687a47446ac97a91cebb798673498ed1a696c0e2f4676748d720a5669e9); /* line */ \n        c_0xeb5bb505(0x6f40f6b9fe80e47686be359251f288d046e461124c19b39d8ad87a9476372165); /* requirePre */ \nc_0xeb5bb505(0xf1f0f2270a0f6d724f7fcad18e6c6d9acf3780a839a6e42678f55d1b2e55c7b5); /* statement */ \nrequire(permissionedSeed == true, \"Seed: seed is not whitelisted\");c_0xeb5bb505(0x499d4f4ecc14d94a119f4ce66e986531adf4f0eb092d56f6039eab175245112a); /* requirePost */ \n\nc_0xeb5bb505(0x7017c74ada50538b5ee436147d30be03d74277856d5c40c9e979e51db5c417bd); /* line */ \n        c_0xeb5bb505(0x7c50eb9c63b293912f09d53298c5bd6fdcc1edc649c61f486ad25c5f45fd9fe7); /* statement */ \nfor (uint256 i = 0; i < _buyers.length; i++) {\nc_0xeb5bb505(0xaa53ec8f79b20d26180a6389e674cab5ba0aa29d953d0c65f8aac6e96ff8a1ab); /* line */ \n            c_0xeb5bb505(0xfcfaaf390594c5941e7037c1ef7c754cf086260b9e33cee9bcffe6d50fe24c81); /* statement */ \nwhitelisted[_buyers[i]] = true;\n        }\n    }\n\n    /**\n     * @dev                     Remove address from whitelist.\n     * @param buyer             Address which needs to be unwhitelisted\n     */\n    function unwhitelist(address buyer) external onlyAdmin {c_0xeb5bb505(0x19642df5058f05068d8fc64f8d72491341d3080c91385a94cca4ff13081ed16d); /* function */ \n\nc_0xeb5bb505(0x013de7cb441a0f08185b8a57c2003b5aad23d529ccc9caec561e7f6faa683941); /* line */ \n        c_0xeb5bb505(0x1c20a0070d2c80b71341f1e18d75d422e9df8aa08f6bf21346285ea162526f3d); /* requirePre */ \nc_0xeb5bb505(0x18686f00eda3982cfd7e2b4168729628846f2a10b2b601887b98d3c3d348d1e4); /* statement */ \nrequire(!closed, \"Seed: should not be closed\");c_0xeb5bb505(0x91c43d21bb1e7bdfa9857465243682bf2cf919c886b6b16fa1b36f571d29d295); /* requirePost */ \n\nc_0xeb5bb505(0x63786270f9804b0ed00ffb0119a0362d4d86ee7eb70722b8ec279af153e7ad24); /* line */ \n        c_0xeb5bb505(0xb99ec12a7a1bbe693ee38ef5a23f5e95989079023f3f31ff2150fbd978982e5f); /* requirePre */ \nc_0xeb5bb505(0x196f7f69643d697801c421d6b56d55e5717048c995b5d5b7b09364d65aebb5f1); /* statement */ \nrequire(permissionedSeed == true, \"Seed: seed is not whitelisted\");c_0xeb5bb505(0x46cddb3e98fca80d3788fdd85316d77ba0f58b09de63393adaa5fa6ab8eac66e); /* requirePost */ \n\n\nc_0xeb5bb505(0xefe8550df58eaae13a53ad5e19ffaa4507d59f94bc0264ab75648b7c04a0d704); /* line */ \n        c_0xeb5bb505(0x841b6eab91c0b5dfe949cd725730a51a874244d3e45a767bf0a3095cfaab481a); /* statement */ \nwhitelisted[buyer] = false;\n    }\n\n    /**\n     * @dev                     Withdraw funds from the contract\n     */\n    function withdraw() external onlyAdmin {c_0xeb5bb505(0x2a8275781a4cb981be43b3760439f0c492ae913b4234992df396f8fef3dfb48d); /* function */ \n\n        /*\n            Admin can't withdraw funding tokens until buying has ended and\n            therefore contributors can no longer withdraw their funding tokens.\n        */\nc_0xeb5bb505(0x5b39a8f1a65eda3c5656169ba467961e27f3ca1306850de16ba85cdc695352c5); /* line */ \n        c_0xeb5bb505(0xaabfbf0d4b45a6153eb36ec5af7d70ac6304d7151d9bdb1270ab5b1c79cd9a7f); /* requirePre */ \nc_0xeb5bb505(0x34486bb82fb8f3dcb464ca38939f369559f81084407608a60733572e35e2bd87); /* statement */ \nrequire(\n            maximumReached || (minimumReached && block.timestamp >= endTime),\n            \"Seed: cannot withdraw while funding tokens can still be withdrawn by contributors\"\n        );c_0xeb5bb505(0x53ca100b175a98c48e3a5baf25e4310ef143aaced3461e83010721dd1e30adae); /* requirePost */ \n\nc_0xeb5bb505(0x0696025bafb3a0cb3bc10995267c4ef10e2650aecb384d5895f4d16d434c0d98); /* line */ \n        c_0xeb5bb505(0x5464d721ced5d29525d9995a7ccc44ae6fed8620a72a8695fca58bb05cfac895); /* statement */ \nuint256 pendingFundingBalance = fundingCollected - fundingWithdrawn;\nc_0xeb5bb505(0x6d8c2566fbb39fd74397269ef28013ffdbf255f703f8db639caece8b43e660eb); /* line */ \n        c_0xeb5bb505(0x34cc6bbd6d9e33f09e9be9af2b801ccefe7913fafd5f3da9d74356f33bd7b82a); /* statement */ \nfundingWithdrawn = fundingCollected;\nc_0xeb5bb505(0x2261fda31ba5fe4e44a308f6323744bb1ebf84e61e3c27cf3de9061ba744b2c9); /* line */ \n        c_0xeb5bb505(0xeda4f0c2520ba6f37db5f65581d7b8199dfaa44e667bcecd3f1a943855fc3296); /* statement */ \nfundingToken.transfer(msg.sender, pendingFundingBalance);\n    }\n\n    /**\n     * @dev                     Updates metadata.\n     * @param _metadata         Seed contract metadata, that is IPFS Hash\n     */\n    function updateMetadata(bytes memory _metadata) external {c_0xeb5bb505(0xfdbfa09ef104002ebfd19d2375c11a1e417a35edf61360ced8c9416d4dfea04a); /* function */ \n\nc_0xeb5bb505(0x5e28c6182e46366af933d4c4c224a36d9dc0acc9003d4854a7f457834015bffc); /* line */ \n        c_0xeb5bb505(0x709e8263cb50ecf88678ba4506f01172f4f4e2051048d4bcbef66aaa15dae408); /* requirePre */ \nc_0xeb5bb505(0x819ec9b5f89cd6fbcd515cd9c47244c8f1f4dc992d43742dc01e3f9bd34208b9); /* statement */ \nrequire(\n            initialized != true || msg.sender == admin,\n            \"Seed: contract should not be initialized or caller should be admin\"\n        );c_0xeb5bb505(0xe6cf8844274f8b6b0f7ab563193f9ca3d748c753b457078d8f7aabfe8e1634c5); /* requirePost */ \n\nc_0xeb5bb505(0x84ec22b29b68a7eee8d271e2f4e03ce5b114d3da4c022dd2e0a455fc4660fca1); /* line */ \n        c_0xeb5bb505(0xadeab8ece7a9e74d47e4c609d336c564291a5d2c3a71d26da6b2f09b067e4562); /* statement */ \nmetadata = _metadata;\nc_0xeb5bb505(0xd32f21b726e1989b38680e7a905e9639599a09a5b69343d911017fbd64836d96); /* line */ \n        c_0xeb5bb505(0x5106e873a2949f20ff249d653bbbe3d418fe075eaf6a3c845fe24f8ef4b3f7b1); /* statement */ \nemit MetadataUpdated(_metadata);\n    }\n\n    // GETTER FUNCTIONS\n    /**\n     * @dev                     Calculates the maximum claim\n     * @param _funder           Address of funder to find the maximum claim\n     */\n    function calculateClaim(address _funder) public view returns (uint256) {c_0xeb5bb505(0x59fad9501ba44f17fb8933c667a072efd56c86de3c666a13fbf8a82ea21e9e06); /* function */ \n\nc_0xeb5bb505(0x148e8571bfba8a072d53f996a71baac61b786d1cc432c7a6bf7f57a62fd92b95); /* line */ \n        c_0xeb5bb505(0x890df977f69efed6757334d16d7144c5e9186c7e2ffcd73e91c2ee1fd6d50144); /* statement */ \nFunderPortfolio storage tokenFunder = funders[_funder];\n\nc_0xeb5bb505(0xf7a5ee9a6a3d90a9ef2cb8c044777e045ee20743166678a85824755b69cbd542); /* line */ \n        c_0xeb5bb505(0x10a4bba71b653b1ac2f233eb928ed91087d0da43d2abecaaf6f90bbadee2716d); /* statement */ \nif (block.timestamp < vestingStartTime) {c_0xeb5bb505(0x4c7bbc54c5edc33b6b5e4f745bf6f538dfbbf0aec9c62a6519b3c8e322a94582); /* branch */ \n\nc_0xeb5bb505(0x1c64e0d1cbdd7a50b33c7be0fb88210126d3af395712de75e7e080b3250238ac); /* line */ \n            c_0xeb5bb505(0xa0b93e4213834b1b6243711ec2beb92b9e0582c22d2196e946298beb44d3152b); /* statement */ \nreturn 0;\n        }else { c_0xeb5bb505(0xc06af6ef8287e50eb74f902218b06407b713b374b7c07756a768549c242ab7e0); /* branch */ \n}\n\n        // Check cliff was reached\nc_0xeb5bb505(0xab3f66784199878f10851020bdcaf6a77422a4c8e76b3a65c60ea8f8d8aa3dbb); /* line */ \n        c_0xeb5bb505(0x3980e6b26c3ee917143e6cdf8ac1a4ec8d977103c5edad89ccfc50d19d65812b); /* statement */ \nuint256 elapsedSeconds = block.timestamp - vestingStartTime;\n\nc_0xeb5bb505(0x424bbea99e7b67f222eda53054f2e4e565d4760147f52b332408453a5a58db87); /* line */ \n        c_0xeb5bb505(0x4fedc46016256cd63d1fbd9e2a383d7829168ed76b992ae4e63f5c2659d00935); /* statement */ \nif (elapsedSeconds < vestingCliff) {c_0xeb5bb505(0x5f08fc44af172d3681fe5f5207f588637f0b8798c6e80da9e1b2c1e735c7d777); /* branch */ \n\nc_0xeb5bb505(0xcfca57b740c38434dd13eaca8dd3d205ea01e9b2f235d2d2b8848d5d4708c539); /* line */ \n            c_0xeb5bb505(0xd3aef5f7ddfb546a8013fac5817a9e4dedf0713be7710531028b7ef427ad485c); /* statement */ \nreturn 0;\n        }else { c_0xeb5bb505(0x797d44c14e4bac8efe9f964ec672986958748ef0992e262fc00ab3e2f4980d68); /* branch */ \n}\n\n        // If over vesting duration, all tokens vested\nc_0xeb5bb505(0x23fe338173113b1f127eba48492155c8d4d6f497a9a3e01e3c7329f6b23f6f5f); /* line */ \n        c_0xeb5bb505(0xd5e637a17e1d30ca1d7da3c596392d483d140ef79cf8f0b28a0c6a8fb1ed0e85); /* statement */ \nif (elapsedSeconds >= vestingDuration) {c_0xeb5bb505(0x1b2842ab77a3db1dda9640291ef98d2a13752521f725838752976f8d6864b480); /* branch */ \n\nc_0xeb5bb505(0x4ddd56646d62ee87da2f3a431d9189e2fd5a30b5fbe934603afac76ae5a77cae); /* line */ \n            c_0xeb5bb505(0x3326b549d63830f14c8b10f4fe20ee484249fc380297dd1ae75fa65cc8a08f3f); /* statement */ \nreturn seedAmountForFunder(_funder) - tokenFunder.totalClaimed;\n        } else {c_0xeb5bb505(0x2918be53fb32c3a7467b3971539d0af9031308d0dfc66268b2fcf35c9d67210f); /* branch */ \n\nc_0xeb5bb505(0x7e55ac2fafd0385c8e87c41359e01eb6b547e5d25b1c4a3d6fa0f4adf40ae153); /* line */ \n            c_0xeb5bb505(0x375e5b1b88f52b66ec683c16e1edc1fc220d87713f93f8cc750f5c73bdf647c0); /* statement */ \nuint256 amountVested = (elapsedSeconds *\n                seedAmountForFunder(_funder)) / vestingDuration;\nc_0xeb5bb505(0xaf1e0ae40e9699fdb843c418833ff2fd643548406707a6e3e6753e363536024c); /* line */ \n            c_0xeb5bb505(0xf399a8cf44d5ddb10a1fd9d8435d00fbb6d640508eaa6a032ace336058ae7157); /* statement */ \nreturn amountVested - tokenFunder.totalClaimed;\n        }\n    }\n\n    /**\n     * @dev                     Amount of seed tokens claimed as fee\n     */\n    function feeClaimed() public view returns (uint256) {c_0xeb5bb505(0x48eb810bf6c6518b7f2ba098caa5f0706a5429cb8fa0983de7ccf1082778e5be); /* function */ \n\nc_0xeb5bb505(0x232b1c11068bd2b682c6369cd9b2b0ddd8223724c690b672336e08b458340716); /* line */ \n        c_0xeb5bb505(0xb0740c8bd92083b053828643aebd70204cb5b07ad3d8910a505c67cbe8be9dba); /* statement */ \nreturn (seedClaimed * fee) / PRECISION;\n    }\n\n    /**\n     * @dev                     get fee claimed for funder\n     * @param _funder           address of funder to check fee claimed\n     */\n    function feeClaimedForFunder(address _funder)\n        public\n        view\n        returns (uint256)\n    {c_0xeb5bb505(0xe8883520fb037a7ef5f2bfff9713013bc74b60dc4ab4229a9a7b61405dc6449e); /* function */ \n\nc_0xeb5bb505(0x29b1f74ac6fd9aabbc826bb28c76a3c166a57b254ba191846bb418687780b67e); /* line */ \n        c_0xeb5bb505(0x9a22f9906cbcfef3969ae9946a61d0981f2f6be4b4c9c9b36c15a0593bb86400); /* statement */ \nreturn (funders[_funder].totalClaimed * fee) / PRECISION;\n    }\n\n    /**\n     * @dev                     get fee for funder\n     * @param _funder           address of funder to check fee\n     */\n    function feeForFunder(address _funder) public view returns (uint256) {c_0xeb5bb505(0x1a11b8ff2847f6f8d0fdf726e354387457fc7afe47ad8b0f8e7d8b660f222cd0); /* function */ \n\nc_0xeb5bb505(0x68f2c7c1e43781b4654f03d2b271d5133b3ec341d13beb91409bc70723c99adf); /* line */ \n        c_0xeb5bb505(0x7e7b93042dbc7c231789d4b04163b38c6d9d6371738155ce7dc0fc74df335ea8); /* statement */ \nreturn (seedAmountForFunder(_funder) * fee) / PRECISION;\n    }\n\n    /**\n     * @dev                     get seed amount for funder\n     * @param _funder           address of funder to seed amount\n     */\n    function seedAmountForFunder(address _funder)\n        public\n        view\n        returns (uint256)\n    {c_0xeb5bb505(0x0a2fc58e90c24086f5d9fe9e37281327ba916176046b80250d58312b251a67e4); /* function */ \n\nc_0xeb5bb505(0x24c283fc93ff861237c189b3ed5cdf850eca0d4f4f73c45cec15f715bdbb07fb); /* line */ \n        c_0xeb5bb505(0x59e41c9f4d6c0932048b728874bc44ab786b24f7e2c3a1b1c651369644b1258b); /* statement */ \nuint256 precision = 10**_seedTokenDecimal;\nc_0xeb5bb505(0x07edc44dd1b9e7caef6c61ed3118c994a5fcf004892d68b04c31d376551299cf); /* line */ \n        c_0xeb5bb505(0xe86aa76475d6030e11c28c32686687551957615ec6e53b85278ee1f90b5497ba); /* statement */ \nreturn (funders[_funder].fundingAmount * precision) / price;\n    }\n}\n"
    },
    "openzeppelin-contracts-sol8/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/test/PrimeToken.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n// SPDX-License-Identifier: GPL-3.0-or-later\n// solium-disable linebreak-style\n\npragma solidity 0.8.6;\nfunction c_0xeb04d82c(bytes32 c__0xeb04d82c) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/extensions/ERC20Capped.sol\";\n\ncontract PrimeToken is ERC20Capped {\nfunction c_0xf377de82(bytes32 c__0xf377de82) public pure {}\n\n    constructor(\n        uint256 initialSupply,\n        uint256 cap,\n        address genesisMultisig\n    ) public ERC20(\"PrimeDAO Token\", \"PRIME\") ERC20Capped(cap) {c_0xf377de82(0x7107c0a76d738e3d775720a092ff085211821aadd3dde89c677145b89a09b0b0); /* function */ \n\nc_0xf377de82(0x85c0fbb0f5b882f9cd1fef0a2cac958a3a2087fdd93ae17d521d153621bebaa3); /* line */ \n        c_0xf377de82(0xb197b8c9323f794039ff6df77e63b7b3b5995e70ea6f7c7024bff65dfa677c92); /* requirePre */ \nc_0xf377de82(0xc2ae32078bbaf3f91880929b8f0e88bccfa22bc8ef1d2e429ec29408571c1549); /* statement */ \nrequire(initialSupply <= cap);c_0xf377de82(0xd23850b91fe1480bd1af4bebaf626e8c0be782bf2e423c091e008a4d121b7713); /* requirePost */ \n // _mint from ERC20 is not protected\nc_0xf377de82(0x4e00f18243cf2f1343392328146a6e959c29eaf3541451f277922acbedb64b34); /* line */ \n        c_0xf377de82(0x57ea6841ff6a40b65b2e1c7ceb166d8cc0ccac850788b064429eecaf1b2fa71c); /* statement */ \nERC20._mint(genesisMultisig, initialSupply);\n    }\n}\n"
    },
    "contracts/test/ERC20Mock.sol": {
      "content": "// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0xa7e2c9c0(bytes32 c__0xa7e2c9c0) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\nfunction c_0x097b6978(bytes32 c__0x097b6978) public pure {}\n\n    uint256 public constant initialSupply = 20000000000000000000000;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {c_0x097b6978(0xa30421cb41ec140a01425712127055236718dfc0f7dc62153cbbbd1fa6386bd3); /* function */ \n\nc_0x097b6978(0x86fcc5593fff7698c1c77099a57456348d0b195975279673e8f384c9ed877e55); /* line */ \n        c_0x097b6978(0x53b62e173d5ce1e896a44ae76877e4489e4b24c66036c9e45d793383a88cd649); /* statement */ \n_mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/test/CustomERC20Mock.sol": {
      "content": "// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0x311c5823(bytes32 c__0x311c5823) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract CustomERC20Mock is ERC20 {\nfunction c_0x366f9e2f(bytes32 c__0x366f9e2f) public pure {}\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {c_0x366f9e2f(0xbe99175dea67c6f2681c3ceb3e86e908b8ac465798762539d23b55ed51628021); /* function */ \n\nc_0x366f9e2f(0x7d3083f2069e4ab75d5385f1896442a7e7e9fea9e979b82d7c0d002574b85e8f); /* line */ \n        c_0x366f9e2f(0x9521475900816d36a38f800796076c10f8396a25f576993e5074eb24999870c6); /* statement */ \n_balances[msg.sender] += 20000000000000000000000;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {c_0x366f9e2f(0x2d449cc308c8f474efd9b94899879ab6bf1dd6daba60f88d1c1d5d62f2c85244); /* function */ \n\nc_0x366f9e2f(0xe3fbefed46531532e604b968c8a6a6946d93975026ad930c770af17d4e9cf007); /* line */ \n        c_0x366f9e2f(0x4c932f33ba1ae63d0512013f49772475304dbe67532488c54644e7fe7c4d89b8); /* statement */ \nbool success = _customTransfer(_msgSender(), recipient, amount);\nc_0x366f9e2f(0x6d35b0bc703ac675eeffe7abb535b62b95908f4716b41ffb7ffbfa4546fdcfec); /* line */ \n        c_0x366f9e2f(0x20e33446297297dbe4e38bb87107aa485aa6a2d14b2d41c1324b21854e07164f); /* statement */ \nreturn success;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {c_0x366f9e2f(0xaeb73eeefe6e35cc6d5cba50b2c59b8f945dad2b773e2f347fe00c49122abf60); /* function */ \n\nc_0x366f9e2f(0x0bb2534dcd19446a19e56f844d86d4f6ae00a88391260a1c7c9273832cd4528b); /* line */ \n        c_0x366f9e2f(0xf446b9bcf65424ed82636cf5cdcc158704dfaf93f8529eb653d4bad2a6be0d17); /* statement */ \nuint256 currentAllowance = _allowances[sender][_msgSender()];\nc_0x366f9e2f(0x796cefeef14732cb65978eee3e72c2b35ec77ac06b3ec7239bc720a0b1fafc1f); /* line */ \n        c_0x366f9e2f(0xe5247575203d98706fb99ebbfe9038093ad077d65cad83791c0f95f79e6250fa); /* statement */ \nif (currentAllowance < amount) {c_0x366f9e2f(0xcbf9a6a3d593ac36b3d9b1cdcb5a06439d79ec4134a2678596364647be1c8cd0); /* branch */ \n\nc_0x366f9e2f(0x9beb36d9d2d1b553bc8a0283984342ff294847de9d519d0d2177bf0e590af911); /* line */ \n            c_0x366f9e2f(0x5effa06de0422f0031a953de2e73f5eb5c46e03d3678cf33cf4c5937cb82e9e8); /* statement */ \nreturn false;\n        }else { c_0x366f9e2f(0xfaeb60a62120a2e12ea02a7636652bf9b6ffd1ce5323ab0353695fb33951506e); /* branch */ \n}\n\nc_0x366f9e2f(0xc6c9797e1a053b613dbd7709e6e50f447b10f37b42421cecab53b1ee6c695119); /* line */ \n        c_0x366f9e2f(0x51ed611abfada2bac9753a6d1bf7b05214e8fc9f7948590adf0f569796d84864); /* statement */ \nbool success = _customTransfer(sender, recipient, amount);\nc_0x366f9e2f(0xe9ec19188c1e08ce1680a4f30f785a825c09c7b463a1e7bf1d6730f648f264c1); /* line */ \n        c_0x366f9e2f(0x7d50833a3257f8a815155b47ccc133771f72a544d22ee6f45bf0548c117bb3f2); /* statement */ \nif (success) {c_0x366f9e2f(0xf6b460d3f499c905f9ae5d5fdce315292ad5d030578d9ca7419434e7262c170b); /* branch */ \n\n            /* solium-disable */\nc_0x366f9e2f(0xc82cbd43140330aa4bb463fd15d6a3ad530463405fb31f7fb525a4d636f7f116); /* line */ \n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n            /* solium-enable */\n        }else { c_0x366f9e2f(0x9f4b5462787ebb6b965b70c08173df9af23899b3fbc56cde5595e950aebc1943); /* branch */ \n}\nc_0x366f9e2f(0x7d455d81e5ea5abacaad805274e7cf48b9d6fa73dceca0b53b9f6211ed653eba); /* line */ \n        c_0x366f9e2f(0x1b60a3147875c1b2ac0597a625121937c11d3a67036f69a343488e4b0eb9a46c); /* statement */ \nreturn true;\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {c_0x366f9e2f(0xd25b7e91c23b7c7260aca3752d6799caf104caf91d61b93ceb7ae17cb6a563b0); /* function */ \n\nc_0x366f9e2f(0x6b51053202ed0d3c405301896d101bb564ce985e5a6f515580528f1e0b1e8a45); /* line */ \n        c_0x366f9e2f(0x96fda67ea942c12360de6d7c34f5e3ba5af11e24a4b53505bae9dc3bbbee7fb1); /* statement */ \n_approve(_msgSender(), spender, amount);\nc_0x366f9e2f(0x9679f7b5bd4e5ad96b3bdd7b2fe336e4c0a9a979e0cedc44cb0c05c90353b5c8); /* line */ \n        c_0x366f9e2f(0xb78394adada8eb7bd46e6447ce99d830717f2e183145ae3ed9539fbbf1c63c85); /* statement */ \nreturn true;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {c_0x366f9e2f(0x139809e300208e4792859825867a51a3b7e92dfd86289ac4f8c0e559dd26931b); /* function */ \n\nc_0x366f9e2f(0x1d4238bced4236919acafb8a0dea29ce9be5253b63149b28fc9243bd3bcbc601); /* line */ \n        c_0x366f9e2f(0xec724f17716026d5cae2dc79c4cadda647c648c779cc57ca9b2a91f930c87d37); /* statement */ \nreturn _balances[account];\n    }\n\n    function burn(address account) public {c_0x366f9e2f(0x46a4fa2ae3a0c2a5183f31dfe30e5227e3a9d534ac8f6646133e75a446d85324); /* function */ \n\nc_0x366f9e2f(0x1372edea3cb0295078fcba91d35245a30afd833bec798763719f9f94d9f95472); /* line */ \n        c_0x366f9e2f(0x95b3b7eeaef0bee292720900496e6a88aa1abb70ded41024839ed66d20bd50f0); /* statement */ \n_balances[account] = 0;\n    }\n\n    function _customTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual returns (bool) {c_0x366f9e2f(0xe259c1547ae0b29eacac58f03ce0ef55b4e8e81867e2e30eb29de70de1ce625c); /* function */ \n\nc_0x366f9e2f(0x62186e7de7be4529f9a8650828ddd0c7e053b0e2dca790818bd377aec60e294e); /* line */ \n        c_0x366f9e2f(0xdb9a63ea7d36e0c4471d174a34d707c5b1ce93345f15512bc561aaf74e3cac95); /* statement */ \nuint256 senderBalance = _balances[sender];\nc_0x366f9e2f(0x11090bd3c541f58683a8a47499f220320e570239fc169efb1c763e68df9c3f69); /* line */ \n        c_0x366f9e2f(0xa59b0bc6fc5d1b3ac5cb844fdb0e87875d28630a8e8ddde3ad6330d564002e69); /* statement */ \nif (\n            sender == address(0) ||\n            recipient == address(0) ||\n            senderBalance < amount\n        ) {c_0x366f9e2f(0x1f65b0671ea8643779c699bf5f438dab402e4f95a07ee082e9799196e978a339); /* branch */ \n\nc_0x366f9e2f(0xc41b7cfb6afff0c41696f61c2d2685eb0a35308152e2d541d7e1a13af68b7603); /* line */ \n            c_0x366f9e2f(0xad4e20335494ec8a1411e069ad548f462bdf77cf46389433f1e1ccb10b56c5c2); /* statement */ \nreturn false;\n        }else { c_0x366f9e2f(0x9206317129321e54dc6010bb5ce75bc18f6767b92c2c0a43d174e4cd16696c75); /* branch */ \n}\nc_0x366f9e2f(0x46d8f24664da510578c40b192ff48eebc239f5aba87e0d1adcc6b294454f2d29); /* line */ \n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\nc_0x366f9e2f(0xbe1deb59802f52d9d6b3f14e5adfbbc43effcda50bfba1acdc1259ac59aa5c10); /* line */ \n        c_0x366f9e2f(0x0ad69720575af94de621610df59f65eeb13aa4e72359fc1d5021fcff2bf90005); /* statement */ \n_balances[recipient] += amount;\nc_0x366f9e2f(0x96bc98ea7fa122c3b7450112c2aac5493e766933c3b4b3d16828c2d80699ba9c); /* line */ \n        c_0x366f9e2f(0x3a7fdda11f6c26ef2e824647c403bdb768419169f74737196e333d67dcd06954); /* statement */ \nemit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual override {c_0x366f9e2f(0x80655146992b590a5eae26162f0cbf959a5e63330d85a0df55a0933b8ae0452d); /* function */ \n\nc_0x366f9e2f(0xec0d4b731de13602318bb382f1e4072514da0b219d5984b8c4c933dede153467); /* line */ \n        c_0x366f9e2f(0xca87f4fe598b658d8dce8c19853a067595a704a6f8fea97ea4dbf87ecd7e38fd); /* requirePre */ \nc_0x366f9e2f(0x14e79db1137f4270d2c502b2e465131647ce0116110ca81d920162a162741c86); /* statement */ \nrequire(owner != address(0), \"ERC20: approve from the zero address\");c_0x366f9e2f(0x31eda74ad270d80a23b1775f54a67d837e337c93549ac965947401143b852983); /* requirePost */ \n\nc_0x366f9e2f(0x5ffd16f23138bbd3da98f475dc6685916d121b49c192f1ba4f907570db9c9d28); /* line */ \n        c_0x366f9e2f(0xbe8edb3c4ab73aa672ebddd63faa58779fb4fb30f679673fdf576ca87cc74bbf); /* requirePre */ \nc_0x366f9e2f(0x8fa3c7742dfd87fa93af17b1b171ccb231604403e4a8840c988f46e25a65dde9); /* statement */ \nrequire(spender != address(0), \"ERC20: approve to the zero address\");c_0x366f9e2f(0xec36f6d3bc3df81928e1840727adf8a9af292e70a69c3e48396eb8c13720d89b); /* requirePost */ \n\n\nc_0x366f9e2f(0x69a093166c1a5101cc8fb0ecf292128cd8e3a6f2116ff832d8251c3b334ecd18); /* line */ \n        c_0x366f9e2f(0x77dcfbdab4d3b416afbbb80f24ef5b886eb049efb3cfcad7f64235e3d9657b30); /* statement */ \n_allowances[owner][spender] = amount;\nc_0x366f9e2f(0x8e148ace0c0d8f8135953b83365bc2f45aaf8353f4a45817594c26875c85efac); /* line */ \n        c_0x366f9e2f(0x0626181aca14b39d7a675cd981cd670b0b5646170f9b71c24e82a27d4a948163); /* statement */ \nemit Approval(owner, spender, amount);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/test/CustomDecimalERC20Mock.sol": {
      "content": "// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0x72cc6013(bytes32 c__0x72cc6013) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract CustomDecimalERC20Mock is ERC20 {\nfunction c_0x0b1b13ec(bytes32 c__0x0b1b13ec) public pure {}\n\n    uint8 private immutable _decimals;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 decimals_\n    ) ERC20(_name, _symbol) {c_0x0b1b13ec(0x7fb690c6085584e7bad812820b68d1f03c8ba6be52b100876a69ac6a19d76f53); /* function */ \n\nc_0x0b1b13ec(0xf3d21291b0268e471f6a26bad8a6e019ba2c7d6118258894263e83158915c750); /* line */ \n        c_0x0b1b13ec(0x919638019003209d99f1b2d151bdc564752a260bae57ae06403d18414a80a81e); /* statement */ \n_balances[msg.sender] += 20000000000000000000000;\nc_0x0b1b13ec(0x822b10a08a029d4e6d626ef1a1af3689f67294e064a3949c8309041038a2bc79); /* line */ \n        c_0x0b1b13ec(0xf9c9d316948fccfa98dbc34bb0fa7d3950f763fd46e5a2b07679ccbcf0d9a5b3); /* statement */ \n_decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {c_0x0b1b13ec(0xe700a3abbd4daf94569d187f170c37b3985215b6a74fc0fb8959c5152e064bbc); /* function */ \n\nc_0x0b1b13ec(0xe3baa4a250a3a44f496ae6bd87f4815f69f6646f68268a405cc98319a1b9060c); /* line */ \n        c_0x0b1b13ec(0x992feb3997c851b1f59107260ab489572b1c905e9a1da0f13d2baca3506fed30); /* statement */ \nreturn _decimals;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {c_0x0b1b13ec(0xd3cd25e0ad7bec26c0343f8385d54f8cc1d0ce7ca2edfe4ed6e1fa54ff23cf38); /* function */ \n\nc_0x0b1b13ec(0xa5986ff177cc5164d82af673b99416ed29c49fb290a21da2ce956a93c3fef240); /* line */ \n        c_0x0b1b13ec(0xe7fd1970ce58994d2a0555bc464ee300e72a475778687da4930fa7b94a6d08f2); /* statement */ \nbool success = _customTransfer(_msgSender(), recipient, amount);\nc_0x0b1b13ec(0xf5e0e3cd59634cce3695032e65977e1565883928bf8b9fd0659b60d5b76462e8); /* line */ \n        c_0x0b1b13ec(0x7c804c61b16504b50745825b56571230a263d2bc7d9f0b444db28b826bd13936); /* statement */ \nreturn success;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {c_0x0b1b13ec(0x8c0ce36361bf56a72dac91a3bbd6e1337d029b6ed1dc66fef75c6b0b813db6e4); /* function */ \n\nc_0x0b1b13ec(0x4333205bfa46ff8ca00b8634bd6c0c244ee30fe80b28183dbbdb61896816e806); /* line */ \n        c_0x0b1b13ec(0x9a539a6150c577e56090a9acab13cc71100e500fbd48ef2bfe93ca36af4ef51a); /* statement */ \nuint256 currentAllowance = _allowances[sender][_msgSender()];\nc_0x0b1b13ec(0xee7d613d3c1ea3de7ee0fcdec9f7ddb1313273d3562c7a3131b2003c1b0a3471); /* line */ \n        c_0x0b1b13ec(0xc39452dc58691969bea0447d4aa73c54b3d6e5297fe076d188733e7e13b3b674); /* statement */ \nif (currentAllowance < amount) {c_0x0b1b13ec(0xdbe0798e8f19188190e89b0ef6105f028105e4c82546d4e8f3947e2e33d44de4); /* branch */ \n\nc_0x0b1b13ec(0x0dd72e6298c1c8aa82d4b7575c2c48dd5ea43c740f7574f2572897feb53500c6); /* line */ \n            c_0x0b1b13ec(0x3f9c387c3a2eda0b2d65d27c18df7aea67b3fa3b97b535b5e85e8656afdc8c27); /* statement */ \nreturn false;\n        }else { c_0x0b1b13ec(0xe8eb3f9892cd5df2be04f339746af98715b94a29c5428aac6ff0e50dd16deb99); /* branch */ \n}\n\nc_0x0b1b13ec(0x4805e52bad69fca6c775d8e722a9bcff375c12108f5b5b4379e2e0c3480bf094); /* line */ \n        c_0x0b1b13ec(0x92e00935cab003bcedfeef2429dba6f41dfa24670c305b996c55f952e1521c6e); /* statement */ \nbool success = _customTransfer(sender, recipient, amount);\nc_0x0b1b13ec(0x15d0fb67692a3bf07360f6a0484255f5f31971985992eae5d001ff6446978998); /* line */ \n        c_0x0b1b13ec(0x199d0aa45a285cfba8a3ea4aaa5d5d49cb0555682e5d620633d1673e70830f6b); /* statement */ \nif (success) {c_0x0b1b13ec(0x2812f3d2617ede02f3f7e8e83dd4c238cd7de853ae31625182bc327946dcb3e1); /* branch */ \n\n            /* solium-disable */\nc_0x0b1b13ec(0x6755bff184ffdcdb4f806a4a984a4112626b524ab54a4a8dd3ffedb945775266); /* line */ \n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n            /* solium-enable */\n        }else { c_0x0b1b13ec(0x0c20350582ba05eff75c535cc05f64340ed4c88221d1955c91828f2520f254fb); /* branch */ \n}\nc_0x0b1b13ec(0xd36c9d4e5c6fe6cc5263d695a935b980102733ce377a94ef45b7c3dbb4fe2232); /* line */ \n        c_0x0b1b13ec(0x4fb18d02d02d4d1671c5edd983a3395dba5c706c61e3b913858161f30ce9f68b); /* statement */ \nreturn true;\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {c_0x0b1b13ec(0x5d97e35e9106f18207ceb091c2fd9bd933123b79c7bf055bdb7cf7be47d92dfc); /* function */ \n\nc_0x0b1b13ec(0x684dc2951aec69e4adc3afbc29da354c16061d966dc5f741748cb2d2948ce836); /* line */ \n        c_0x0b1b13ec(0xedbf41be3774d0929410fdab933be85899312db0bc0ddefd64239108740da822); /* statement */ \n_approve(_msgSender(), spender, amount);\nc_0x0b1b13ec(0x88f7d762fded5c85371260a4dfc3a4eef35d06bb8e4847118c2f3b5b28f18d3e); /* line */ \n        c_0x0b1b13ec(0x350ce0500c8fa00644da915ea86708ae79dcdac0a9fcb7b83808d93204bb968f); /* statement */ \nreturn true;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {c_0x0b1b13ec(0xe9856999e16d8dd64be8899d9095b61ded28d02d6ecede7304374be591f827b8); /* function */ \n\nc_0x0b1b13ec(0x864bda1a91bd33645cfaf04945e44d9be6de9212b4b35a6ebfc5e5d7eec43cad); /* line */ \n        c_0x0b1b13ec(0xf65dadd5dca15f930325cdd2d19f472cfdb4db3cd53b6b4fd6a864624a98a74f); /* statement */ \nreturn _balances[account];\n    }\n\n    function burn(address account) public {c_0x0b1b13ec(0x0a450e9b31757816c9d6a41d683d449c6056424a51491702d3afbc9b0e130c40); /* function */ \n\nc_0x0b1b13ec(0xab236d486e2d58d9442003791fde80afbeb7e192f3821339001ae1e9ac280705); /* line */ \n        c_0x0b1b13ec(0x2811ee8ebed6e583a37c86fbbc3446254e45341e9dee8843cb72f6cd382d7c08); /* statement */ \n_balances[account] = 0;\n    }\n\n    function _customTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual returns (bool) {c_0x0b1b13ec(0x2c27082c600717d0852a1530a7c30d69663f4e0b553a5f268d34ef178d748039); /* function */ \n\nc_0x0b1b13ec(0xa0ad6a4cbe9fe5b6149ebcdcc960ca2ba41f6f2be3520677c3ee835c25f824dc); /* line */ \n        c_0x0b1b13ec(0x3ef6b645fcdaf7de373cb82e733b626a877b623c728cace46ae31c540a0c1327); /* statement */ \nuint256 senderBalance = _balances[sender];\nc_0x0b1b13ec(0xb3aba6bf33aa3f01b335916132fec27fc19c79a9f57d1492c1ff016d3eb41509); /* line */ \n        c_0x0b1b13ec(0x0848c29d9b0d99f4fed898f42417c63bfae64a4d5a63c8e62f4245a557958fb4); /* statement */ \nif (\n            sender == address(0) ||\n            recipient == address(0) ||\n            senderBalance < amount\n        ) {c_0x0b1b13ec(0xe767422580dfbe36c466a8ca30b905d459e3f4a7d47da274aa68f0156ae472bb); /* branch */ \n\nc_0x0b1b13ec(0x56a2e5aecad1109a5636db034f47d203ba9f6201ded0d7f3abd08f5ee97c1aa9); /* line */ \n            c_0x0b1b13ec(0x42923d9d40b8107a0e2e8eae0b93fb24b45aeb4b415d5488758a942d9a91c594); /* statement */ \nreturn false;\n        }else { c_0x0b1b13ec(0x1f992e809b6badebfb350bc1c54e87f0afa9b552af42b0573eaaf5868774c87f); /* branch */ \n}\nc_0x0b1b13ec(0xf4d58940e2a4987a649526bbf838ad1eb58be6d43d75077b4ac8f0d46fa3d173); /* line */ \n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\nc_0x0b1b13ec(0x57a7528efeb22da69054cc49e595f59dfd9c8e9a0fe6146ada7c1a2e31ebe5ce); /* line */ \n        c_0x0b1b13ec(0xdd915ff902b11c4902afb5e9aeff3045b3ddfdc8b89b18eea7ee970e0fbeed18); /* statement */ \n_balances[recipient] += amount;\nc_0x0b1b13ec(0xdafab97b062a55e8215e607f3bcf78aea7ae9c4236f50086daf4f0fe797807de); /* line */ \n        c_0x0b1b13ec(0x7ec37e378fde82082adeef35692158c9391e9c0c771e4aee1c8a86bce2a3625b); /* statement */ \nemit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual override {c_0x0b1b13ec(0xf28afb334484a7650a2bc68c93005573cfa83b59711a8062addd7e2cb697e4ba); /* function */ \n\nc_0x0b1b13ec(0xebd6c09bbcb42cccc152b6269940ded0e9dc45a2e566ec7a3abe3040e6f1a3b1); /* line */ \n        c_0x0b1b13ec(0x2a2fd00754bd9aa591831c75905182aef715f3d89c751c367ce1e680cee6637b); /* requirePre */ \nc_0x0b1b13ec(0x3835675b2daefb116cd408a0da93009e1d900c91cb97f8d8d39ea207f6386af8); /* statement */ \nrequire(owner != address(0), \"ERC20: approve from the zero address\");c_0x0b1b13ec(0x47995e32a8a333778c65c31a4b5ae37fe9628ea678ad99517cbd63184ef9380a); /* requirePost */ \n\nc_0x0b1b13ec(0xbe8646d7372ced167a6a7f9e43c6ee06d00922fcfa5ef3a9addd2c14b7e1565b); /* line */ \n        c_0x0b1b13ec(0x338652dd6d7fa9167021a781ffaf0493081299b74d88f2ee2398670f721c5b81); /* requirePre */ \nc_0x0b1b13ec(0x62e443fdb45bb9ac8644eb4104495522c92578c10f9dc857694558ed39ce7bef); /* statement */ \nrequire(spender != address(0), \"ERC20: approve to the zero address\");c_0x0b1b13ec(0xeabdeb8ac872bf65a578803246a353cedbcf37824c0d62a576e80b2d93b352f0); /* requirePost */ \n\n\nc_0x0b1b13ec(0x7502c195644806a87886a2acab8edd61ade2347b6c675bd71972b18a4c621671); /* line */ \n        c_0x0b1b13ec(0xc6e15b11d5a94655bff5ef43235bf3d0c0c677127338566144fcc5c5865069e0); /* statement */ \n_allowances[owner][spender] = amount;\nc_0x0b1b13ec(0x100382f2ea31b3b6fbd5d4910b6eb171a12d1b77f8ad6e176da6a06238f209ca); /* line */ \n        c_0x0b1b13ec(0x519afe95f0d28a02729aa043475a8162428ca5bf61cec30aad85b8de984d4d16); /* statement */ \nemit Approval(owner, spender, amount);\n    }\n}\n"
    },
    "contracts/Reputation.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n// SPDX-License-Identifier: GPL-3.0-or-later\n// solium-disable linebreak-style\n\npragma solidity 0.8.6;\nfunction c_0x5b4a33de(bytes32 c__0x5b4a33de) pure {}\n\n\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\nimport \"openzeppelin-contracts-sol8/access/Ownable.sol\";\n\n/**\n * @title PrimeDAO Reputation contract\n * @dev   Reputation is a non-transferable ERC20 token used for PrimeDAO Governance.\n */\ncontract Reputation is ERC20, Ownable {\nfunction c_0xa03084e6(bytes32 c__0xa03084e6) public pure {}\n\n    modifier validInput(\n        address[] memory _repRecipients,\n        uint256[] memory _repAmounts\n    ) {c_0xa03084e6(0x31498b61f9e417f54e6adbed93101da81c846aba17f3a0a4b68728bc4c1c9442); /* function */ \n\nc_0xa03084e6(0xeeb21d42059cff82e5755a6ed0f44b001295d2d6ef52b05f49465c212c7d7040); /* line */ \n        c_0xa03084e6(0xe95587231102a61b22f3d27d2f03149a6785ee06234d9d82b0c4dbec5e2579a9); /* requirePre */ \nc_0xa03084e6(0x684365a97b365defb36d363d6489de63e1d5eb0ffc5bac3e631d2fc9f2eb871f); /* statement */ \nrequire(\n            _repRecipients.length == _repAmounts.length,\n            \"Reputation: number of reputation holders doesn't match number of reputation amounts\"\n        );c_0xa03084e6(0x8c94f1cc91b8f26da14583fa523466ac79b605d56eaa9ab4457143ff56d94822); /* requirePost */ \n\nc_0xa03084e6(0x875ef34f09a5f1dd4c5855a6555568d633c65885c87206a3cca8c2a92a605a52); /* line */ \n        c_0xa03084e6(0x109e8acd176012176c74320e35699295db835b0946f09b8835d10b65a92b6ebb); /* requirePre */ \nc_0xa03084e6(0xd4ef3a64b8dab0904178d0f5be653e67e84911780007105b14a4327685292039); /* statement */ \nrequire(\n            _repRecipients.length <= 200,\n            \"Reputation: maximum number of reputation holders and amounts of 200 was exceeded\"\n        );c_0xa03084e6(0x7c990d58d8c78db21feb159e51c0cf55c62072c3b02df8f44ffa68d030e33129); /* requirePost */ \n\nc_0xa03084e6(0x4c6f0204b88a499af5e4f4a5602385cb420e8ecb9d7c0d06ef3b2d098b10ddda); /* line */ \n        _;\n    }\n\n    /**\n     * @dev                  Reputation constructor function.\n     */\n    constructor(string memory _tokenName, string memory _tokenSymbol)\n        ERC20(_tokenName, _tokenSymbol)\n    {c_0xa03084e6(0xe5312980ef7ab05bc69375a1f9eb8f13781071b1b04a53a692c1aa17df81c96c); /* function */ \n}\n\n    /**\n     * @dev  Overrides standard ERC20 transfer function, to make tokens non-trasferable.\n     * @param recipient     unused parameter.\n     * @param amount        unused parameter.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        pure\n        override\n        returns (bool)\n    {c_0xa03084e6(0x4f87a5d0b545ee36395f97c5bf07d91dba80cfd0588ab6caf3513915fb694d68); /* function */ \n\nc_0xa03084e6(0x25391fbef345f8f5b7c7b696e8c32d62cf7f9c54ad10d9c940d28b0105cf45c4); /* line */ \n        c_0xa03084e6(0x9c3af2deda810698f35703f6971977ae654d3cfaa47ab4fde02d90f4f495b84f); /* statement */ \nreturn false;\n    }\n\n    /**\n     * @dev                 Overrides standard ERC20 transferFrom function, to make tokens non-trasferable.\n     * @param sender        unused parameter.\n     * @param recipient     unused parameter.\n     * @param amount        unused parameter.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public pure override returns (bool) {c_0xa03084e6(0x3b635ba57a779bba1518d632e631adc76b5ff4a48ad595617aae5294dba38186); /* function */ \n\nc_0xa03084e6(0x4c3e6a6d88af280461796ea3c245a6bc94ad6a7c4ff146ccc785c9e3e39ae99c); /* line */ \n        c_0xa03084e6(0x85183c3bc2a7c61783f54509f64767558e75a039c198cf2adef87da6edec3b2a); /* statement */ \nreturn false;\n    }\n\n    /**\n     * @dev                  Mints reputation to a given address.\n     * @param _repRecipient  adress that rep is being minted to.\n     * @param _repAmount     amount of reputation to be minted.\n     */\n    function mint(address _repRecipient, uint256 _repAmount) public onlyOwner {c_0xa03084e6(0x884b10362c1c40d0eb9599673669e585db3b48cf7f0c3bcd51dfe411e3896af4); /* function */ \n\nc_0xa03084e6(0xcb96b31b41e311e17132f4a28982173c6dd472c6a921b5a742f93612ba65f117); /* line */ \n        c_0xa03084e6(0xc8695fb1b06e71c1ec5764b0908b750c74428e7cf3643f285babd68d75cb349f); /* statement */ \nERC20._mint(_repRecipient, _repAmount);\n    }\n\n    /**\n     * @dev                   Mints reputation for multiple adresses.\n     * @param _repRecipients  an array of adresses that rep is being minted to.\n     * @param _repAmounts     an array of amounts of reputation to be minted.\n     */\n    function batchMint(\n        address[] memory _repRecipients,\n        uint256[] memory _repAmounts\n    ) public onlyOwner {c_0xa03084e6(0x16da226c0f23cd02dd17779c914c1d6b4798f8c7f55cab6c041006cfeb86faf4); /* function */ \n\nc_0xa03084e6(0x5288418b737723f2e62469fcde550541b6dbf68df0d79ccf3caf898b29d1c2c6); /* line */ \n        c_0xa03084e6(0x97e5291e608f6a31d61d4255e212f79916c6e7c537d05e32e7c0aa7d2f8ef2ed); /* statement */ \n_batchMint(_repRecipients, _repAmounts);\n    }\n\n    /**\n     * @dev                  Burns reputation of a given address.\n     * @param _repRecipient  adress that's rep is being burned.\n     * @param _repAmount     amount of reputation to be burned.\n     */\n    function burn(address _repRecipient, uint256 _repAmount) public onlyOwner {c_0xa03084e6(0xf0c4cb5db83b17c30b5fc0271085e204ce9cba99e35a0906ec32066b209ec80d); /* function */ \n\nc_0xa03084e6(0x33db4f84ad157545c99535e9bdfe64055a52643e48506b9c43cfa9bcd6aa9d24); /* line */ \n        c_0xa03084e6(0x85c6e8dddc10906f9b99a3dd004642d1b01cc46189c4773c32d31e8c1ec70707); /* statement */ \nERC20._burn(_repRecipient, _repAmount);\n    }\n\n    /**\n     * @dev                   Burns reputation of multiple adresses.\n     * @param _repRecipients  an array of adresses that's rep is being burned.\n     * @param _repAmounts     an array of amounts of reputation to be burned.\n     */\n    function batchBurn(\n        address[] memory _repRecipients,\n        uint256[] memory _repAmounts\n    ) public onlyOwner {c_0xa03084e6(0x186e4736e273cea8e774fcf94882dc906da09d0c27f97b235a987686fc8d37c5); /* function */ \n\nc_0xa03084e6(0xb1df1cff0176e312a6e86ddf18a5558499ac94f7385e2b0b7ec99785e891cc57); /* line */ \n        c_0xa03084e6(0x3d4809b6edbe200e39eb09ca80a5330dd8003851ae7bab52c350e4e5408d8f6d); /* statement */ \n_batchBurn(_repRecipients, _repAmounts);\n    }\n\n    // HELPER FUNCTIONS\n\n    function _batchMint(\n        address[] memory _repRecipients,\n        uint256[] memory _repAmounts\n    ) internal validInput(_repRecipients, _repAmounts) {c_0xa03084e6(0x609715f954ee3cab178038fe2f1293d3623e557bb997adaa97b2b9160cb63fdf); /* function */ \n\nc_0xa03084e6(0xebd5420b3f577e2c6c553e66c7869192bdbb1d80d4051c536e663bad28e31780); /* line */ \n        c_0xa03084e6(0x55ebcabcc4990b699c70bd65d5794aa8e64b70c2ee6d44f23ea7feb6720eaf89); /* statement */ \nfor (uint64 j = 0; j < _repAmounts.length; j++) {\nc_0xa03084e6(0x34635b51ec5200376fbcbb3856d9e40440545b60b32a67f0b9caedf807c82324); /* line */ \n            c_0xa03084e6(0xa44f35690051fe14e1fcceb8d6fc104d6e105c28d91c158977620a14b9573687); /* statement */ \nERC20._mint(_repRecipients[j], _repAmounts[j]);\n        }\n    }\n\n    function _batchBurn(\n        address[] memory _repRecipients,\n        uint256[] memory _repAmounts\n    ) internal validInput(_repRecipients, _repAmounts) {c_0xa03084e6(0x4a2aecc0e2e9874cda471d2aa7a9ec7a59a3b6c73148ee34c72d70a199a7e33f); /* function */ \n\nc_0xa03084e6(0x9857d5b8dd4beb19c89f21d71597a098014925639472c3f10436be2448859780); /* line */ \n        c_0xa03084e6(0x6d02a238438a5887d2c6cd11aa0cd6e32eae0ddd6e1a3c0918853a3f7d672aa8); /* statement */ \nfor (uint64 j = 0; j < _repAmounts.length; j++) {\nc_0xa03084e6(0x0c391aa9537962b76fe6c049c4cf8a0ea8c87d82b2c4ef8584ff63bd069a6f7b); /* line */ \n            c_0xa03084e6(0x65a62fb492c7db7bcef14925683c190d2e25a6644b4dc429fb51fee7101c18c7); /* statement */ \nERC20._burn(_repRecipients[j], _repAmounts[j]);\n        }\n    }\n}\n"
    },
    "contracts/test/Imports.sol": {
      "content": "// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0xcc277211(bytes32 c__0xcc277211) pure {}\n\n\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\";\n"
    },
    "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./base/ModuleManager.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\nimport \"./common/EtherPaymentFallback.sol\";\nimport \"./common/Singleton.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./common/StorageAccessible.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/GnosisSafeMath.sol\";\n\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafe is\n    EtherPaymentFallback,\n    Singleton,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    GuardManager\n{\n    using GnosisSafeMath for uint256;\n\n    string public constant VERSION = \"1.3.0\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\n\n    uint256 public nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\n    constructor() {\n        // By setting the threshold it is not possible to call setup anymore,\n        // so we create a Safe with 0 owners and threshold 1.\n        // This is an unusable Safe, perfect for the singleton\n        threshold = 1;\n    }\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    /// @param to Contract address for optional delegate call.\n    /// @param data Data payload for optional delegate call.\n    /// @param fallbackHandler Handler for fallback calls to this contract\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\n    /// @param payment Value that should be paid\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\n    ///      Note: The fees are always transferred, even if the user transaction fails.\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Gas price that should be used for the payment calculation.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            bytes memory txHashData =\n                encodeTransactionData(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    nonce\n                );\n            // Increase nonce and execute transaction.\n            nonce++;\n            txHash = keccak256(txHashData);\n            checkSignatures(txHash, txHashData, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            require(success || safeTxGas != 0 || gasPrice != 0, \"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            require(receiver.send(payment), \"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            require(transferToken(gasToken, receiver, payment), \"GS012\");\n        }\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) public view {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        require(_threshold > 0, \"GS001\");\n        checkNSignatures(dataHash, data, signatures, _threshold);\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= requiredSignatures.mul(65), \"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= requiredSignatures.mul(65), \"GS021\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"GS022\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v - 4, r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /// @dev Allows to estimate a Safe transaction.\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\n    function requiredTxGas(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (uint256) {\n        uint256 startGas = gasleft();\n        // We don't provide an error message here, as we use it to return the estimate\n        require(execute(to, value, data, operation, gasleft()));\n        uint256 requiredGas = startGas - gasleft();\n        // Convert response to string and return via error message\n        revert(string(abi.encodePacked(requiredGas)));\n    }\n\n    /**\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external {\n        require(owners[msg.sender] != address(0), \"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    /// @dev Returns the chain id used by this contract.\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    function domainSeparator() public view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n    }\n\n    /// @dev Returns the bytes that are hashed to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Gas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash bytes.\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes memory) {\n        bytes32 safeTxHash =\n            keccak256(\n                abi.encode(\n                    SAFE_TX_TYPEHASH,\n                    to,\n                    value,\n                    keccak256(data),\n                    operation,\n                    safeTxGas,\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    _nonce\n                )\n            );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    /// @dev Returns hash to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash.\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./GnosisSafeProxy.sol\";\nimport \"./IProxyCreationCallback.sol\";\n\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract GnosisSafeProxyFactory {\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param singleton Address of singleton contract.\n    /// @param data Payload for message call sent to new proxy contract.\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\n        proxy = new GnosisSafeProxy(singleton);\n        if (data.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, singleton);\n    }\n\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n    function proxyRuntimeCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).runtimeCode;\n    }\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n    function proxyCreationCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).creationCode;\n    }\n\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\n    ///      This method is only meant as an utility to be called from other methods\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function deployProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) internal returns (GnosisSafeProxy proxy) {\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n    }\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) public returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        if (initializer.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, _singleton);\n    }\n\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\n    function createProxyWithCallback(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce,\n        IProxyCreationCallback callback\n    ) public returns (GnosisSafeProxy proxy) {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\n    }\n\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function calculateCreateProxyWithNonceAddress(\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        revert(string(abi.encodePacked(proxy)));\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"./Executor.sol\";\n\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract ModuleManager is SelfAuthorized, Executor {\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    function setupModules(address to, bytes memory data) internal {\n        require(modules[SENTINEL_MODULES] == address(0), \"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0))\n            // Setup has to complete successfully or transaction fails.\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \"GS000\");\n    }\n\n    /// @dev Allows to add a module to the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Enables the module `module` for the Safe.\n    /// @param module Module to be whitelisted.\n    function enableModule(address module) public authorized {\n        // Module address cannot be null or sentinel.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        // Module cannot be added twice.\n        require(modules[module] == address(0), \"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    /// @dev Allows to remove a module from the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Disables the module `module` for the Safe.\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) public authorized {\n        // Validate module address and check that it corresponds to module index.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        require(modules[prevModule] == module, \"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n        // Execute transaction without further confirmations.\n        success = execute(to, value, data, operation, gasleft());\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        address currentModule = modules[start];\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = currentModule;\n            currentModule = modules[currentModule];\n            moduleCount++;\n        }\n        next = currentModule;\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract FallbackManager is SelfAuthorized {\n    event ChangedFallbackHandler(address handler);\n\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    function internalSetFallbackHandler(address handler) internal {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, handler)\n        }\n    }\n\n    /// @dev Allows to add a contract to handle fallback calls.\n    ///      Only fallback calls without value and with data will be forwarded.\n    ///      This can only be done via a Safe transaction.\n    /// @param handler contract to handle fallbacks calls.\n    function setFallbackHandler(address handler) public authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\n\ninterface Guard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract GuardManager is SelfAuthorized {\n    event ChangedGuard(address guard);\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /// @dev Set a guard that checks transactions before execution\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\n    function setGuard(address guard) external authorized {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, guard)\n        }\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            guard := sload(slot)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract EtherPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /// @dev Fallback function accepts Ether transactions.\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract Singleton {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n    // It should also always be ensured that the address is stored alone (uses a full word)\n    address private singleton;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SignatureDecoder {\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\n    /// @param signatures concatenated rsv signatures\n    function signatureSplit(bytes memory signatures, uint256 pos)\n        internal\n        pure\n        returns (\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        )\n    {\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            // Here we are loading the last 32 bytes, including 31 bytes\n            // of 's'. There is no 'mload8' to do this.\n            //\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SecuredTokenTransfer - Secure token transfer\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SecuredTokenTransfer {\n    /// @dev Transfers a token and returns if it was a success\n    /// @param token Token that should be transferred\n    /// @param receiver Receiver to whom the token should be transferred\n    /// @param amount The amount of tokens that should be transferred\n    function transferToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n                case 0 {\n                    transferred := success\n                }\n                case 0x20 {\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\n                }\n                default {\n                    transferred := 0\n                }\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\ncontract StorageAccessible {\n    /**\n     * @dev Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegetecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n\n            mstore(0x00, success)\n            mstore(0x20, returndatasize())\n            returndatacopy(0x40, 0, returndatasize())\n            revert(0, add(returndatasize(), 0x40))\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _data Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title GnosisSafeMath\n * @dev Math operations with safety checks that revert on error\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\n * TODO: remove once open zeppelin update to solc 0.5.0\n */\nlibrary GnosisSafeMath {\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\n\n/// @title Executor - A contract that can execute transactions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Executor {\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n/// @author Richard Meissner - <richard@gnosis.io>\ninterface IProxy {\n    function masterCopy() external view returns (address);\n}\n\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeProxy {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n    address internal singleton;\n\n    /// @dev Constructor function sets address of singleton contract.\n    /// @param _singleton Singleton address.\n    constructor(address _singleton) {\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        singleton = _singleton;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    fallback() external payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n                mstore(0, _singleton)\n                return(0, 0x20)\n            }\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"./GnosisSafeProxy.sol\";\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafeProxy proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}\n"
    },
    "contracts/utils/SignerV2.sol": {
      "content": "/*\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0xb8140145(bytes32 c__0xb8140145) pure {}\n\n\nimport \"./interface/Safe.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\";\n\n/**\n * @title PrimeDAO Signer Contract\n * @dev   Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.\n */\ncontract SignerV2 is ISignatureValidator {\nfunction c_0xf4230dcd(bytes32 c__0xf4230dcd) public pure {}\n\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\n        0x7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35;\n    bytes32 private constant MSG_TYPEHASH =\n        0xa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d; // mapping for msg typehash\n\n    mapping(bytes32 => bytes32) public approvedSignatures;\n\n    /* solium-disable */\n    address public safe;\n    mapping(address => mapping(bytes4 => bool)) public allowedTransactions;\n    /* solium-enable */\n\n    event SignatureCreated(bytes signature, bytes32 indexed hash);\n\n    modifier onlySafe() {c_0xf4230dcd(0xaebb09ca5798e53a5652f201455c61ab869ff40c89194e3098d23caa82502875); /* function */ \n\nc_0xf4230dcd(0xc372164b63a05f33aea93304a7e9e098b7fd9a827dc38d72f41527c08f27c2b3); /* line */ \n        c_0xf4230dcd(0xd2944fcde548aab8995d63b5ca5b42c4122f2dcd67bcbc7433031b31cc570d76); /* requirePre */ \nc_0xf4230dcd(0xf3786218598479531f20b2bdcd6e1ec816d6e5ff383431c49af85750de490ef1); /* statement */ \nrequire(msg.sender == safe, \"Signer: only safe functionality\");c_0xf4230dcd(0x881b9b2e8236464743efe1e261b9b58cbdb90edadbbd6ee070f5a2fed2b7f447); /* requirePost */ \n\nc_0xf4230dcd(0xfa7a74fce98c94c40616b3d7a1bcf9cf15b332246bd56c49ba43c12cfaa3e4b4); /* line */ \n        _;\n    }\n\n    /**\n     * @dev                       Signer Constructor\n     * @param _safe               Gnosis Safe address.\n     * @param _contracts          array of contract addresses\n     * @param _functionSignatures array of function signatures\n     */\n    constructor(\n        address _safe,\n        address[] memory _contracts,\n        bytes4[] memory _functionSignatures\n    ) {c_0xf4230dcd(0xaa9d86aeaae5c878af742323d6d92e2b0768d3d8ed6ccad059c41835717245c1); /* function */ \n\nc_0xf4230dcd(0x1a1e5645b42e0950479ce42fa1bef31cf4355a256076f3b85e66542bc1ed617c); /* line */ \n        c_0xf4230dcd(0xfae2aead76736ef30179709ddd89412644ab6f4ec4735ce5c20887bb871d232e); /* requirePre */ \nc_0xf4230dcd(0x5dba2efb9fb7b5d1fef4ed799d78638cdbfcec10ddb4373fe9be90b3715aaefe); /* statement */ \nrequire(_safe != address(0), \"Signer: Safe address cannot be zero\");c_0xf4230dcd(0xcbe2c199c60463e1f0d223506d85a3d2726ae9cbfa7c62f2ef3d0164d986635c); /* requirePost */ \n\nc_0xf4230dcd(0x579d185eac260c4e988812bb9728153379b155d9e4d64a1b42742530785cab69); /* line */ \n        c_0xf4230dcd(0x65e4f3f31322d073542858905288dc1a64eeea5a331fa0017b75180834157a81); /* statement */ \nsafe = _safe;\nc_0xf4230dcd(0x312c1d73d845da4380a1526a70cc09a1e82206f49b07f05af0106ec7bc5c80b2); /* line */ \n        c_0xf4230dcd(0x79ea1bab445e2b38027b15e62249b0afc0512a3710651dc55de2e556d9a9a423); /* statement */ \nfor (uint256 i; i < _contracts.length; i++) {\nc_0xf4230dcd(0x196c11779c90a90d008df61c041e77476b6bfee6d24ba0c00786041bb2854569); /* line */ \n            c_0xf4230dcd(0x995ad2943cc371a99b8df1ea3258c64367d774e9003cd9427ebe1b22fa741b8f); /* statement */ \nallowedTransactions[_contracts[i]][_functionSignatures[i]] = true;\n        }\n    }\n\n    /**\n     * @dev                   Signature generator\n     * @param _to             receiver address.\n     * @param _value          value in wei.\n     * @param _data           encoded transaction data.\n     * @param _operation      type of operation call.\n     * @param _safeTxGas      safe transaction gas for gnosis safe.\n     * @param _baseGas        base gas for gnosis safe.\n     * @param _gasPrice       gas price for gnosis safe transaction.\n     * @param _gasToken       token which gas needs to paid for gnosis safe transaction.\n     * @param _refundReceiver address account to receive refund for remaining gas.\n     * @param _nonce          gnosis safe contract nonce.\n     */\n    function generateSignature(\n        address _to,\n        uint256 _value,\n        bytes calldata _data,\n        Enum.Operation _operation,\n        uint256 _safeTxGas,\n        uint256 _baseGas,\n        uint256 _gasPrice,\n        address _gasToken,\n        address _refundReceiver,\n        uint256 _nonce\n    ) external returns (bytes memory signature, bytes32 hash) {c_0xf4230dcd(0x13ee74591274d0e003df5c66228d6b2d0d3009604296ff35f6b9282c4f82eec7); /* function */ \n\n        // check if transaction parameters are correct\nc_0xf4230dcd(0x5b8ec059854dbb1166a514d5ac95904189c6cbf6339115a863c89dd4dee3d9ca); /* line */ \n        c_0xf4230dcd(0x833b3cca2944b49d67a1060d9f257d86e480f94b52c9c72ff1f4123c6d66a8d7); /* requirePre */ \nc_0xf4230dcd(0xb56f10e3c36bbfa67f522be6424f6f131ffd0955cc2b53323924d0f53bf4d824); /* statement */ \nrequire(\n            allowedTransactions[_to][_getFunctionHashFromData(_data)],\n            \"Signer: can only sign calls to approved contract function\"\n        );c_0xf4230dcd(0xa53835965b09f3ece0cc8c938f92fcbecfbaa78da337e14f39cfbc822fd54592); /* requirePost */ \n\nc_0xf4230dcd(0x0266ff0f8aa8a0b425807bafc6cea70ea47f60d3cfd3a167c079308f596cd979); /* line */ \n        c_0xf4230dcd(0xcd706cec1691319e735ddc954990738e67b275075aa19aac4a876e006c911830); /* requirePre */ \nc_0xf4230dcd(0x3c0f3c48777509b6448677d4302c19122432fef54f3b258ac7dbc801f7870af9); /* statement */ \nrequire(\n            _value == 0 &&\n                _refundReceiver == address(0) &&\n                _operation == Enum.Operation.Call,\n            \"Signer: invalid arguments provided\"\n        );c_0xf4230dcd(0xfdb7e86ec13bc092c73fdd0ecfecbfcdaf6243092b4adb53d0f7a47f5df1f161); /* requirePost */ \n\n\n        // get contractTransactionHash from gnosis safe\nc_0xf4230dcd(0xccf293e7952a8d1f1e030274a8b0d0a08af4544cfae02eac44f3a43290425bb4); /* line */ \n        c_0xf4230dcd(0xe36578827f06bc39bbdbaf2fc63071d81865af4ac22a22f2ed28d117515f0c50); /* statement */ \nhash = Safe(safe).getTransactionHash(\n            _to,\n            0,\n            _data,\n            _operation,\n            _safeTxGas,\n            _baseGas,\n            _gasPrice,\n            _gasToken,\n            _refundReceiver,\n            _nonce\n        );\n\nc_0xf4230dcd(0x4861eec575ab8893dfadeab557de9e367547c480e8274b93b34f7f001fa4cc05); /* line */ \n        c_0xf4230dcd(0x3dd5607065738ffacb2710ddafbdb3a01088830ca8af0b4b2f4f00d3390cda3f); /* statement */ \nbytes memory paddedAddress = bytes.concat(\n            bytes12(0),\n            bytes20(address(this))\n        );\nc_0xf4230dcd(0x03904e54170b7331900e931f4a841e2c034de14b6eec1674aba5a7241d7d5388); /* line */ \n        c_0xf4230dcd(0x6b989d73be06d2bcdefc1b334214cf1e5fbf30adef9035b9df4fd9b6e4b950b4); /* statement */ \nbytes memory messageHash = _encodeMessageHash(hash);\n        // check if transaction is not signed before\nc_0xf4230dcd(0xc1c703a856a770ec07c65e1b88332f272b8902d393ec30341645fbaae830da44); /* line */ \n        c_0xf4230dcd(0x6a31570fdb6338425a42389f4d3fe4de3f3cff474af08d54d6b30c4ffe84ca06); /* requirePre */ \nc_0xf4230dcd(0x1c0d7cc0766fb20b5879bb4797f2eb4c7321f76541ad5dfb467a5af5229eb634); /* statement */ \nrequire(\n            approvedSignatures[hash] != keccak256(messageHash),\n            \"Signer: transaction already signed\"\n        );c_0xf4230dcd(0x110904ceec7203d5c49c896c346a2489a1b41a8f24c97aace4db57643229f574); /* requirePost */ \n\n\n        // generate signature and add it to approvedSignatures mapping\nc_0xf4230dcd(0x461909c8e87c0d30c4452162e0a2e097545bf962492714f8dae71a9a6b3b0827); /* line */ \n        c_0xf4230dcd(0x0c7e90e78a3ba9f4ed130d5bab47bf9bad804762abe77322b5d3a9ece45f6632); /* statement */ \nsignature = bytes.concat(\n            paddedAddress,\n            bytes32(uint256(65)),\n            bytes1(0),\n            bytes32(uint256(messageHash.length)),\n            messageHash\n        );\nc_0xf4230dcd(0xbd48bbb5a9adfae5218b738e189ffa8ab9e70681ba48717414c4742ec5ce60f8); /* line */ \n        c_0xf4230dcd(0xc4b3d6cc2312ce4ee308f1293250b70d00353b831b91423d12e34402717aa450); /* statement */ \napprovedSignatures[hash] = keccak256(messageHash);\nc_0xf4230dcd(0x27d308ededfbc5c108ef1a9867432dcc87cef393b35cd72d9ec1aa803d3805ae); /* line */ \n        c_0xf4230dcd(0x68b40a138b5f0982026becb92b93a7dfacca76e810a05bad0f4a9b0890304e4f); /* statement */ \nemit SignatureCreated(signature, hash);\n    }\n\n    /**\n     * @dev                Validate signature using EIP1271\n     * @param _data        Encoded transaction hash supplied to verify signature.\n     * @param _signature   Signature that needs to be verified.\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature)\n        public\n        view\n        override\n        returns (bytes4)\n    {c_0xf4230dcd(0x2d5c53007eefc7d813e536c6a2922f2637fd09a1665bde096491ddada0f8d3b2); /* function */ \n\nc_0xf4230dcd(0x91740a472756213b7e9b6dab50d521868227dd0a7fc6e40e16f35df53bdcb5f5); /* line */ \n        c_0xf4230dcd(0xccbfc24db9c64647df24764861345a9a9c91ca2022df8819ddcfc5752276f7f2); /* statement */ \nif (_data.length == 32) {c_0xf4230dcd(0x01d8b7f91489ac76679a12f8bb0bb65f8768a22ecdd6c54e428ac2c1f68b62cd); /* branch */ \n\nc_0xf4230dcd(0x0a5bfdb0b94010f6e62f8764c8b9e278a7fb4b3c81295296080e2baff2f58c65); /* line */ \n            c_0xf4230dcd(0x074db5671f05a92b4857737edc56c6a17b0cb80fe0dc4448184926fe9833f049); /* statement */ \nbytes32 hash;\nc_0xf4230dcd(0xa4b445657e9a580ac567d290ffeb435bf19d7da9bafd4c8be1b4802536c6fd5f); /* line */ \n            assembly {\n                hash := mload(add(_data, 32))\n            }\nc_0xf4230dcd(0x070ae04e1c23f85e5d32e7ac73b07528c65f09cd824f75186f3f47ba45f404e1); /* line */ \n            c_0xf4230dcd(0xcf2d5fb88df5a37b505d058780e72844a4e413acd90b6b7d92c392f2f477827e); /* statement */ \nif (approvedSignatures[hash] == keccak256(_signature)) {c_0xf4230dcd(0x2238ff6d7632f2fa50bbb8a71cd4eedd3d67ffad75abc1c2cd45e04d46529de7); /* branch */ \n\nc_0xf4230dcd(0xafd7e28bf98c36b6b94e312965268af33333032f7840f55a64130ca3e2ed4aff); /* line */ \n                c_0xf4230dcd(0x890a31b89d5e6400f48e91b66f1096663e3063f2f2ede051d200935ac43e135c); /* statement */ \nreturn EIP1271_MAGIC_VALUE;\n            }else { c_0xf4230dcd(0xeb8afd2b0635a7f7bd31a8fc4727e3f2435ca52d352a245b37f1039b7681fc7e); /* branch */ \n}\n        } else {c_0xf4230dcd(0x657576833570bb5455b1aa20acd917b1d144047fb0be2522247477bdba643c4b); /* branch */ \n\nc_0xf4230dcd(0xe344869dc2cc99cab5551be454125d3a336f83303453b9a1fdf87c6b6d85d1f5); /* line */ \n            c_0xf4230dcd(0xdeb950c3c2a0cd8b0fb07de6b56df64eec56c414e4a9b01cddd1d7fa7cde745e); /* statement */ \nif (approvedSignatures[keccak256(_data)] == keccak256(_signature)) {c_0xf4230dcd(0x9ab2e2e7f0a032bda00daedf4de41d2cc063bf5f10af016fc50f0c7314a39062); /* branch */ \n\nc_0xf4230dcd(0x90a9cc13fd68bd1103fcdcfe7238ddd5bcf166bd4f80e4e90d257748db141df8); /* line */ \n                c_0xf4230dcd(0x216e4731de240dbfee50aeca3541341b6b166f9fc1c77610c9698ccc07a8e2fa); /* statement */ \nreturn EIP1271_MAGIC_VALUE;\n            }else { c_0xf4230dcd(0x70cfce3e5c8c963c57b41ed11bf08030c31983ab28ee286b86646adfd8503ba8); /* branch */ \n}\n        }\nc_0xf4230dcd(0xf76766deab1033796407751b6e2c96e87647683794907988881a8c4aad42314c); /* line */ \n        c_0xf4230dcd(0x0d946313838d9461bb9c2d515361f0ad25787c8bad181c7656746b2e6503a20a); /* statement */ \nreturn \"0x\";\n    }\n\n    /**\n     * @dev               Get the byte hash of function call i.e. first four bytes of data\n     * @param data        encoded transaction data.\n     */\n    function _getFunctionHashFromData(bytes memory data)\n        private\n        pure\n        returns (bytes4 functionHash)\n    {c_0xf4230dcd(0xfc46fcff91f778f8659de321336db9a96e9add38ce510ecdf0d2afa1e4110f0e); /* function */ \n\nc_0xf4230dcd(0x82118cd979974a0b13592016fc6431bfed370749c32bde9f102859a3d73a486a); /* line */ \n        assembly {\n            functionHash := mload(add(data, 32))\n        }\n    }\n\n    /**\n     * @dev                encode message with contants\n     * @param message      the message that needs to be encoded\n     */\n    function _encodeMessageHash(bytes32 message)\n        private\n        pure\n        returns (bytes memory)\n    {c_0xf4230dcd(0xa1dec4cb713c5d4075f5e2d2314c8d57e7f178bce8af3073e0faaa1c95286cfa); /* function */ \n\nc_0xf4230dcd(0x2dde839d8d8c56d8608121ce784b18374ab5a446bb9aae65e4f197d4ae6f6d3e); /* line */ \n        c_0xf4230dcd(0xd7cf144ae7354a6e9bb8751223fe592d4827d6ec02e463c27e4084f2fbd1086e); /* statement */ \nbytes32 safeMessageHash = keccak256(abi.encode(MSG_TYPEHASH, message));\nc_0xf4230dcd(0x488acb59999b65fcdeb7fcb23fd2fec3949c41487ffe43afc7497df58d45ee32); /* line */ \n        c_0xf4230dcd(0x83e1075d51a1b5a3c00b22b28d49426d5cf8cb7ce3673f4e4d821ca4bf8944ad); /* statement */ \nreturn\n            abi.encodePacked(\n                bytes1(0x19),\n                bytes1(0x23),\n                keccak256(\n                    abi.encode(DOMAIN_SEPARATOR_TYPEHASH, safeMessageHash)\n                )\n            );\n    }\n\n    /**\n     * @dev                set new safe\n     * @param _safe        safe address\n     */\n    function setSafe(address _safe) public onlySafe {c_0xf4230dcd(0xd8d36b8a5175532daeb06f957c54872fd7888059641edd602cf2e65c0eeb3817); /* function */ \n\nc_0xf4230dcd(0x215b2d4a861b03da86cfe93a853094d11bc34360e2d647bc03f6a9a121133812); /* line */ \n        c_0xf4230dcd(0x5d322d73edf9805189ea0d3841f6cbfa971796b3618d3801ac98fba1d2dad9ec); /* requirePre */ \nc_0xf4230dcd(0x8a9fac2fadd56034380b5e6abb5c1c70539124934d9f9d8522fef71c4d860489); /* statement */ \nrequire(_safe != address(0), \"Signer: new safe cannot be zero address\");c_0xf4230dcd(0xc7bb610e40a52f5792bd76de52a9d0cb027e137bd3078843ef8ce38a603d7c20); /* requirePost */ \n\nc_0xf4230dcd(0x56affa588611894abc07c00368f8889ca5a16e228f4531e67416237e17a2cc0f); /* line */ \n        c_0xf4230dcd(0xaca02e8b71918c8c447855e74fab772f8eee6913973c7ba06138392d3b303f26); /* statement */ \nsafe = _safe;\n    }\n\n    /**\n     * @dev                      add new contracts and functions\n     * @param _contract           contract address\n     * @param _functionSignature function signature for the contract\n     */\n    function approveNewTransaction(address _contract, bytes4 _functionSignature)\n        external\n        onlySafe\n    {c_0xf4230dcd(0xcc0181ad4e2400e23ecccf00f483bf3b439bd7a34edc6a41cb1e4bca2dbfc852); /* function */ \n\nc_0xf4230dcd(0xb490a3715814eb00bd9449abde17006f14842e28f7d327c5f48b81c60d7f214d); /* line */ \n        c_0xf4230dcd(0x9c489f76f5b80eb46b6446ea58f2a49347f41e371187eb92d9c6a2987e321025); /* requirePre */ \nc_0xf4230dcd(0x438dbd1f7c05f0510a66108049e5efe3a4317f22412e7b333e89dee40abc00e2); /* statement */ \nrequire(\n            _contract != address(0),\n            \"Signer: contract address cannot be zero\"\n        );c_0xf4230dcd(0x11bffc20688fa277f4929518f7c5f25dc74c2cca161a01a2905b2f9f0a07ba45); /* requirePost */ \n\nc_0xf4230dcd(0x9105558be4c0452577e8b36b127901e66b2a30fe6c0a012b062df32b1031020c); /* line */ \n        c_0xf4230dcd(0x7ac335c07db41a53969638ee5dab79d8cebd08d8e9c8a361e551641678423961); /* requirePre */ \nc_0xf4230dcd(0x80980896766292f64b50b983d4a24848ef797c8710b6715c632a2acb9ff9d827); /* statement */ \nrequire(\n            _functionSignature != bytes4(0),\n            \"Signer: function signature cannot be zero\"\n        );c_0xf4230dcd(0xdeba90adbb51b897cd74b937b6ad3ba8e393e1cc9ccf725a62c2590ad2824310); /* requirePost */ \n\nc_0xf4230dcd(0x125f59020079a9fb0e6a1b18a104a45f314f2a2764120164208acc762628f367); /* line */ \n        c_0xf4230dcd(0xa9d86469636faf695d2f02e683b23abd9af0ab6ea141811d5bd7a7f31a817253); /* statement */ \nallowedTransactions[_contract][_functionSignature] = true;\n    }\n}\n"
    },
    "contracts/utils/interface/Safe.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n/* solium-disable */\npragma solidity 0.8.6;\nfunction c_0xa4889794(bytes32 c__0xa4889794) pure {}\n\n\ncontract Enum {\nfunction c_0x558c51d6(bytes32 c__0x558c51d6) public pure {}\n\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n\ninterface Safe {\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n}\n"
    },
    "contracts/utils/Signer.sol": {
      "content": "/*\n\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\n\n*/\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\n// solium-disable linebreak-style\npragma solidity 0.8.6;\nfunction c_0x1b20cca6(bytes32 c__0x1b20cca6) pure {}\n\n\nimport \"./interface/Safe.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\";\n\n/**\n * @title PrimeDAO Signer Contract\n * @dev   Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.\n */\ncontract Signer is ISignatureValidator {\nfunction c_0x7fcaf73c(bytes32 c__0x7fcaf73c) public pure {}\n\n    // SeedFactory.deploySeed() byte hash\n    bytes4 internal constant SEED_FACTORY_MAGIC_VALUE = 0xe2c1426e;\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\n        0x7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35;\n    bytes32 private constant SEED_MSG_TYPEHASH =\n        0xa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d;\n\n    mapping(bytes32 => bytes32) public approvedSignatures;\n\n    /* solium-disable */\n    address public immutable safe;\n    address public immutable seedFactory;\n    /* solium-enable */\n\n    event SignatureCreated(bytes signature, bytes32 indexed hash);\n\n    /**\n     * @dev                Signer Constructor\n     * @param _safe        Gnosis Safe address.\n     * @param _seedFactory Seed Factory address.\n     */\n    constructor(address _safe, address _seedFactory) {c_0x7fcaf73c(0xf9e0f37fa28acaf0494ceef35b657986bfa0c83eb96279b369644e11ecf8eee1); /* function */ \n\nc_0x7fcaf73c(0x8122eccb318a04e33ab7b7cb50e44cbcc0569f82c2c5d24ce59a1c844c29f109); /* line */ \n        c_0x7fcaf73c(0x7b2460c3b65fa79cfa8633741bc4f240ee4e22cf9467ac6d48bad1dd863d148c); /* requirePre */ \nc_0x7fcaf73c(0x26d7d47fbd6294493c6039601eddcbf81210296edc5d9aa9bc154886bc24091b); /* statement */ \nrequire(\n            _safe != address(0) && _seedFactory != address(0),\n            \"Signer: Safe and SeedFactory address cannot be zero\"\n        );c_0x7fcaf73c(0x5e7c70b9abd0cb2232b30cf5518be3aa844d4058ece5f7233247720dba495965); /* requirePost */ \n\nc_0x7fcaf73c(0x62f0960782bf53025a450872acfaa1988fde4ea212c18bd9574a7652dc164b2c); /* line */ \n        c_0x7fcaf73c(0x4d680e7edc112b5a88a94921c93851e50449ceffadd1cc3e3c0f6db25a35f72f); /* statement */ \nsafe = _safe;\nc_0x7fcaf73c(0x9b87f616d690997126914037e8bee6c8b282b091ae8bdb561f889454e1ddfa5e); /* line */ \n        c_0x7fcaf73c(0xfe82a2889bfc622e51af931cadea907ce522acc6635efb7590ca74602dbee925); /* statement */ \nseedFactory = _seedFactory;\n    }\n\n    /**\n     * @dev                   Signature generator\n     * @param _to             receiver address.\n     * @param _value          value in wei.\n     * @param _data           encoded transaction data.\n     * @param _operation      type of operation call.\n     * @param _safeTxGas      safe transaction gas for gnosis safe.\n     * @param _baseGas        base gas for gnosis safe.\n     * @param _gasPrice       gas price for gnosis safe transaction.\n     * @param _gasToken       token which gas needs to paid for gnosis safe transaction.\n     * @param _refundReceiver address account to receive refund for remaining gas.\n     * @param _nonce          gnosis safe contract nonce.\n     */\n    function generateSignature(\n        address _to,\n        uint256 _value,\n        bytes calldata _data,\n        Enum.Operation _operation,\n        uint256 _safeTxGas,\n        uint256 _baseGas,\n        uint256 _gasPrice,\n        address _gasToken,\n        address _refundReceiver,\n        uint256 _nonce\n    ) external returns (bytes memory signature, bytes32 hash) {c_0x7fcaf73c(0xa48c91035489051dba204fa5651c312bf691117600f2a63e1c786614acc77fcf); /* function */ \n\n        // check if transaction parameters are correct\nc_0x7fcaf73c(0xc3e6f4133b417b93df35900bd4332ff6c747ac64ea3d03adb41d48d5cbd98de4); /* line */ \n        c_0x7fcaf73c(0xb52ee67bc28e3ae5bb124c0159626efbf3a8fbde1366dffbabeb421dc923db6c); /* requirePre */ \nc_0x7fcaf73c(0xe6943ccebf813bce29edf3de7aa9920829464cb4341873a34c01761986a69e88); /* statement */ \nrequire(\n            _to == seedFactory,\n            \"Signer: cannot sign transaction transaction to invalid seedFactory\"\n        );c_0x7fcaf73c(0xc8d4db462de0f93c26078e3b5602c42df5dacbc84849309449e92a646c3afb18); /* requirePost */ \n\nc_0x7fcaf73c(0x80aec278b69523b620d4528ed47a82b58537ad7b6e9e9e9c8e862c8cb7cf909b); /* line */ \n        c_0x7fcaf73c(0xbc0f2fe2cf14bceb92cc00b1ead17a1cb088668bb2c59a996a9fd6b31ac24411); /* requirePre */ \nc_0x7fcaf73c(0x0e40dc0a5c0544960725944672ab194190f927134bf17cefbfd658946e07edfd); /* statement */ \nrequire(\n            _getFunctionHashFromData(_data) == SEED_FACTORY_MAGIC_VALUE,\n            \"Signer: can only sign calls to deploySeed\"\n        );c_0x7fcaf73c(0xe7a14ec4b113d13256c3297d5c278dd40e4c3e1307b308e1fb9ed6813d230df9); /* requirePost */ \n\nc_0x7fcaf73c(0xdf5488bbb723a89e18c7a5f3d90e4e88bf1ac97d9be8dba1642c37d27e5cac10); /* line */ \n        c_0x7fcaf73c(0x488a35f14ee1ceae6cb7a520e6ab90bf146c380e76da60fda4be8afaaeff2e73); /* requirePre */ \nc_0x7fcaf73c(0xd804298164d11213b9107add2b00d044e465a6763ce8a2b5af0e33fdaa90e687); /* statement */ \nrequire(\n            _value == 0 &&\n                _refundReceiver == address(0) &&\n                _operation == Enum.Operation.Call,\n            \"Signer: invalid arguments provided\"\n        );c_0x7fcaf73c(0x3d6480cf06cd59326041d17823f06c99f1bf8917b174a38e0ffec4e321ff1515); /* requirePost */ \n\n\n        // get contractTransactionHash from gnosis safe\nc_0x7fcaf73c(0x8e3e8259015b4c52d818f79b2014d5535ae5986129fdcb38959bcfb235412937); /* line */ \n        c_0x7fcaf73c(0x6150af200d9aba499c848658ca8b23a0022c15400ebe7bb4b97a04059f63ee3c); /* statement */ \nhash = Safe(safe).getTransactionHash(\n            _to,\n            0,\n            _data,\n            _operation,\n            _safeTxGas,\n            _baseGas,\n            _gasPrice,\n            _gasToken,\n            _refundReceiver,\n            _nonce\n        );\n\nc_0x7fcaf73c(0xb2a08673426c676e14229e2ee8e4940ada68f15c26d538ab9ee7fe06d5348b3a); /* line */ \n        c_0x7fcaf73c(0xa3d8a77fdbff3bf0817ff3c24962f12967e3690ba206dcd626b86fdd6deb126c); /* statement */ \nbytes memory paddedAddress = bytes.concat(\n            bytes12(0),\n            bytes20(address(this))\n        );\nc_0x7fcaf73c(0x3edc8d1ff695c2d3176bde4be8ed5b88dd8ba9edce3467ad85068c66bb4d1764); /* line */ \n        c_0x7fcaf73c(0x9478a55d75b6baf52bccdd90ae1df1f3c679386865c7a94f2505b2659241c75e); /* statement */ \nbytes memory messageHash = _encodeMessageHash(hash);\n        // check if transaction is not signed before\nc_0x7fcaf73c(0x5cb400a0dd606c25a43ea957b168b8c0259d189cca094a049041011af9f9fd8c); /* line */ \n        c_0x7fcaf73c(0xae316ae3621a452e098329d77f3474de6af3648e593cacb1f120f909eafcb978); /* requirePre */ \nc_0x7fcaf73c(0x3b807f60be4d4c2ad36e1a4eb0112849456ce88beec198a415bf741c08de761e); /* statement */ \nrequire(\n            approvedSignatures[hash] != keccak256(messageHash),\n            \"Signer: transaction already signed\"\n        );c_0x7fcaf73c(0xc9a715a62cf451e992f2714d6fdb6f7d69a20afb8a2980daf5bd1d6f725fbd47); /* requirePost */ \n\n\n        // generate signature and add it to approvedSignatures mapping\nc_0x7fcaf73c(0xba69130e794501a08f0f46823eecde25527062a2ad66572a31f6f63b6637b40d); /* line */ \n        c_0x7fcaf73c(0x8bf256a3ced3fb06534f6677e09b5230d62ef3d27cbe0adea9e49238745e42a6); /* statement */ \nsignature = bytes.concat(\n            paddedAddress,\n            bytes32(uint256(65)),\n            bytes1(0),\n            bytes32(uint256(messageHash.length)),\n            messageHash\n        );\nc_0x7fcaf73c(0x81af3a88e5c918ac2f5623ca4d00bf6db21544d3fe4526432591c81e0e8b7272); /* line */ \n        c_0x7fcaf73c(0x31fa4b9222d57db8d14764146830712974d0e2c49a6ea7e7042330f1b290437b); /* statement */ \napprovedSignatures[hash] = keccak256(messageHash);\nc_0x7fcaf73c(0xfb92ba469d09cae5f5c7fec14e23aba818bfe66a8e8d2951d0bcbe5b16a5ec92); /* line */ \n        c_0x7fcaf73c(0x4335f2415d354ee0a8ab18321b28b9717a075c4c2e7600272dc8b954be270812); /* statement */ \nemit SignatureCreated(signature, hash);\n    }\n\n    /**\n     * @dev                Validate signature using EIP1271\n     * @param _data        Encoded transaction hash supplied to verify signature.\n     * @param _signature   Signature that needs to be verified.\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature)\n        public\n        view\n        virtual\n        override\n        returns (bytes4)\n    {c_0x7fcaf73c(0xc67eb329a7fdabba55e60dca57f5036da14ea2fdbe5f5d9bc15e35e8c67d6c96); /* function */ \n\nc_0x7fcaf73c(0xf6d20a9bcd0cb805054783d81746732bb3a400605e29e7c6aa54f6178a3e66ce); /* line */ \n        c_0x7fcaf73c(0xd2a09c60fe892ef5e76dd98f3b178260b7b322a3c294db72403646d232021d04); /* statement */ \nif (_data.length == 32) {c_0x7fcaf73c(0x1317480e1786b41a408054b2ff3e8b2a17e4af502b055ff62e38449a70697efa); /* branch */ \n\nc_0x7fcaf73c(0xf220d8f9fb436ab545ebe814e40a99644c62070a1ca9e88eb18595dcaa8336a7); /* line */ \n            c_0x7fcaf73c(0xb73eb6080744601669537d315279cfa725463ab4ec2c4082dd940e4a2a5f51c5); /* statement */ \nbytes32 hash;\nc_0x7fcaf73c(0x8e02a84db971c59c4a93aa77d3ca5f65f44bbae17f55de68bf900a39b9667a42); /* line */ \n            assembly {\n                hash := mload(add(_data, 32))\n            }\nc_0x7fcaf73c(0xe4cf4f12bc93bdabfd68e9425b6e32c34678be2afe37d949ed7ea600e62992d5); /* line */ \n            c_0x7fcaf73c(0x914be4fc30af54e5724df8df2c0403c1f9af2757acd4804b75b30cc940555331); /* statement */ \nif (approvedSignatures[hash] == keccak256(_signature)) {c_0x7fcaf73c(0x60859f872ce0f3c4797272bb5390a79a039e50b9a91004c6a4a645b4aedeef2c); /* branch */ \n\nc_0x7fcaf73c(0xea68acc7b10ecd9e1f291e3bed82f741a44af855dcb5e01e85e7964992b59ee8); /* line */ \n                c_0x7fcaf73c(0xbc33f3729c6eea07223d5f261b589c36c69bc06aec4b0a365894795e17cfe3ed); /* statement */ \nreturn EIP1271_MAGIC_VALUE;\n            }else { c_0x7fcaf73c(0x713950f0fbe7da7c06be53c536840afd0d1c3120cedfd68a7bad5860d63552e4); /* branch */ \n}\n        } else {c_0x7fcaf73c(0xbf0d63e1798bcb7bb310c71dd3fd268c922683c84de7f3b7cef5375300fd34c1); /* branch */ \n\nc_0x7fcaf73c(0x6f4f0dc9b94ce5b0097483659c03214209485578da4afa0ea8b425740d9acea9); /* line */ \n            c_0x7fcaf73c(0x7deeabde3554689a2b965628b6b6a846906cfd00d0195f9ad8fcc8d2944ed47d); /* statement */ \nif (approvedSignatures[keccak256(_data)] == keccak256(_signature)) {c_0x7fcaf73c(0x10db529594e405851064a2c56c5eb18b558156773ecc2cfc66c673d1b614e177); /* branch */ \n\nc_0x7fcaf73c(0xfa03d6c94fbc28ed85cfe7cb98f4f73c7bb8714d413642c4973b3da6b68beac6); /* line */ \n                c_0x7fcaf73c(0x6d0528d4d6ce6b4b3315fa353e9cf8fb5d74737dbbc3c825a05c9b4efe70ccd0); /* statement */ \nreturn EIP1271_MAGIC_VALUE;\n            }else { c_0x7fcaf73c(0x052df12e4c1c816acddbfc62687f1420e65da8dd29e70f5ffe3a9944b6bf2e07); /* branch */ \n}\n        }\nc_0x7fcaf73c(0x8e8495703d3b8d27b3f60330fd20e4f87feca40e7de161fddabc2490759f39d6); /* line */ \n        c_0x7fcaf73c(0xb739f1b33c84547e558dd691bf56e3383cd3328e58dd3be06446225aeb6c8098); /* statement */ \nreturn \"0x\";\n    }\n\n    /**\n     * @dev               Get the byte hash of function call i.e. first four bytes of data\n     * @param data        encoded transaction data.\n     */\n    function _getFunctionHashFromData(bytes memory data)\n        private\n        pure\n        returns (bytes4 functionHash)\n    {c_0x7fcaf73c(0x386c761a66ff4b136ea65caedc81b147c93a66d476f2c5c5247db6c804a1dd44); /* function */ \n\nc_0x7fcaf73c(0x23cc0fc17ebc72d417c452b8f4e70aec3a8912f8d5639a91d998b69dfd865617); /* line */ \n        assembly {\n            functionHash := mload(add(data, 32))\n        }\n    }\n\n    /**\n     * @dev                encode message with contants\n     * @param message      the message that needs to be encoded\n     */\n    function _encodeMessageHash(bytes32 message)\n        private\n        pure\n        returns (bytes memory)\n    {c_0x7fcaf73c(0xa80759672b51443b59c0c62187bade184794756e1a357992700d0d25c95ce83e); /* function */ \n\nc_0x7fcaf73c(0xf99f59cc922e1756b0d4beab6b47229ccbcae9afa6f8868720fac083dae33a4a); /* line */ \n        c_0x7fcaf73c(0x30f08ebf63aae2cbd4a83ee2ff4204a0f6ce049b5331cd36433cd8c20c6dc3c1); /* statement */ \nbytes32 safeMessageHash = keccak256(\n            abi.encode(SEED_MSG_TYPEHASH, message)\n        );\nc_0x7fcaf73c(0xe34ac9a92d1bdd0abbd015bf29800490d5a68de0a96274896c1de38c9033b546); /* line */ \n        c_0x7fcaf73c(0xae5772c5d5b729d92398537bb1d41bfbe0b01f681beb9ce9c371210b8e618a5d); /* statement */ \nreturn\n            abi.encodePacked(\n                bytes1(0x19),\n                bytes1(0x23),\n                keccak256(\n                    abi.encode(DOMAIN_SEPARATOR_TYPEHASH, safeMessageHash)\n                )\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": false
    }
  }
}