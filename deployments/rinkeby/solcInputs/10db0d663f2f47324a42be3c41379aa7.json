{
  "language": "Solidity",
  "sources": {
    "contracts/lbp/LBPManager.sol": {
      "content": "/*\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// solium-disable linebreak-style\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\nimport \"../utils/interface/ILBPFactory.sol\";\r\nimport \"../utils/interface/IVault.sol\";\r\nimport \"../utils/interface/ILBP.sol\";\r\n\r\n/**\r\n * @title LBPManager contract.\r\n * @dev   Smart contract for managing interactions with a Balancer LBP.\r\n */\r\ncontract LBPManager {\r\n    // Constants\r\n    uint256 private constant HUNDRED_PERCENT = 10e18; // Used in calculating the fee.\r\n\r\n    // Locked parameter\r\n    string public symbol; // Symbol of the LBP.\r\n    string public name; // Name of the LBP.\r\n    address public admin; // Address of the admin of this contract.\r\n    address public beneficiary; // Address that recieves fees.\r\n    uint256 public feePercentage; // Fee expressed as a % (e.g. 10**18 = 100% fee, toWei('1') = 100%)\r\n    uint256 public swapFeePercentage; // Percentage of fee paid for every swap in the LBP.\r\n    IERC20[] public tokenList; // Tokens that are used in the LBP, sorted by address in numerical order (ascending).\r\n    uint256[] public amounts; // Amount of tokens to be added as liquidity in LBP.\r\n    uint256[] public startWeights; // Array containing the startWeights for the project & funding token.\r\n    uint256[] public endWeights; // Array containing the endWeights for the project & funding token.\r\n    uint256[] public startTimeEndTime; // Array containing the startTime and endTime for the LBP.\r\n    ILBP public lbp; // Address of LBP that is managed by this contract.\r\n    bytes public metadata; // IPFS Hash of the LBP creation wizard information.\r\n    uint8 private projectTokenIndex; // Index repesenting the project token in the tokenList.\r\n    address public LBPFactory; // Address of Balancers LBP factory.\r\n\r\n    // Contract logic\r\n    bool public poolFunded; // true:- LBP is funded; false:- LBP is not funded.\r\n    bool public initialized; // true:- LBPManager initialized; false:- LBPManager not initialized. Makes sure, only initialized once.\r\n\r\n    event LBPManagerAdminChanged(\r\n        address indexed oldAdmin,\r\n        address indexed newAdmin\r\n    );\r\n    event FeeTransferred(\r\n        address indexed beneficiary,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    );\r\n    event PoolTokensWithdrawn(address indexed LbpAddress, uint256 amount);\r\n    event MetadataUpdated(bytes indexed metadata);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"LBPManager: caller is not admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev                             Transfer admin rights.\r\n     * @param _newAdmin                 Address of the new admin.\r\n     */\r\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0), \"LBPManager: new admin is zero\");\r\n\r\n        emit LBPManagerAdminChanged(admin, _newAdmin);\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev                             Initialize LBPManager.\r\n     * @param _LBPFactory               LBP factory address.\r\n     * @param _beneficiary              The address that receives the feePercentage.\r\n     * @param _name                     Name of the LBP.\r\n     * @param _symbol                   Symbol of the LBP.\r\n     * @param _tokenList                Array containing two addresses in order of:\r\n                                            1. The address of the project token being distributed.\r\n                                            2. The address of the funding token being exchanged for the project token.\r\n     * @param _amounts                  Array containing two parameters in order of:\r\n                                            1. The amounts of project token to be added as liquidity to the LBP.\r\n                                            2. The amounts of funding token to be added as liquidity to the LBP.\r\n     * @param _startWeights             Array containing two parametes in order of:\r\n                                            1. The start weight for the project token in the LBP.\r\n                                            2. The start weight for the funding token in the LBP.\r\n     * @param _startTimeEndTime         Array containing two parameters in order of:\r\n                                            1. Start time for the LBP.\r\n                                            2. End time for the LBP.\r\n     * @param _endWeights               Array containing two parametes in order of:\r\n                                            1. The end weight for the project token in the LBP.\r\n                                            2. The end weight for the funding token in the LBP.\r\n    * @param _fees                      Array containing two parameters in order of:\r\n                                            1. Percentage of fee paid for every swap in the LBP.\r\n                                            2. Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\r\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\r\n     */\r\n    function initializeLBPManager(\r\n        address _LBPFactory,\r\n        address _beneficiary,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        IERC20[] memory _tokenList,\r\n        uint256[] memory _amounts,\r\n        uint256[] memory _startWeights,\r\n        uint256[] memory _startTimeEndTime,\r\n        uint256[] memory _endWeights,\r\n        uint256[] memory _fees,\r\n        bytes memory _metadata\r\n    ) external {\r\n        require(!initialized, \"LBPManager: already initialized\");\r\n        require(_beneficiary != address(0), \"LBPManager: _beneficiary is zero\");\r\n        require(_fees[0] >= 1e12, \"LBPManager: swapFeePercentage to low\"); // 0.0001%\r\n        require(_fees[0] <= 1e17, \"LBPManager: swapFeePercentage to high\"); // 10%\r\n        require(_tokenList.length == 2, \"LBPManager: tokenList wrong size\");\r\n\r\n        initialized = true;\r\n        admin = msg.sender;\r\n        swapFeePercentage = _fees[0];\r\n        feePercentage = _fees[1];\r\n        beneficiary = _beneficiary;\r\n        metadata = _metadata;\r\n        startTimeEndTime = _startTimeEndTime;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        LBPFactory = _LBPFactory;\r\n\r\n        // Token addresses are sorted in numerical order (ascending) as specified by Balancer\r\n        if (address(_tokenList[0]) > address(_tokenList[1])) {\r\n            projectTokenIndex = 1;\r\n            tokenList.push(_tokenList[1]);\r\n            tokenList.push(_tokenList[0]);\r\n\r\n            amounts.push(_amounts[1]);\r\n            amounts.push(_amounts[0]);\r\n\r\n            startWeights.push(_startWeights[1]);\r\n            startWeights.push(_startWeights[0]);\r\n\r\n            endWeights.push(_endWeights[1]);\r\n            endWeights.push(_endWeights[0]);\r\n        } else {\r\n            projectTokenIndex = 0;\r\n            tokenList = _tokenList;\r\n            amounts = _amounts;\r\n            startWeights = _startWeights;\r\n            endWeights = _endWeights;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev                             Subtracts the fee, deploys the LBP and adds liquidity to it.\r\n     * @param _sender                   Address of the liquidity provider.\r\n     */\r\n    function initializeLBP(address _sender) external onlyAdmin {\r\n        require(\r\n            initialized == true,\r\n            \"LBPManager: LBPManager in not initialized\"\r\n        );\r\n        require(!poolFunded, \"LBPManager: pool already funded\");\r\n        poolFunded = true;\r\n\r\n        lbp = ILBP(\r\n            ILBPFactory(LBPFactory).create(\r\n                name,\r\n                symbol,\r\n                tokenList,\r\n                startWeights,\r\n                swapFeePercentage,\r\n                address(this),\r\n                true // SwapEnabled is set to true at pool creation.\r\n            )\r\n        );\r\n\r\n        lbp.updateWeightsGradually(\r\n            startTimeEndTime[0],\r\n            startTimeEndTime[1],\r\n            endWeights\r\n        );\r\n\r\n        IVault vault = lbp.getVault();\r\n\r\n        if (feePercentage != 0) {\r\n            // Transfer fee to beneficiary.\r\n            tokenList[projectTokenIndex].transferFrom(\r\n                _sender,\r\n                beneficiary,\r\n                _feeAmountRequired()\r\n            );\r\n            emit FeeTransferred(\r\n                beneficiary,\r\n                address(tokenList[projectTokenIndex]),\r\n                _feeAmountRequired()\r\n            );\r\n        }\r\n\r\n        for (uint8 i; i < tokenList.length; i++) {\r\n            tokenList[i].transferFrom(_sender, address(this), amounts[i]);\r\n            tokenList[i].approve(address(vault), amounts[i]);\r\n        }\r\n\r\n        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest({\r\n            maxAmountsIn: amounts,\r\n            userData: abi.encode(0, amounts), // JOIN_KIND_INIT = 0, used when adding liquidity for the first time.\r\n            fromInternalBalance: false, // It is not possible to add liquidity through the internal Vault balance.\r\n            assets: tokenList\r\n        });\r\n\r\n        vault.joinPool(lbp.getPoolId(), address(this), address(this), request);\r\n    }\r\n\r\n    /**\r\n     * @dev                             Exit pool or remove liquidity from pool.\r\n     * @param _receiver                 Address of the liquidity receiver, after exiting the LBP.\r\n     */\r\n    function removeLiquidity(address payable _receiver) external onlyAdmin {\r\n        require(\r\n            _receiver != payable(address(0)),\r\n            \"LBPManager: receiver is zero\"\r\n        );\r\n        require(\r\n            lbp.balanceOf(address(this)) > 0,\r\n            \"LBPManager: no BPT token balance\"\r\n        );\r\n\r\n        uint256 endTime;\r\n        (, endTime, ) = lbp.getGradualWeightUpdateParams();\r\n\r\n        require(block.timestamp >= endTime, \"LBPManager: endtime not reached\");\r\n\r\n        IVault vault = lbp.getVault();\r\n\r\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({\r\n            minAmountsOut: new uint256[](tokenList.length), // To remove all funding from the pool. Initializes to [0, 0]\r\n            userData: abi.encode(1, lbp.balanceOf(address(this))),\r\n            toInternalBalance: false,\r\n            assets: tokenList\r\n        });\r\n\r\n        lbp.approve(address(vault), lbp.balanceOf(address(this)));\r\n\r\n        vault.exitPool(lbp.getPoolId(), address(this), _receiver, request);\r\n    }\r\n\r\n    /*\r\n        DISCLAIMER:\r\n        The method below is an advanced functionality. By invoking this method, you are withdrawing\r\n        the BPT tokens, which are necessary to exit the pool. If you chose to remove the BPT tokens,\r\n        the LBPManager will no longer be able to remove liquidity. By withdrawing the BPT tokens\r\n        you agree on removing all the responsibility from the LBPManger for removing liquidity from\r\n        the pool and transferring this responsibility to the holder of the BPT tokens. Any possible\r\n        loss of funds by choosing to withdraw the BPT tokens is not the responsibility of\r\n        LBPManager or PrimeDao. After withdrawing the BPT tokens, liquidity has to be withdrawn\r\n        directly from Balancer's LBP. LBPManager or PrimeDAO will no longer provide support to do so.\r\n    */\r\n    /**\r\n     * @dev                             Withdraw pool tokens if available.\r\n     * @param _receiver                 Address of the BPT tokens receiver.\r\n     */\r\n    function withdrawPoolTokens(address _receiver) external onlyAdmin {\r\n        require(_receiver != address(0), \"LBPManager: receiver is zero\");\r\n\r\n        uint256 endTime;\r\n        (, endTime, ) = lbp.getGradualWeightUpdateParams();\r\n        require(block.timestamp >= endTime, \"LBPManager: endtime not reached\");\r\n\r\n        require(\r\n            lbp.balanceOf(address(this)) > 0,\r\n            \"LBPManager: no BPT token balance\"\r\n        );\r\n\r\n        emit PoolTokensWithdrawn(address(lbp), lbp.balanceOf(address(this)));\r\n        lbp.transfer(_receiver, lbp.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev                             Can pause/unpause trading.\r\n     * @param _swapEnabled              Enables/disables swapping.\r\n     */\r\n    function setSwapEnabled(bool _swapEnabled) external onlyAdmin {\r\n        lbp.setSwapEnabled(_swapEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev             Get required amount of project tokens to cover for fees and the actual LBP.\r\n     */\r\n    function projectTokensRequired()\r\n        external\r\n        view\r\n        returns (uint256 projectTokenAmounts)\r\n    {\r\n        projectTokenAmounts = amounts[projectTokenIndex] + _feeAmountRequired();\r\n    }\r\n\r\n    /**\r\n     * @dev                             Updates metadata.\r\n     * @param _metadata                 LBP wizard contract metadata, that is an IPFS Hash.\r\n     */\r\n    function updateMetadata(bytes memory _metadata) external onlyAdmin {\r\n        metadata = _metadata;\r\n        emit MetadataUpdated(_metadata);\r\n    }\r\n\r\n    /**\r\n     * @dev             Get required amount of project tokens to cover for fees.\r\n     */\r\n    function _feeAmountRequired() internal view returns (uint256 feeAmount) {\r\n        feeAmount =\r\n            (amounts[projectTokenIndex] * feePercentage) /\r\n            HUNDRED_PERCENT;\r\n    }\r\n}\r\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/utils/interface/ILBPFactory.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n/* solium-disable */\r\npragma solidity ^0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILBPFactory {\r\n    function create(\r\n        string memory name,\r\n        string memory symbol,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory weights,\r\n        uint256 swapFeePercentage,\r\n        address owner,\r\n        bool swapEnabledOnStart\r\n    ) external returns (address);\r\n}\r\n"
    },
    "contracts/utils/interface/IVault.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n/* solium-disable */\r\npragma solidity ^0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\n\r\ninterface IVault {\r\n    struct JoinPoolRequest {\r\n        IERC20[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    struct ExitPoolRequest {\r\n        IERC20[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n}\r\n"
    },
    "contracts/utils/interface/ILBP.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n/* solium-disable */\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\nimport \"./IVault.sol\";\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface ILBP is IERC20 {\r\n    function updateWeightsGradually(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256[] memory endWeights\r\n    ) external;\r\n\r\n    function getGradualWeightUpdateParams()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            uint256[] memory endWeights\r\n        );\r\n\r\n    function getPoolId() external view returns (bytes32);\r\n\r\n    function getVault() external view returns (IVault);\r\n\r\n    function setSwapEnabled(bool swapEnabled) external;\r\n\r\n    function getSwapEnabled() external view returns (bool);\r\n\r\n    function getSwapFeePercentage() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/lbp/LBPManagerFactory.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// solium-disable linebreak-style\r\npragma solidity ^0.8.6;\r\n\r\nimport \"../utils/CloneFactory.sol\";\r\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\nimport \"./LBPManager.sol\";\r\n\r\n/**\r\n * @title LBPManager Factory\r\n * @dev   Governance to create new LBPManager contracts.\r\n */\r\ncontract LBPManagerFactory is CloneFactory, Ownable {\r\n    address public masterCopy;\r\n    address public LBPFactory;\r\n\r\n    event LBPManagerDeployed(\r\n        address indexed lbpManager,\r\n        address indexed admin,\r\n        bytes metadata\r\n    );\r\n\r\n    event LBPFactoryChanged(\r\n        address indexed oldLBPFactory,\r\n        address indexed newLBPFactory\r\n    );\r\n\r\n    event MastercopyChanged(\r\n        address indexed oldMasterCopy,\r\n        address indexed newMasterCopy\r\n    );\r\n\r\n    /**\r\n     * @dev                             Constructor.\r\n     * @param _LBPFactory               The address of Balancers LBP factory.\r\n     */\r\n    constructor(address _LBPFactory) {\r\n        require(_LBPFactory != address(0), \"LBPMFactory: LBPFactory is zero\");\r\n        LBPFactory = _LBPFactory;\r\n    }\r\n\r\n    modifier validAddress(address addressToCheck) {\r\n        require(addressToCheck != address(0), \"LBPMFactory: address is zero\");\r\n        require(\r\n            addressToCheck != address(this),\r\n            \"LBPMFactory: address same as LBPManagerFactory\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev                             Set LBPManager contract which works as a base for clones.\r\n     * @param _masterCopy               The address of the new LBPManager basis.\r\n     */\r\n    function setMasterCopy(address _masterCopy)\r\n        external\r\n        onlyOwner\r\n        validAddress(_masterCopy)\r\n    {\r\n        emit MastercopyChanged(masterCopy, _masterCopy);\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /**\r\n     * @dev                             Set Balancers LBP Factory contract as basis for deploying LBPs.\r\n     * @param _LBPFactory               The address of Balancers LBP factory.\r\n     */\r\n    function setLBPFactory(address _LBPFactory)\r\n        external\r\n        onlyOwner\r\n        validAddress(_LBPFactory)\r\n    {\r\n        emit LBPFactoryChanged(LBPFactory, _LBPFactory);\r\n        LBPFactory = _LBPFactory;\r\n    }\r\n\r\n    /**\r\n     * @dev                             Deploy and initialize LBPManager.\r\n     * @param _admin                    The address of the admin of the LBPManager.\r\n     * @param _beneficiary              The address that receives the _fees.\r\n     * @param _name                     Name of the LBP.\r\n     * @param _symbol                   Symbol of the LBP.\r\n     * @param _tokenList                Numerically sorted array (ascending) containing two addresses:\r\n                                            - The address of the project token being distributed.\r\n                                            - The address of the funding token being exchanged for the project token.\r\n     * @param _amounts                  Sorted array to match the _tokenList, containing two parameters:\r\n                                            - The amounts of project token to be added as liquidity to the LBP.\r\n                                            - The amounts of funding token to be added as liquidity to the LBP.\r\n     * @param _startWeights                  Sorted array to match the _tokenList, containing two parametes:\r\n                                            - The start weight for the project token in the LBP.\r\n                                            - The start weight for the funding token in the LBP.\r\n     * @param _startTimeEndtime         Array containing two parameters:\r\n                                            - Start time for the LBP.\r\n                                            - End time for the LBP.\r\n     * @param _endWeights               Sorted array to match the _tokenList, containing two parametes:\r\n                                            - The end weight for the project token in the LBP.\r\n                                            - The end weight for the funding token in the LBP.\r\n     * @param _fees                     Array containing two parameters:\r\n                                            - Percentage of fee paid for every swap in the LBP.\r\n                                            - Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\r\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\r\n     */\r\n    function deployLBPManager(\r\n        address _admin,\r\n        address _beneficiary,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        IERC20[] memory _tokenList,\r\n        uint256[] memory _amounts,\r\n        uint256[] memory _startWeights,\r\n        uint256[] memory _startTimeEndtime,\r\n        uint256[] memory _endWeights,\r\n        uint256[] memory _fees,\r\n        bytes memory _metadata\r\n    ) external onlyOwner {\r\n        require(\r\n            masterCopy != address(0),\r\n            \"LBPMFactory: LBPManager mastercopy not set\"\r\n        );\r\n\r\n        address lbpManager = createClone(masterCopy);\r\n\r\n        LBPManager(lbpManager).initializeLBPManager(\r\n            LBPFactory,\r\n            _beneficiary,\r\n            _name,\r\n            _symbol,\r\n            _tokenList,\r\n            _amounts,\r\n            _startWeights,\r\n            _startTimeEndtime,\r\n            _endWeights,\r\n            _fees,\r\n            _metadata\r\n        );\r\n\r\n        LBPManager(lbpManager).transferAdminRights(_admin);\r\n\r\n        emit LBPManagerDeployed(lbpManager, _admin, _metadata);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/CloneFactory.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n* ===========\r\n*\r\n* CloneFactory.sol was originally published under MIT license.\r\n* Republished by PrimeDAO under GNU General Public License v3.0.\r\n*\r\n*/\r\n\r\n/*\r\nThe MIT License (MIT)\r\nCopyright (c) 2018 Murray Software, LLC.\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable linebreak-style\r\n// solhint-disable max-line-length\r\n// solhint-disable no-inline-assembly\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract CloneFactory {\r\n    function createClone(address target) internal returns (address result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n\r\n    function isClone(address target, address query)\r\n        internal\r\n        view\r\n        returns (bool result)\r\n    {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(\r\n                clone,\r\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\r\n            )\r\n            mstore(add(clone, 0xa), targetBytes)\r\n            mstore(\r\n                add(clone, 0x1e),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n\r\n            let other := add(clone, 0x40)\r\n            extcodecopy(query, other, 0, 0x2d)\r\n            result := and(\r\n                eq(mload(clone), mload(other)),\r\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\r\n            )\r\n        }\r\n    }\r\n}\r\n"
    },
    "openzeppelin-solidity/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/seed/SeedFactory.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable linebreak-style\r\n/* solhint-disable space-after-comma */\r\n\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\nimport \"openzeppelin-contracts-sol8/access/Ownable.sol\";\r\nimport \"./Seed.sol\";\r\nimport \"../utils/CloneFactory.sol\";\r\n\r\n/**\r\n * @title PrimeDAO Seed Factory\r\n * @dev   Enable PrimeDAO governance to create new Seed contracts.\r\n */\r\ncontract SeedFactory is CloneFactory, Ownable {\r\n    Seed public masterCopy;\r\n\r\n    event SeedCreated(address indexed newSeed, address indexed admin);\r\n\r\n    /**\r\n     * @dev               Set Seed contract which works as a base for clones.\r\n     * @param _masterCopy The address of the new Seed basis.\r\n     */\r\n    function setMasterCopy(Seed _masterCopy) external onlyOwner {\r\n        require(\r\n            address(_masterCopy) != address(0),\r\n            \"SeedFactory: new mastercopy cannot be zero address\"\r\n        );\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /**\r\n      * @dev                                Deploys Seed contract.\r\n      * @param _beneficiary                 The address that recieves fees.\r\n      * @param _admin                       The address of the admin of this contract. Funds contract\r\n                                            and has permissions to whitelist users, pause and close contract.\r\n      * @param _tokens                      Array containing two params:\r\n                                                - The address of the seed token being distributed.\r\n      *                                         - The address of the funding token being exchanged for seed token.\r\n      * @param _softHardThresholds          Array containing two params:\r\n                                                - the minimum funding token collection threshold in wei denomination.\r\n                                                - the highest possible funding token amount to be raised in wei denomination.\r\n      * @param _price                       price of a SeedToken, expressed in fundingTokens, with precision of 10**18\r\n      * @param _startTime                   Distribution start time in unix timecode.\r\n      * @param _endTime                     Distribution end time in unix timecode.\r\n      * @param _vestingDurationAndCliff       Array containing two params:\r\n                                                - Vesting period duration in days.\r\n                                                - Cliff duration in days.\r\n      * @param _permissionedSeed      Set to true if only whitelisted adresses are allowed to participate.\r\n      * @param _fee                   Success fee expressed as a % (e.g. 10**18 = 100% fee, 10**16 = 1%)\r\n      * @param _metadata              Seed contract metadata, that is IPFS URI\r\n    */\r\n    function deploySeed(\r\n        address _beneficiary,\r\n        address _admin,\r\n        address[] memory _tokens,\r\n        uint256[] memory _softHardThresholds,\r\n        uint256 _price,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint32[] memory _vestingDurationAndCliff,\r\n        bool _permissionedSeed,\r\n        uint256 _fee,\r\n        bytes memory _metadata\r\n    ) external onlyOwner returns (address) {\r\n        {\r\n            require(\r\n                address(masterCopy) != address(0),\r\n                \"SeedFactory: mastercopy cannot be zero address\"\r\n            );\r\n            require(\r\n                _vestingDurationAndCliff.length == 2,\r\n                \"SeedFactory: Hasn't provided both vesting duration and cliff\"\r\n            );\r\n        }\r\n\r\n        // deploy clone\r\n        address _newSeed = createClone(address(masterCopy));\r\n\r\n        Seed(_newSeed).updateMetadata(_metadata);\r\n\r\n        // initialize\r\n        Seed(_newSeed).initialize(\r\n            _beneficiary,\r\n            _admin,\r\n            _tokens,\r\n            _softHardThresholds,\r\n            _price,\r\n            _startTime,\r\n            _endTime,\r\n            _vestingDurationAndCliff[0],\r\n            _vestingDurationAndCliff[1],\r\n            _permissionedSeed,\r\n            _fee\r\n        );\r\n\r\n        emit SeedCreated(address(_newSeed), _admin);\r\n\r\n        return _newSeed;\r\n    }\r\n}\r\n"
    },
    "openzeppelin-contracts-sol8/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/seed/Seed.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable operator-whitespace\r\n/* solhint-disable space-after-comma */\r\n/* solhint-disable max-states-count */\r\n// solium-disable linebreak-style\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title PrimeDAO Seed contract\r\n * @dev   Smart contract for seed phases of liquid launch.\r\n */\r\ncontract Seed {\r\n    // Locked parameters\r\n    address public beneficiary;\r\n    address public admin;\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n    uint256 public seedAmountRequired; // Amount of seed required for distribution\r\n    uint256 public feeAmountRequired; // Amount of seed required for fee\r\n    uint256 public price; // price of a SeedToken, expressed in fundingTokens, with precision of 10**18\r\n    uint256 public startTime;\r\n    uint256 public endTime; // set by project admin, this is the last resort endTime to be applied when\r\n    //     maximumReached has not been reached by then\r\n    bool public permissionedSeed;\r\n    uint32 public vestingDuration;\r\n    uint32 public vestingCliff;\r\n    IERC20 public seedToken;\r\n    IERC20 public fundingToken;\r\n    uint256 public fee; // Success fee expressed as a % (e.g. 10**18 = 100% fee, 10**16 = 1%)\r\n\r\n    bytes public metadata; // IPFS Hash\r\n\r\n    uint256 internal constant PRECISION = 10**18; // used for precision e.g. 1 ETH = 10**18 wei; toWei(\"1\") = 10**18\r\n\r\n    // Contract logic\r\n    bool public closed; // is the distribution closed\r\n    bool public paused; // is the distribution paused\r\n    bool public isFunded; // distribution can only start when required seed tokens have been funded\r\n    bool public initialized; // is this contract initialized [not necessary that it is funded]\r\n    bool public minimumReached; // if the softCap[minimum limit of funding token] is reached\r\n    bool public maximumReached; // if the hardCap[maximum limit of funding token] is reached\r\n    uint256 public vestingStartTime; // timestamp for when vesting starts, by default == endTime,\r\n    //     otherwise when maximumReached is reached\r\n    uint256 public totalFunderCount; // Total funders that have contributed.\r\n    uint256 public seedRemainder; // Amount of seed tokens remaining to be distributed\r\n    uint256 public seedClaimed; // Amount of seed token claimed by the user.\r\n    uint256 public feeRemainder; // Amount of seed tokens remaining for the fee\r\n    uint256 public fundingCollected; // Amount of funding tokens collected by the seed contract.\r\n    uint256 public fundingWithdrawn; // Amount of funding token withdrawn from the seed contract.\r\n\r\n    mapping(address => bool) public whitelisted; // funders that are whitelisted and allowed to contribute\r\n    mapping(address => FunderPortfolio) public funders; // funder address to funder portfolio\r\n\r\n    event SeedsPurchased(address indexed recipient, uint256 amountPurchased);\r\n    event TokensClaimed(\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        address indexed beneficiary,\r\n        uint256 feeAmount\r\n    );\r\n    event FundingReclaimed(address indexed recipient, uint256 amountReclaimed);\r\n    event MetadataUpdated(bytes indexed metadata);\r\n\r\n    struct FunderPortfolio {\r\n        uint256 totalClaimed; // Total amount of seed tokens claimed\r\n        uint256 fundingAmount; // Total amount of funding tokens contributed\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Seed: caller should be admin\");\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        require(!closed, \"Seed: should not be closed\");\r\n        require(!paused, \"Seed: should not be paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev                          Initialize Seed.\r\n      * @param _beneficiary           The address that recieves fees.\r\n      * @param _admin                 The address of the admin of this contract. Funds contract\r\n                                      and has permissions to whitelist users, pause and close contract.\r\n      * @param _tokens                Array containing two params:\r\n                                        - The address of the seed token being distributed.\r\n      *                                 - The address of the funding token being exchanged for seed token.\r\n      * @param _softHardThresholds    Array containing two params:\r\n                                        - the minimum funding token collection threshold in wei denomination.\r\n                                        - the highest possible funding token amount to be raised in wei denomination.\r\n      * @param _price                 price of a SeedToken, expressed in fundingTokens, with precision of 10**18\r\n      * @param _startTime             Distribution start time in unix timecode.\r\n      * @param _endTime               Distribution end time in unix timecode.\r\n      * @param _vestingDuration       Vesting period duration in seconds.\r\n      * @param _vestingCliff          Cliff duration in seconds.\r\n      * @param _permissionedSeed      Set to true if only whitelisted adresses are allowed to participate.\r\n      * @param _fee                   Success fee expressed as a % (e.g. 10**18 = 100% fee, toWei('1') = 100%)\r\n    */\r\n    function initialize(\r\n        address _beneficiary,\r\n        address _admin,\r\n        address[] memory _tokens,\r\n        uint256[] memory _softHardThresholds,\r\n        uint256 _price,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint32 _vestingDuration,\r\n        uint32 _vestingCliff,\r\n        bool _permissionedSeed,\r\n        uint256 _fee\r\n    ) external {\r\n        require(!initialized, \"Seed: contract already initialized\");\r\n        initialized = true;\r\n\r\n        // parameter check\r\n        require(\r\n            _tokens[0] != _tokens[1],\r\n            \"SeedFactory: seedToken cannot be fundingToken\"\r\n        );\r\n        require(\r\n            _softHardThresholds[1] >= _softHardThresholds[0],\r\n            \"SeedFactory: hardCap cannot be less than softCap\"\r\n        );\r\n        require(\r\n            _vestingDuration >= _vestingCliff,\r\n            \"SeedFactory: vestingDuration cannot be less than vestingCliff\"\r\n        );\r\n        require(\r\n            _endTime > _startTime,\r\n            \"SeedFactory: endTime cannot be less than equal to startTime\"\r\n        );\r\n\r\n        beneficiary = _beneficiary;\r\n        admin = _admin;\r\n        softCap = _softHardThresholds[0];\r\n        hardCap = _softHardThresholds[1];\r\n        price = _price;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        vestingStartTime = endTime;\r\n        vestingDuration = _vestingDuration;\r\n        vestingCliff = _vestingCliff;\r\n        permissionedSeed = _permissionedSeed;\r\n        seedToken = IERC20(_tokens[0]);\r\n        fundingToken = IERC20(_tokens[1]);\r\n        fee = _fee;\r\n\r\n        seedAmountRequired = (hardCap * PRECISION) / _price;\r\n        // (seedAmountRequired*fee) / (100*FEE_PRECISION) = (seedAmountRequired*fee) / PRECISION\r\n        //  where FEE_PRECISION = 10**16\r\n        feeAmountRequired = (seedAmountRequired * fee) / PRECISION;\r\n        seedRemainder = seedAmountRequired;\r\n        feeRemainder = feeAmountRequired;\r\n    }\r\n\r\n    /**\r\n     * @dev                     Buy seed tokens.\r\n     * @param _fundingAmount    The amount of funding tokens to contribute.\r\n     */\r\n    function buy(uint256 _fundingAmount)\r\n        external\r\n        isActive\r\n        returns (uint256, uint256)\r\n    {\r\n        require(!maximumReached, \"Seed: maximum funding reached\");\r\n        require(\r\n            !permissionedSeed || whitelisted[msg.sender],\r\n            \"Seed: sender has no rights\"\r\n        );\r\n        require(\r\n            endTime >= block.timestamp && startTime <= block.timestamp,\r\n            \"Seed: only allowed during distribution period\"\r\n        );\r\n        if (!isFunded) {\r\n            require(\r\n                seedToken.balanceOf(address(this)) >=\r\n                    seedAmountRequired + feeAmountRequired,\r\n                \"Seed: sufficient seeds not provided\"\r\n            );\r\n            isFunded = true;\r\n        }\r\n        // fundingAmount is an amount of fundingTokens required to buy _seedAmount of SeedTokens\r\n        uint256 seedAmount = (_fundingAmount * PRECISION) / price;\r\n\r\n        // feeAmount is an amount of fee we are going to get in seedTokens\r\n        uint256 feeAmount = (seedAmount * fee) / PRECISION;\r\n\r\n        // seed amount vested per second > zero, i.e. amountVestedPerSecond = seedAmount/vestingDuration\r\n        require(\r\n            seedAmount >= vestingDuration,\r\n            \"Seed: amountVestedPerSecond > 0\"\r\n        );\r\n\r\n        // total fundingAmount should not be greater than the hardCap\r\n        require(\r\n            fundingCollected + _fundingAmount <= hardCap,\r\n            \"Seed: amount exceeds contract sale hardCap\"\r\n        );\r\n\r\n        fundingCollected += _fundingAmount;\r\n\r\n        // the amount of seed tokens still to be distributed\r\n        seedRemainder -= seedAmount;\r\n        feeRemainder -= feeAmount;\r\n\r\n        if (fundingCollected >= softCap) {\r\n            minimumReached = true;\r\n        }\r\n        if (fundingCollected >= hardCap) {\r\n            maximumReached = true;\r\n            vestingStartTime = block.timestamp;\r\n        }\r\n\r\n        //functionality of addFunder\r\n        if (funders[msg.sender].fundingAmount == 0) {\r\n            totalFunderCount++;\r\n        }\r\n        funders[msg.sender].fundingAmount += _fundingAmount;\r\n\r\n        // Here we are sending amount of tokens to pay for seed tokens to purchase\r\n        require(\r\n            fundingToken.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _fundingAmount\r\n            ),\r\n            \"Seed: funding token transferFrom failed\"\r\n        );\r\n\r\n        emit SeedsPurchased(msg.sender, seedAmount);\r\n\r\n        return (seedAmount, feeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev                     Claim vested seed tokens.\r\n     * @param _funder           Address of funder to calculate seconds and amount claimable\r\n     * @param _claimAmount      The amount of seed token a users wants to claim.\r\n     */\r\n    function claim(address _funder, uint256 _claimAmount)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        require(minimumReached, \"Seed: minimum funding amount not met\");\r\n        require(\r\n            endTime < block.timestamp || maximumReached,\r\n            \"Seed: the distribution has not yet finished\"\r\n        );\r\n        uint256 amountClaimable;\r\n\r\n        amountClaimable = calculateClaim(_funder);\r\n        require(amountClaimable > 0, \"Seed: amount claimable is 0\");\r\n        require(\r\n            amountClaimable >= _claimAmount,\r\n            \"Seed: request is greater than claimable amount\"\r\n        );\r\n        uint256 feeAmountOnClaim = (_claimAmount * fee) / PRECISION;\r\n\r\n        funders[_funder].totalClaimed += _claimAmount;\r\n\r\n        seedClaimed += _claimAmount;\r\n        require(\r\n            seedToken.transfer(beneficiary, feeAmountOnClaim) &&\r\n                seedToken.transfer(_funder, _claimAmount),\r\n            \"Seed: seed token transfer failed\"\r\n        );\r\n\r\n        emit TokensClaimed(\r\n            _funder,\r\n            _claimAmount,\r\n            beneficiary,\r\n            feeAmountOnClaim\r\n        );\r\n\r\n        return feeAmountOnClaim;\r\n    }\r\n\r\n    /**\r\n     * @dev         Returns funding tokens to user.\r\n     */\r\n    function retrieveFundingTokens() external returns (uint256) {\r\n        require(\r\n            startTime <= block.timestamp,\r\n            \"Seed: distribution haven't started\"\r\n        );\r\n        require(!minimumReached, \"Seed: minimum funding amount met\");\r\n        FunderPortfolio storage tokenFunder = funders[msg.sender];\r\n        uint256 fundingAmount = tokenFunder.fundingAmount;\r\n        require(fundingAmount > 0, \"Seed: zero funding amount\");\r\n        seedRemainder += seedAmountForFunder(msg.sender);\r\n        feeRemainder += feeForFunder(msg.sender);\r\n        totalFunderCount--;\r\n        tokenFunder.fundingAmount = 0;\r\n        fundingCollected -= fundingAmount;\r\n        require(\r\n            fundingToken.transfer(msg.sender, fundingAmount),\r\n            \"Seed: cannot return funding tokens to msg.sender\"\r\n        );\r\n        emit FundingReclaimed(msg.sender, fundingAmount);\r\n\r\n        return fundingAmount;\r\n    }\r\n\r\n    // ADMIN ACTIONS\r\n\r\n    /**\r\n     * @dev                     Pause distribution.\r\n     */\r\n    function pause() external onlyAdmin isActive {\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev                     Unpause distribution.\r\n     */\r\n    function unpause() external onlyAdmin {\r\n        require(closed != true, \"Seed: should not be closed\");\r\n        require(paused == true, \"Seed: should be paused\");\r\n\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n      * @dev                Shut down contributions (buying).\r\n                            Supersedes the normal logic that eventually shuts down buying anyway.\r\n                            Also shuts down the admin's ability to alter the whitelist.\r\n    */\r\n    function close() external onlyAdmin {\r\n        // close seed token distribution\r\n        require(!closed, \"Seed: should not be closed\");\r\n        closed = true;\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev                     retrieve remaining seed tokens back to project.\r\n     * @param _refundReceiver   refund receiver address\r\n     */\r\n    function retrieveSeedTokens(address _refundReceiver) external onlyAdmin {\r\n        // transfer seed tokens back to admin\r\n        /*\r\n            Can't withdraw seed tokens until buying has ended and\r\n            therefore the number of distributable seed tokens can no longer change.\r\n        */\r\n        require(\r\n            closed || maximumReached || block.timestamp >= endTime,\r\n            \"Seed: The ability to buy seed tokens must have ended before remaining seed tokens can be withdrawn\"\r\n        );\r\n        if (!minimumReached) {\r\n            require(\r\n                seedToken.transfer(\r\n                    _refundReceiver,\r\n                    seedToken.balanceOf(address(this))\r\n                ),\r\n                \"Seed: should transfer seed tokens to refund receiver\"\r\n            );\r\n        } else {\r\n            // seed tokens to transfer = balance of seed tokens - totalSeedDistributed\r\n            uint256 totalSeedDistributed = (seedAmountRequired +\r\n                feeAmountRequired) - (seedRemainder + feeRemainder);\r\n            uint256 amountToTransfer = seedToken.balanceOf(address(this)) -\r\n                totalSeedDistributed;\r\n            require(\r\n                seedToken.transfer(_refundReceiver, amountToTransfer),\r\n                \"Seed: should transfer seed tokens to refund receiver\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev                     Add address to whitelist.\r\n     * @param _buyer            Address which needs to be whitelisted\r\n     */\r\n    function whitelist(address _buyer) external onlyAdmin {\r\n        require(!closed, \"Seed: should not be closed\");\r\n        require(permissionedSeed == true, \"Seed: seed is not whitelisted\");\r\n\r\n        whitelisted[_buyer] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev                     Add multiple addresses to whitelist.\r\n     * @param _buyers           Array of addresses to whitelist addresses in batch\r\n     */\r\n    function whitelistBatch(address[] memory _buyers) external onlyAdmin {\r\n        require(!closed, \"Seed: should not be closed\");\r\n        require(permissionedSeed == true, \"Seed: seed is not whitelisted\");\r\n        for (uint256 i = 0; i < _buyers.length; i++) {\r\n            whitelisted[_buyers[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev                     Remove address from whitelist.\r\n     * @param buyer             Address which needs to be unwhitelisted\r\n     */\r\n    function unwhitelist(address buyer) external onlyAdmin {\r\n        require(!closed, \"Seed: should not be closed\");\r\n        require(permissionedSeed == true, \"Seed: seed is not whitelisted\");\r\n\r\n        whitelisted[buyer] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev                     Withdraw funds from the contract\r\n     */\r\n    function withdraw() external onlyAdmin {\r\n        /*\r\n            Admin can't withdraw funding tokens until buying has ended and\r\n            therefore contributors can no longer withdraw their funding tokens.\r\n        */\r\n        require(\r\n            maximumReached || (minimumReached && block.timestamp >= endTime),\r\n            \"Seed: cannot withdraw while funding tokens can still be withdrawn by contributors\"\r\n        );\r\n        uint256 pendingFundingBalance = fundingCollected - fundingWithdrawn;\r\n        fundingWithdrawn = fundingCollected;\r\n        fundingToken.transfer(msg.sender, pendingFundingBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev                     Updates metadata.\r\n     * @param _metadata         Seed contract metadata, that is IPFS Hash\r\n     */\r\n    function updateMetadata(bytes memory _metadata) external {\r\n        require(\r\n            initialized != true || msg.sender == admin,\r\n            \"Seed: contract should not be initialized or caller should be admin\"\r\n        );\r\n        metadata = _metadata;\r\n        emit MetadataUpdated(_metadata);\r\n    }\r\n\r\n    // GETTER FUNCTIONS\r\n    /**\r\n     * @dev                     Calculates the maximum claim\r\n     * @param _funder           Address of funder to find the maximum claim\r\n     */\r\n    function calculateClaim(address _funder) public view returns (uint256) {\r\n        FunderPortfolio storage tokenFunder = funders[_funder];\r\n\r\n        if (block.timestamp < vestingStartTime) {\r\n            return 0;\r\n        }\r\n\r\n        // Check cliff was reached\r\n        uint256 elapsedSeconds = block.timestamp - vestingStartTime;\r\n\r\n        if (elapsedSeconds < vestingCliff) {\r\n            return 0;\r\n        }\r\n\r\n        // If over vesting duration, all tokens vested\r\n        if (elapsedSeconds >= vestingDuration) {\r\n            return seedAmountForFunder(_funder) - tokenFunder.totalClaimed;\r\n        } else {\r\n            uint256 amountVested = (elapsedSeconds *\r\n                seedAmountForFunder(_funder)) / vestingDuration;\r\n            return amountVested - tokenFunder.totalClaimed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev                     Amount of seed tokens claimed as fee\r\n     */\r\n    function feeClaimed() public view returns (uint256) {\r\n        return (seedClaimed * fee) / PRECISION;\r\n    }\r\n\r\n    /**\r\n     * @dev                     get fee claimed for funder\r\n     * @param _funder           address of funder to check fee claimed\r\n     */\r\n    function feeClaimedForFunder(address _funder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (funders[_funder].totalClaimed * fee) / PRECISION;\r\n    }\r\n\r\n    /**\r\n     * @dev                     get fee for funder\r\n     * @param _funder           address of funder to check fee\r\n     */\r\n    function feeForFunder(address _funder) public view returns (uint256) {\r\n        return (seedAmountForFunder(_funder) * fee) / PRECISION;\r\n    }\r\n\r\n    /**\r\n     * @dev                     get seed amount for funder\r\n     * @param _funder           address of funder to seed amount\r\n     */\r\n    function seedAmountForFunder(address _funder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (funders[_funder].fundingAmount * PRECISION) / price;\r\n    }\r\n}\r\n"
    },
    "openzeppelin-contracts-sol8/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "openzeppelin-contracts-sol8/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/test/PrimeToken.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable linebreak-style\r\n\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/extensions/ERC20Capped.sol\";\r\n\r\ncontract PrimeToken is ERC20Capped {\r\n    constructor(\r\n        uint256 initialSupply,\r\n        uint256 cap,\r\n        address genesisMultisig\r\n    ) public ERC20(\"PrimeDAO Token\", \"PRIME\") ERC20Capped(cap) {\r\n        require(initialSupply <= cap); // _mint from ERC20 is not protected\r\n        ERC20._mint(genesisMultisig, initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/test/ERC20Mock.sol": {
      "content": "// solium-disable linebreak-style\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\r\n\r\ncontract ERC20Mock is ERC20 {\r\n    uint256 public constant initialSupply = 20000000000000000000000;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/test/CustomERC20Mock.sol": {
      "content": "// solium-disable linebreak-style\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract CustomERC20Mock is ERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {\r\n        _balances[msg.sender] += 20000000000000000000000;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        bool success = _customTransfer(_msgSender(), recipient, amount);\r\n        return success;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance < amount) {\r\n            return false;\r\n        }\r\n\r\n        bool success = _customTransfer(sender, recipient, amount);\r\n        if (success) {\r\n            /* solium-disable */\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n            /* solium-enable */\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function burn(address account) public {\r\n        _balances[account] = 0;\r\n    }\r\n\r\n    function _customTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual returns (bool) {\r\n        uint256 senderBalance = _balances[sender];\r\n        if (\r\n            sender == address(0) ||\r\n            recipient == address(0) ||\r\n            senderBalance < amount\r\n        ) {\r\n            return false;\r\n        }\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/Reputation.sol": {
      "content": "/*\r\n\r\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\r\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\r\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\r\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\r\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\r\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\r\n\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n// solium-disable linebreak-style\r\n\r\npragma solidity 0.8.6;\r\n\r\nimport \"openzeppelin-contracts-sol8/token/ERC20/ERC20.sol\";\r\nimport \"openzeppelin-contracts-sol8/access/Ownable.sol\";\r\n\r\n/**\r\n * @title PrimeDAO Reputation contract\r\n * @dev   Reputation is a non-transferable ERC20 token used for PrimeDAO Governance.\r\n */\r\ncontract Reputation is ERC20, Ownable {\r\n    modifier validInput(\r\n        address[] memory _repRecipients,\r\n        uint256[] memory _repAmounts\r\n    ) {\r\n        require(\r\n            _repRecipients.length == _repAmounts.length,\r\n            \"Reputation: number of reputation holders doesn't match number of reputation amounts\"\r\n        );\r\n        require(\r\n            _repRecipients.length <= 200,\r\n            \"Reputation: maximum number of reputation holders and amounts of 200 was exceeded\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev                  Reputation constructor function.\r\n     */\r\n    constructor(string memory _tokenName, string memory _tokenSymbol)\r\n        ERC20(_tokenName, _tokenSymbol)\r\n    {}\r\n\r\n    /**\r\n     * @dev  Overrides standard ERC20 transfer function, to make tokens non-trasferable.\r\n     * @param recipient     unused parameter.\r\n     * @param amount        unused parameter.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev                 Overrides standard ERC20 transferFrom function, to make tokens non-trasferable.\r\n     * @param sender        unused parameter.\r\n     * @param recipient     unused parameter.\r\n     * @param amount        unused parameter.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev                  Mints reputation to a given address.\r\n     * @param _repRecipient  adress that rep is being minted to.\r\n     * @param _repAmount     amount of reputation to be minted.\r\n     */\r\n    function mint(address _repRecipient, uint256 _repAmount) public onlyOwner {\r\n        ERC20._mint(_repRecipient, _repAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev                   Mints reputation for multiple adresses.\r\n     * @param _repRecipients  an array of adresses that rep is being minted to.\r\n     * @param _repAmounts     an array of amounts of reputation to be minted.\r\n     */\r\n    function batchMint(\r\n        address[] memory _repRecipients,\r\n        uint256[] memory _repAmounts\r\n    ) public onlyOwner {\r\n        _batchMint(_repRecipients, _repAmounts);\r\n    }\r\n\r\n    /**\r\n     * @dev                  Burns reputation of a given address.\r\n     * @param _repRecipient  adress that's rep is being burned.\r\n     * @param _repAmount     amount of reputation to be burned.\r\n     */\r\n    function burn(address _repRecipient, uint256 _repAmount) public onlyOwner {\r\n        ERC20._burn(_repRecipient, _repAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev                   Burns reputation of multiple adresses.\r\n     * @param _repRecipients  an array of adresses that's rep is being burned.\r\n     * @param _repAmounts     an array of amounts of reputation to be burned.\r\n     */\r\n    function batchBurn(\r\n        address[] memory _repRecipients,\r\n        uint256[] memory _repAmounts\r\n    ) public onlyOwner {\r\n        _batchBurn(_repRecipients, _repAmounts);\r\n    }\r\n\r\n    // HELPER FUNCTIONS\r\n\r\n    function _batchMint(\r\n        address[] memory _repRecipients,\r\n        uint256[] memory _repAmounts\r\n    ) internal validInput(_repRecipients, _repAmounts) {\r\n        for (uint64 j = 0; j < _repAmounts.length; j++) {\r\n            ERC20._mint(_repRecipients[j], _repAmounts[j]);\r\n        }\r\n    }\r\n\r\n    function _batchBurn(\r\n        address[] memory _repRecipients,\r\n        uint256[] memory _repAmounts\r\n    ) internal validInput(_repRecipients, _repAmounts) {\r\n        for (uint64 j = 0; j < _repAmounts.length; j++) {\r\n            ERC20._burn(_repRecipients[j], _repAmounts[j]);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}