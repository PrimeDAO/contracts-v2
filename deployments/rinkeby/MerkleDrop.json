{
  "address": "0x34EC62D47c245D102Da25a2110dDd5873A90a2d3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "week",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "RemovedFunder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "TrancheAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "TrancheExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimTranche",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trancheId",
          "type": "uint256"
        }
      ],
      "name": "expireTranche",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_nexus",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_funders",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_thresholdBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nexus",
      "outputs": [
        {
          "internalType": "contract INexus",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAllocation",
          "type": "uint256"
        }
      ],
      "name": "seedNewAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trancheId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "thresholdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5619d4d88561d7bf3814bee9ff40111b5be0ff973ced95fbdfa94e18d94607f0",
  "receipt": {
    "to": null,
    "from": "0xA39E6E44A735869eC047D6c50702e6beEBe36b6B",
    "contractAddress": "0x34EC62D47c245D102Da25a2110dDd5873A90a2d3",
    "transactionIndex": 7,
    "gasUsed": "1957417",
    "logsBloom": "0x
    "blockHash": "0xf1ce98dff389cb163b553c3b9039dccf9e7752b8b94f05126aa20c7e3fa9a626",
    "transactionHash": "0x5619d4d88561d7bf3814bee9ff40111b5be0ff973ced95fbdfa94e18d94607f0",
    "logs": [],
    "blockNumber": 8969138,
    "cumulativeGasUsed": "5285156",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "be8fa9525a2cd30e7f097d1be54e3bd1",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedFunder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"TrancheExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheId\",\"type\":\"uint256\"}],\"name\":\"expireTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_funders\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"}],\"name\":\"seedNewAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thresholdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"claimTranche(address,uint256,uint256,bytes32[])\":{\"notice\":\"************************************* CLAIMING***************************************\"},\"seedNewAllocations(bytes32,uint256)\":{\"notice\":\"************************************* ADMIN***************************************\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/prime_token_v2/MerkleDrop.sol\":\"MerkleDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModule } from \\\"../shared/InitializableModule.sol\\\";\\n\\n/**\\n * @title   InitializableGovernableWhitelist\\n * @author  Stability Labs Pty. Ltd.\\n * @notice  Contract to store whitelisted address. The onlyWhitelisted() modifier should be used\\n *          to allow the function calls only from the whitelisted addresses.\\n * @dev     Implementing contracts are responsible for adding their own add and remove methods\\n *          as the original purpose of this whitelist is for read optimisation.\\n */\\ncontract InitializableGovernableWhitelist is InitializableModule {\\n\\n    event Whitelisted(address indexed _address);\\n\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the whitelisted address.\\n     */\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"Not a whitelisted address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     * @param _whitelisted Array of whitelisted addresses.\\n     */\\n    function _initialize(\\n        address _nexus,\\n        address[] memory _whitelisted\\n    )\\n        internal\\n    {\\n        InitializableModule._initialize(_nexus);\\n\\n        require(_whitelisted.length > 0, \\\"Empty whitelist array\\\");\\n\\n        for(uint256 i = 0; i < _whitelisted.length; i++) {\\n            _addWhitelist(_whitelisted[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a new whitelist address\\n     * @param _address Address to add in whitelist\\n     */\\n    function _addWhitelist(address _address) internal {\\n        require(_address != address(0), \\\"Address is zero\\\");\\n        require(! whitelist[_address], \\\"Already whitelisted\\\");\\n\\n        whitelist[_address] = true;\\n\\n        emit Whitelisted(_address);\\n    }\\n\\n}\",\"keccak256\":\"0xda302d020b1282b552c24a495a5770cf8cec4350694afd0932fbfb66978042b1\"},\"@mstable/protocol/contracts/interfaces/INexus.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n  * @title INexus\\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\\n  */\\ninterface INexus {\\n    function governor() external view returns (address);\\n    function getModule(bytes32 key) external view returns (address);\\n\\n    function proposeModule(bytes32 _key, address _addr) external;\\n    function cancelProposedModule(bytes32 _key) external;\\n    function acceptProposedModule(bytes32 _key) external;\\n    function acceptProposedModules(bytes32[] calldata _keys) external;\\n\\n    function requestLockModule(bytes32 _key) external;\\n    function cancelLockModule(bytes32 _key) external;\\n    function lockModule(bytes32 _key) external;\\n}\",\"keccak256\":\"0x8ac00cbb7588f1aea0b7a8a0ac0b1d8b12ae097e3fc0ec03aa6a5e45c4a2d9fd\"},\"@mstable/protocol/contracts/shared/InitializableModule.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\nimport { InitializableModuleKeys } from \\\"./InitializableModuleKeys.sol\\\";\\nimport { INexus } from \\\"../interfaces/INexus.sol\\\";\\n\\n/**\\n * @title   InitializableModule\\n * @author  Stability Labs Pty. Ltd.\\n * @dev     Subscribes to module updates from a given publisher and reads from its registry.\\n *          Contract is used for upgradable proxy contracts.\\n */\\ncontract InitializableModule is InitializableModuleKeys {\\n\\n    INexus public nexus;\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor(), \\\"Only governor can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Governance.\\n     *      Governance is either Governor address or Governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(\\n            msg.sender == _governor() || msg.sender == _governance(),\\n            \\\"Only governance can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\\n     */\\n    modifier onlyProxyAdmin() {\\n        require(\\n            msg.sender == _proxyAdmin(), \\\"Only ProxyAdmin can execute\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to allow function calls only from the Manager.\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == _manager(), \\\"Only manager can execute\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialization function for upgradable proxy contracts\\n     * @param _nexus Nexus contract address\\n     */\\n    function _initialize(address _nexus) internal {\\n        require(_nexus != address(0), \\\"Nexus address is zero\\\");\\n        nexus = INexus(_nexus);\\n        InitializableModuleKeys._initialize();\\n    }\\n\\n    /**\\n     * @dev Returns Governor address from the Nexus\\n     * @return Address of Governor Contract\\n     */\\n    function _governor() internal view returns (address) {\\n        return nexus.governor();\\n    }\\n\\n    /**\\n     * @dev Returns Governance Module address from the Nexus\\n     * @return Address of the Governance (Phase 2)\\n     */\\n    function _governance() internal view returns (address) {\\n        return nexus.getModule(KEY_GOVERNANCE);\\n    }\\n\\n    /**\\n     * @dev Return Staking Module address from the Nexus\\n     * @return Address of the Staking Module contract\\n     */\\n    function _staking() internal view returns (address) {\\n        return nexus.getModule(KEY_STAKING);\\n    }\\n\\n    /**\\n     * @dev Return ProxyAdmin Module address from the Nexus\\n     * @return Address of the ProxyAdmin Module contract\\n     */\\n    function _proxyAdmin() internal view returns (address) {\\n        return nexus.getModule(KEY_PROXY_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Return MetaToken Module address from the Nexus\\n     * @return Address of the MetaToken Module contract\\n     */\\n    function _metaToken() internal view returns (address) {\\n        return nexus.getModule(KEY_META_TOKEN);\\n    }\\n\\n    /**\\n     * @dev Return OracleHub Module address from the Nexus\\n     * @return Address of the OracleHub Module contract\\n     */\\n    function _oracleHub() internal view returns (address) {\\n        return nexus.getModule(KEY_ORACLE_HUB);\\n    }\\n\\n    /**\\n     * @dev Return Manager Module address from the Nexus\\n     * @return Address of the Manager Module contract\\n     */\\n    function _manager() internal view returns (address) {\\n        return nexus.getModule(KEY_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return SavingsManager Module address from the Nexus\\n     * @return Address of the SavingsManager Module contract\\n     */\\n    function _savingsManager() internal view returns (address) {\\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\\n    }\\n\\n    /**\\n     * @dev Return Recollateraliser Module address from the Nexus\\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\\n     */\\n    function _recollateraliser() internal view returns (address) {\\n        return nexus.getModule(KEY_RECOLLATERALISER);\\n    }\\n}\\n\",\"keccak256\":\"0xda15abf73529ae7255529b4a69b9e202901eb09b4e32703277539f23002d95f9\"},\"@mstable/protocol/contracts/shared/InitializableModuleKeys.sol\":{\"content\":\"pragma solidity 0.5.16;\\n\\n/**\\n * @title  InitializableModuleKeys\\n * @author Stability Labs Pty. Ltd.\\n * @notice Provides system wide access to the byte32 represntations of system modules\\n *         This allows each system module to be able to reference and update one another in a\\n *         friendly way. Contract is used for upgradable proxy contracts.\\n * @dev    The contract is a replica of ModuleKeys.sol\\n *         The following variables are to be assigned only once from initialize() function.\\n *         Hence, the variable names are declared in UPPER_CASE to indicate constants.\\n */\\ncontract InitializableModuleKeys {\\n\\n    // Governance                             // Phases\\n    bytes32 internal KEY_GOVERNANCE;          // 2.x\\n    bytes32 internal KEY_STAKING;             // 1.2\\n    bytes32 internal KEY_PROXY_ADMIN;         // 1.0\\n\\n    // mStable\\n    bytes32 internal KEY_ORACLE_HUB;          // 1.2\\n    bytes32 internal KEY_MANAGER;             // 1.2\\n    bytes32 internal KEY_RECOLLATERALISER;    // 2.x\\n    bytes32 internal KEY_META_TOKEN;          // 1.1\\n    bytes32 internal KEY_SAVINGS_MANAGER;     // 1.0\\n\\n    /**\\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\\n     *      via Proxy to initialize constants in the Proxy contract.\\n     */\\n    function _initialize() internal {\\n        // keccak256() values are evaluated only once at the time of this function call.\\n        // Hence, no need to assign hard-coded values to these variables.\\n        KEY_GOVERNANCE = keccak256(\\\"Governance\\\");\\n        KEY_STAKING = keccak256(\\\"Staking\\\");\\n        KEY_PROXY_ADMIN = keccak256(\\\"ProxyAdmin\\\");\\n\\n        KEY_ORACLE_HUB = keccak256(\\\"OracleHub\\\");\\n        KEY_MANAGER = keccak256(\\\"Manager\\\");\\n        KEY_RECOLLATERALISER = keccak256(\\\"Recollateraliser\\\");\\n        KEY_META_TOKEN = keccak256(\\\"MetaToken\\\");\\n        KEY_SAVINGS_MANAGER = keccak256(\\\"SavingsManager\\\");\\n    }\\n}\",\"keccak256\":\"0x91d0d4423c80b93848d8f0af8b8b18ab21c9eaf764374d65564c923ba0c299a2\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/prime_token_v2/MerkleDrop.sol\":{\"content\":\"pragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport { MerkleProof } from \\\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"openzeppelin-contracts-sol5/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { InitializableGovernableWhitelist } from \\\"@mstable/protocol/contracts/governance/InitializableGovernableWhitelist.sol\\\";\\n\\ncontract MerkleDrop is Initializable, InitializableGovernableWhitelist {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event Claimed(address claimant, uint256 week, uint256 balance);\\n    event TrancheAdded(uint256 tranche, bytes32 merkleRoot, uint256 totalAmount);\\n    event TrancheExpired(uint256 tranche);\\n    event RemovedFunder(address indexed _address);\\n\\n    IERC20 public token;\\n\\n    mapping(uint256 => bytes32) public merkleRoots;\\n    mapping(uint256 => mapping(address => bool)) public claimed;\\n    uint256 tranches;\\n\\n    uint256 public thresholdBlock;\\n\\n    function initialize(\\n        address _nexus,\\n        address[] calldata _funders,\\n        IERC20 _token,\\n        uint256 _thresholdBlock\\n    )\\n        external\\n        initializer\\n    {\\n        InitializableGovernableWhitelist._initialize(_nexus, _funders);\\n        token = _token;\\n        thresholdBlock = _thresholdBlock;\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    function seedNewAllocations(bytes32 _merkleRoot, uint256 _totalAllocation)\\n        public\\n        onlyWhitelisted\\n        returns (uint256 trancheId)\\n    {\\n        token.transferFrom(msg.sender, address(this), _totalAllocation);\\n\\n        trancheId = tranches;\\n        merkleRoots[trancheId] = _merkleRoot;\\n\\n        tranches = tranches.add(1);\\n\\n        emit TrancheAdded(trancheId, _merkleRoot, _totalAllocation);\\n    }\\n\\n    function expireTranche(uint256 _trancheId)\\n        public\\n        onlyWhitelisted\\n    {\\n        merkleRoots[_trancheId] = bytes32(0);\\n\\n        emit TrancheExpired(_trancheId);\\n    }\\n\\n\\n    /***************************************\\n                  CLAIMING\\n    ****************************************/\\n\\n\\n    function claimTranche(\\n        address _liquidityProvider,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    )\\n        public\\n    {\\n        require(block.number >= thresholdBlock, \\\"Rewards are not yet claimable\\\");\\n        _claimTranche(_liquidityProvider, _tranche, _balance, _merkleProof);\\n        _disburse(_liquidityProvider, _balance);\\n    }\\n\\n\\n    function verifyClaim(\\n        address _liquidityProvider,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    )\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        return _verifyClaim(_liquidityProvider, _tranche, _balance, _merkleProof);\\n    }\\n\\n\\n    /***************************************\\n              CLAIMING - INTERNAL\\n    ****************************************/\\n\\n\\n    function _claimTranche(\\n        address _liquidityProvider,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    )\\n        private\\n    {\\n        require(_tranche < tranches, \\\"Week cannot be in the future\\\");\\n\\n        require(!claimed[_tranche][_liquidityProvider], \\\"LP has already claimed\\\");\\n        require(_verifyClaim(_liquidityProvider, _tranche, _balance, _merkleProof), \\\"Incorrect merkle proof\\\");\\n\\n        claimed[_tranche][_liquidityProvider] = true;\\n\\n        emit Claimed(_liquidityProvider, _tranche, _balance);\\n    }\\n\\n\\n    function _verifyClaim(\\n        address _liquidityProvider,\\n        uint256 _tranche,\\n        uint256 _balance,\\n        bytes32[] memory _merkleProof\\n    )\\n        private\\n        view\\n        returns (bool valid)\\n    {\\n        bytes32 leaf = keccak256(abi.encodePacked(_liquidityProvider, _balance));\\n        return MerkleProof.verify(_merkleProof, merkleRoots[_tranche], leaf);\\n    }\\n\\n\\n    function _disburse(address _liquidityProvider, uint256 _balance) private {\\n        if (_balance > 0) {\\n            token.safeTransfer(_liquidityProvider, _balance);\\n        } else {\\n            revert(\\\"No balance would be transferred - not going to waste your gas\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3660ce2e8032fd7243ce8831b89dee6dc31fb60cee1505c9b96e8b4a65e59f09\"},\"openzeppelin-contracts-sol5/cryptography/MerkleProof.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xf60e60a8f48a3f2cbe2cacb45d5115d8920a3fefed772a283befaec0d29886c2\"},\"openzeppelin-contracts-sol5/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-contracts-sol5/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-contracts-sol5/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"openzeppelin-contracts-sol5/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639b19251a116100715780639b19251a14610178578063a3f5c1d2146101a8578063cd54e72c146101c6578063d5efd20a146101e2578063eb0d07f5146101fe578063fc0c546a1461022e576100a9565b80630af49690146100ae578063120aa877146100ca57806329eb15bd146100fa57806365ef53b11461011857806371c5ecb114610148575b600080fd5b6100c860048036036100c391908101906112e8565b61024c565b005b6100e460048036036100df9190810190611471565b6103cd565b6040516100f19190611d6c565b60405180910390f35b6101026103fc565b60405161010f9190611fb8565b60405180910390f35b610132600480360361012d919081019061140c565b610402565b60405161013f9190611fb8565b60405180910390f35b610162600480360361015d9190810190611448565b6105bc565b60405161016f9190611d87565b60405180910390f35b610192600480360361018d91908101906112bf565b6105d4565b60405161019f9190611d6c565b60405180910390f35b6101b06105f4565b6040516101bd9190611dbd565b60405180910390f35b6101e060048036036101db9190810190611368565b61061a565b005b6101fc60048036036101f79190810190611448565b61067b565b005b61021860048036036102139190810190611368565b61075c565b6040516102259190611d6c565b60405180910390f35b610236610774565b6040516102439190611da2565b60405180910390f35b600060019054906101000a900460ff168061026b575061026a61079a565b5b8061028257506000809054906101000a900460ff16155b6102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890611eb8565b60405180910390fd5b60008060019054906101000a900460ff161590508015610311576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61035c86868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107b1565b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160418190555080156103c55760008060016101000a81548160ff0219169083151502179055505b505050505050565b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60415481565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048790611e98565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104ef93929190611cd5565b602060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061054191908101906113e3565b50604054905082603e600083815260200190815260200160002081905550610575600160405461083b90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516105ae93929190611fd3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60415443101561065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611ed8565b60405180910390fd5b61066b84848484610890565b6106758483610a67565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe90611e98565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf816040516107519190611fb8565b60405180910390a150565b600061076a85858585610b01565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803090506000813b9050600081149250505090565b6107ba82610b58565b60008151116107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590611e78565b60405180910390fd5b60008090505b81518110156108365761082982828151811061081c57fe5b6020026020010151610c14565b8080600101915050610804565b505050565b600080828401905083811015610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90611e38565b60405180910390fd5b8091505092915050565b60405483106108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90611df8565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990611f38565b60405180910390fd5b61097e84848484610b01565b6109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490611e18565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a848484604051610a5993929190611d35565b60405180910390a150505050565b6000811115610ac257610abd8282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610daf9092919063ffffffff16565b610afd565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490611f18565b60405180910390fd5b5050565b6000808584604051602001610b17929190611bbe565b604051602081830303815290604052805190602001209050610b4d83603e60008881526020019081526020016000205483610e4e565b915050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf90611dd8565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c11610efa565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90611f58565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0890611ef8565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b610e49838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610de7929190611d0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fcc565b505050565b60008082905060008090505b8551811015610eec576000868281518110610e7157fe5b60200260200101519050808311610eb2578281604051602001610e95929190611bea565b604051602081830303815290604052805190602001209250610ede565b8083604051602001610ec5929190611bea565b6040516020818303038152906040528051906020012092505b508080600101915050610e5a565b508381149150509392505050565b604051610f0690611c96565b6040518091039020603381905550604051610f2090611c42565b6040518091039020603481905550604051610f3a90611cab565b6040518091039020603581905550604051610f5490611c81565b6040518091039020603681905550604051610f6e90611c6c565b6040518091039020603781905550604051610f8890611c57565b6040518091039020603881905550604051610fa290611cc0565b6040518091039020603981905550604051610fbc90611c2d565b6040518091039020603a81905550565b610feb8273ffffffffffffffffffffffffffffffffffffffff1661113e565b61102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102190611f98565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516110539190611c16565b6000604051808303816000865af19150503d8060008114611090576040519150601f19603f3d011682016040523d82523d6000602084013e611095565b606091505b5091509150816110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d190611e58565b60405180910390fd5b60008151111561113857808060200190516110f891908101906113e3565b611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112e90611f78565b60405180910390fd5b5b50505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561118057506000801b8214155b92505050919050565b600081359050611198816121eb565b92915050565b60008083601f8401126111b057600080fd5b8235905067ffffffffffffffff8111156111c957600080fd5b6020830191508360208202830111156111e157600080fd5b9250929050565b600082601f8301126111f957600080fd5b813561120c61120782612037565b61200a565b9150818183526020840193506020810190508385602084028201111561123157600080fd5b60005b8381101561126157816112478882611280565b845260208401935060208301925050600181019050611234565b5050505092915050565b60008151905061127a81612202565b92915050565b60008135905061128f81612219565b92915050565b6000813590506112a481612230565b92915050565b6000813590506112b981612247565b92915050565b6000602082840312156112d157600080fd5b60006112df84828501611189565b91505092915050565b60008060008060006080868803121561130057600080fd5b600061130e88828901611189565b955050602086013567ffffffffffffffff81111561132b57600080fd5b6113378882890161119e565b9450945050604061134a88828901611295565b925050606061135b888289016112aa565b9150509295509295909350565b6000806000806080858703121561137e57600080fd5b600061138c87828801611189565b945050602061139d878288016112aa565b93505060406113ae878288016112aa565b925050606085013567ffffffffffffffff8111156113cb57600080fd5b6113d7878288016111e8565b91505092959194509250565b6000602082840312156113f557600080fd5b60006114038482850161126b565b91505092915050565b6000806040838503121561141f57600080fd5b600061142d85828601611280565b925050602061143e858286016112aa565b9150509250929050565b60006020828403121561145a57600080fd5b6000611468848285016112aa565b91505092915050565b6000806040838503121561148457600080fd5b6000611492858286016112aa565b92505060206114a385828601611189565b9150509250929050565b6114b6816120f5565b82525050565b6114c581612091565b82525050565b6114dc6114d782612091565b6121a6565b82525050565b6114eb816120a3565b82525050565b6114fa816120af565b82525050565b61151161150c826120af565b6121b8565b82525050565b60006115228261205f565b61152c818561206a565b935061153c818560208601612173565b80840191505092915050565b61155181612107565b82525050565b6115608161212b565b82525050565b6000611573601583612075565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b60006115b3600e83612086565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b60006115f3601c83612075565b91507f5765656b2063616e6e6f7420626520696e2074686520667574757265000000006000830152602082019050919050565b6000611633600783612086565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611673601683612075565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006116b3601b83612075565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006116f3601083612086565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b6000611733602083612075565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b6000611773600783612086565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006117b3601583612075565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b60006117f3601983612075565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b6000611833600983612086565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b6000611873600a83612086565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b60006118b3600a83612086565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b60006118f3602e83612075565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b6000611959601d83612075565b91507f5265776172647320617265206e6f742079657420636c61696d61626c650000006000830152602082019050919050565b6000611999601383612075565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b60006119d9603d83612075565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b6000611a3f601683612075565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b6000611a7f600f83612075565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b6000611abf602a83612075565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b25600983612086565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611b65601f83612075565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ba1816120eb565b82525050565b611bb8611bb3826120eb565b6121d4565b82525050565b6000611bca82856114cb565b601482019150611bda8284611ba7565b6020820191508190509392505050565b6000611bf68285611500565b602082019150611c068284611500565b6020820191508190509392505050565b6000611c228284611517565b915081905092915050565b6000611c38826115a6565b9150819050919050565b6000611c4d82611626565b9150819050919050565b6000611c62826116e6565b9150819050919050565b6000611c7782611766565b9150819050919050565b6000611c8c82611826565b9150819050919050565b6000611ca182611866565b9150819050919050565b6000611cb6826118a6565b9150819050919050565b6000611ccb82611b18565b9150819050919050565b6000606082019050611cea60008301866114ad565b611cf760208301856114bc565b611d046040830184611b98565b949350505050565b6000604082019050611d2160008301856114bc565b611d2e6020830184611b98565b9392505050565b6000606082019050611d4a60008301866114bc565b611d576020830185611b98565b611d646040830184611b98565b949350505050565b6000602082019050611d8160008301846114e2565b92915050565b6000602082019050611d9c60008301846114f1565b92915050565b6000602082019050611db76000830184611548565b92915050565b6000602082019050611dd26000830184611557565b92915050565b60006020820190508181036000830152611df181611566565b9050919050565b60006020820190508181036000830152611e11816115e6565b9050919050565b60006020820190508181036000830152611e3181611666565b9050919050565b60006020820190508181036000830152611e51816116a6565b9050919050565b60006020820190508181036000830152611e7181611726565b9050919050565b60006020820190508181036000830152611e91816117a6565b9050919050565b60006020820190508181036000830152611eb1816117e6565b9050919050565b60006020820190508181036000830152611ed1816118e6565b9050919050565b60006020820190508181036000830152611ef18161194c565b9050919050565b60006020820190508181036000830152611f118161198c565b9050919050565b60006020820190508181036000830152611f31816119cc565b9050919050565b60006020820190508181036000830152611f5181611a32565b9050919050565b60006020820190508181036000830152611f7181611a72565b9050919050565b60006020820190508181036000830152611f9181611ab2565b9050919050565b60006020820190508181036000830152611fb181611b58565b9050919050565b6000602082019050611fcd6000830184611b98565b92915050565b6000606082019050611fe86000830186611b98565b611ff560208301856114f1565b6120026040830184611b98565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561202d57600080fd5b8060405250919050565b600067ffffffffffffffff82111561204e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061209c826120cb565b9050919050565b60008115159050919050565b6000819050919050565b60006120c482612091565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121008261214f565b9050919050565b600061211282612119565b9050919050565b6000612124826120cb565b9050919050565b60006121368261213d565b9050919050565b6000612148826120cb565b9050919050565b600061215a82612161565b9050919050565b600061216c826120cb565b9050919050565b60005b83811015612191578082015181840152602081019050612176565b838111156121a0576000848401525b50505050565b60006121b1826121c2565b9050919050565b6000819050919050565b60006121cd826121de565b9050919050565b6000819050919050565b60008160601b9050919050565b6121f481612091565b81146121ff57600080fd5b50565b61220b816120a3565b811461221657600080fd5b50565b612222816120af565b811461222d57600080fd5b50565b612239816120b9565b811461224457600080fd5b50565b612250816120eb565b811461225b57600080fd5b5056fea365627a7a7231582082d0e18f76cf7f2204032a897458dc9a7632b2b412b1d3bcd3a9b475b3ee74de6c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80639b19251a116100715780639b19251a14610178578063a3f5c1d2146101a8578063cd54e72c146101c6578063d5efd20a146101e2578063eb0d07f5146101fe578063fc0c546a1461022e576100a9565b80630af49690146100ae578063120aa877146100ca57806329eb15bd146100fa57806365ef53b11461011857806371c5ecb114610148575b600080fd5b6100c860048036036100c391908101906112e8565b61024c565b005b6100e460048036036100df9190810190611471565b6103cd565b6040516100f19190611d6c565b60405180910390f35b6101026103fc565b60405161010f9190611fb8565b60405180910390f35b610132600480360361012d919081019061140c565b610402565b60405161013f9190611fb8565b60405180910390f35b610162600480360361015d9190810190611448565b6105bc565b60405161016f9190611d87565b60405180910390f35b610192600480360361018d91908101906112bf565b6105d4565b60405161019f9190611d6c565b60405180910390f35b6101b06105f4565b6040516101bd9190611dbd565b60405180910390f35b6101e060048036036101db9190810190611368565b61061a565b005b6101fc60048036036101f79190810190611448565b61067b565b005b61021860048036036102139190810190611368565b61075c565b6040516102259190611d6c565b60405180910390f35b610236610774565b6040516102439190611da2565b60405180910390f35b600060019054906101000a900460ff168061026b575061026a61079a565b5b8061028257506000809054906101000a900460ff16155b6102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890611eb8565b60405180910390fd5b60008060019054906101000a900460ff161590508015610311576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61035c86868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107b1565b82603d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160418190555080156103c55760008060016101000a81548160ff0219169083151502179055505b505050505050565b603f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60415481565b6000603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048790611e98565b60405180910390fd5b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104ef93929190611cd5565b602060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061054191908101906113e3565b50604054905082603e600083815260200190815260200160002081905550610575600160405461083b90919063ffffffff16565b6040819055507f5c8770684b8f82e9ade880fb05ccfb53c969170cd40e9746a3703f241c9023ec8184846040516105ae93929190611fd3565b60405180910390a192915050565b603e6020528060005260406000206000915090505481565b603c6020528060005260406000206000915054906101000a900460ff1681565b603b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60415443101561065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611ed8565b60405180910390fd5b61066b84848484610890565b6106758483610a67565b50505050565b603c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe90611e98565b60405180910390fd5b6000801b603e6000838152602001908152602001600020819055507fcc071cbd9ae50a4c78d1153b76bd2d46ba8d4c7662842718ec3de1d67a144daf816040516107519190611fb8565b60405180910390a150565b600061076a85858585610b01565b9050949350505050565b603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803090506000813b9050600081149250505090565b6107ba82610b58565b60008151116107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590611e78565b60405180910390fd5b60008090505b81518110156108365761082982828151811061081c57fe5b6020026020010151610c14565b8080600101915050610804565b505050565b600080828401905083811015610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d90611e38565b60405180910390fd5b8091505092915050565b60405483106108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90611df8565b60405180910390fd5b603f600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990611f38565b60405180910390fd5b61097e84848484610b01565b6109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490611e18565b60405180910390fd5b6001603f600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a848484604051610a5993929190611d35565b60405180910390a150505050565b6000811115610ac257610abd8282603d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610daf9092919063ffffffff16565b610afd565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490611f18565b60405180910390fd5b5050565b6000808584604051602001610b17929190611bbe565b604051602081830303815290604052805190602001209050610b4d83603e60008881526020019081526020016000205483610e4e565b915050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf90611dd8565b60405180910390fd5b80603b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c11610efa565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90611f58565b60405180910390fd5b603c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0890611ef8565b60405180910390fd5b6001603c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5460405160405180910390a250565b610e49838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401610de7929190611d0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fcc565b505050565b60008082905060008090505b8551811015610eec576000868281518110610e7157fe5b60200260200101519050808311610eb2578281604051602001610e95929190611bea565b604051602081830303815290604052805190602001209250610ede565b8083604051602001610ec5929190611bea565b6040516020818303038152906040528051906020012092505b508080600101915050610e5a565b508381149150509392505050565b604051610f0690611c96565b6040518091039020603381905550604051610f2090611c42565b6040518091039020603481905550604051610f3a90611cab565b6040518091039020603581905550604051610f5490611c81565b6040518091039020603681905550604051610f6e90611c6c565b6040518091039020603781905550604051610f8890611c57565b6040518091039020603881905550604051610fa290611cc0565b6040518091039020603981905550604051610fbc90611c2d565b6040518091039020603a81905550565b610feb8273ffffffffffffffffffffffffffffffffffffffff1661113e565b61102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102190611f98565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516110539190611c16565b6000604051808303816000865af19150503d8060008114611090576040519150601f19603f3d011682016040523d82523d6000602084013e611095565b606091505b5091509150816110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d190611e58565b60405180910390fd5b60008151111561113857808060200190516110f891908101906113e3565b611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112e90611f78565b60405180910390fd5b5b50505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561118057506000801b8214155b92505050919050565b600081359050611198816121eb565b92915050565b60008083601f8401126111b057600080fd5b8235905067ffffffffffffffff8111156111c957600080fd5b6020830191508360208202830111156111e157600080fd5b9250929050565b600082601f8301126111f957600080fd5b813561120c61120782612037565b61200a565b9150818183526020840193506020810190508385602084028201111561123157600080fd5b60005b8381101561126157816112478882611280565b845260208401935060208301925050600181019050611234565b5050505092915050565b60008151905061127a81612202565b92915050565b60008135905061128f81612219565b92915050565b6000813590506112a481612230565b92915050565b6000813590506112b981612247565b92915050565b6000602082840312156112d157600080fd5b60006112df84828501611189565b91505092915050565b60008060008060006080868803121561130057600080fd5b600061130e88828901611189565b955050602086013567ffffffffffffffff81111561132b57600080fd5b6113378882890161119e565b9450945050604061134a88828901611295565b925050606061135b888289016112aa565b9150509295509295909350565b6000806000806080858703121561137e57600080fd5b600061138c87828801611189565b945050602061139d878288016112aa565b93505060406113ae878288016112aa565b925050606085013567ffffffffffffffff8111156113cb57600080fd5b6113d7878288016111e8565b91505092959194509250565b6000602082840312156113f557600080fd5b60006114038482850161126b565b91505092915050565b6000806040838503121561141f57600080fd5b600061142d85828601611280565b925050602061143e858286016112aa565b9150509250929050565b60006020828403121561145a57600080fd5b6000611468848285016112aa565b91505092915050565b6000806040838503121561148457600080fd5b6000611492858286016112aa565b92505060206114a385828601611189565b9150509250929050565b6114b6816120f5565b82525050565b6114c581612091565b82525050565b6114dc6114d782612091565b6121a6565b82525050565b6114eb816120a3565b82525050565b6114fa816120af565b82525050565b61151161150c826120af565b6121b8565b82525050565b60006115228261205f565b61152c818561206a565b935061153c818560208601612173565b80840191505092915050565b61155181612107565b82525050565b6115608161212b565b82525050565b6000611573601583612075565b91507f4e657875732061646472657373206973207a65726f00000000000000000000006000830152602082019050919050565b60006115b3600e83612086565b91507f536176696e67734d616e616765720000000000000000000000000000000000006000830152600e82019050919050565b60006115f3601c83612075565b91507f5765656b2063616e6e6f7420626520696e2074686520667574757265000000006000830152602082019050919050565b6000611633600783612086565b91507f5374616b696e67000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611673601683612075565b91507f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006000830152602082019050919050565b60006116b3601b83612075565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006116f3601083612086565b91507f5265636f6c6c61746572616c69736572000000000000000000000000000000006000830152601082019050919050565b6000611733602083612075565b91507f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646000830152602082019050919050565b6000611773600783612086565b91507f4d616e61676572000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006117b3601583612075565b91507f456d7074792077686974656c69737420617272617900000000000000000000006000830152602082019050919050565b60006117f3601983612075565b91507f4e6f7420612077686974656c69737465642061646472657373000000000000006000830152602082019050919050565b6000611833600983612086565b91507f4f7261636c6548756200000000000000000000000000000000000000000000006000830152600982019050919050565b6000611873600a83612086565b91507f476f7665726e616e6365000000000000000000000000000000000000000000006000830152600a82019050919050565b60006118b3600a83612086565b91507f50726f787941646d696e000000000000000000000000000000000000000000006000830152600a82019050919050565b60006118f3602e83612075565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b6000611959601d83612075565b91507f5265776172647320617265206e6f742079657420636c61696d61626c650000006000830152602082019050919050565b6000611999601383612075565b91507f416c72656164792077686974656c6973746564000000000000000000000000006000830152602082019050919050565b60006119d9603d83612075565b91507f4e6f2062616c616e636520776f756c64206265207472616e736665727265642060008301527f2d206e6f7420676f696e6720746f20776173746520796f7572206761730000006020830152604082019050919050565b6000611a3f601683612075565b91507f4c502068617320616c726561647920636c61696d6564000000000000000000006000830152602082019050919050565b6000611a7f600f83612075565b91507f41646472657373206973207a65726f00000000000000000000000000000000006000830152602082019050919050565b6000611abf602a83612075565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b25600983612086565b91507f4d657461546f6b656e00000000000000000000000000000000000000000000006000830152600982019050919050565b6000611b65601f83612075565b91507f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e7472616374006000830152602082019050919050565b611ba1816120eb565b82525050565b611bb8611bb3826120eb565b6121d4565b82525050565b6000611bca82856114cb565b601482019150611bda8284611ba7565b6020820191508190509392505050565b6000611bf68285611500565b602082019150611c068284611500565b6020820191508190509392505050565b6000611c228284611517565b915081905092915050565b6000611c38826115a6565b9150819050919050565b6000611c4d82611626565b9150819050919050565b6000611c62826116e6565b9150819050919050565b6000611c7782611766565b9150819050919050565b6000611c8c82611826565b9150819050919050565b6000611ca182611866565b9150819050919050565b6000611cb6826118a6565b9150819050919050565b6000611ccb82611b18565b9150819050919050565b6000606082019050611cea60008301866114ad565b611cf760208301856114bc565b611d046040830184611b98565b949350505050565b6000604082019050611d2160008301856114bc565b611d2e6020830184611b98565b9392505050565b6000606082019050611d4a60008301866114bc565b611d576020830185611b98565b611d646040830184611b98565b949350505050565b6000602082019050611d8160008301846114e2565b92915050565b6000602082019050611d9c60008301846114f1565b92915050565b6000602082019050611db76000830184611548565b92915050565b6000602082019050611dd26000830184611557565b92915050565b60006020820190508181036000830152611df181611566565b9050919050565b60006020820190508181036000830152611e11816115e6565b9050919050565b60006020820190508181036000830152611e3181611666565b9050919050565b60006020820190508181036000830152611e51816116a6565b9050919050565b60006020820190508181036000830152611e7181611726565b9050919050565b60006020820190508181036000830152611e91816117a6565b9050919050565b60006020820190508181036000830152611eb1816117e6565b9050919050565b60006020820190508181036000830152611ed1816118e6565b9050919050565b60006020820190508181036000830152611ef18161194c565b9050919050565b60006020820190508181036000830152611f118161198c565b9050919050565b60006020820190508181036000830152611f31816119cc565b9050919050565b60006020820190508181036000830152611f5181611a32565b9050919050565b60006020820190508181036000830152611f7181611a72565b9050919050565b60006020820190508181036000830152611f9181611ab2565b9050919050565b60006020820190508181036000830152611fb181611b58565b9050919050565b6000602082019050611fcd6000830184611b98565b92915050565b6000606082019050611fe86000830186611b98565b611ff560208301856114f1565b6120026040830184611b98565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561202d57600080fd5b8060405250919050565b600067ffffffffffffffff82111561204e57600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061209c826120cb565b9050919050565b60008115159050919050565b6000819050919050565b60006120c482612091565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121008261214f565b9050919050565b600061211282612119565b9050919050565b6000612124826120cb565b9050919050565b60006121368261213d565b9050919050565b6000612148826120cb565b9050919050565b600061215a82612161565b9050919050565b600061216c826120cb565b9050919050565b60005b83811015612191578082015181840152602081019050612176565b838111156121a0576000848401525b50505050565b60006121b1826121c2565b9050919050565b6000819050919050565b60006121cd826121de565b9050919050565b6000819050919050565b60008160601b9050919050565b6121f481612091565b81146121ff57600080fd5b50565b61220b816120a3565b811461221657600080fd5b50565b612222816120af565b811461222d57600080fd5b50565b612239816120b9565b811461224457600080fd5b50565b612250816120eb565b811461225b57600080fd5b5056fea365627a7a7231582082d0e18f76cf7f2204032a897458dc9a7632b2b412b1d3bcd3a9b475b3ee74de6c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "claimTranche(address,uint256,uint256,bytes32[])": {
        "notice": "************************************* CLAIMING***************************************"
      },
      "seedNewAllocations(bytes32,uint256)": {
        "notice": "************************************* ADMIN***************************************"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 422,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 424,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 486,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_GOVERNANCE",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 353,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_STAKING",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 355,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_PROXY_ADMIN",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 357,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_ORACLE_HUB",
        "offset": 0,
        "slot": "54",
        "type": "t_bytes32"
      },
      {
        "astId": 359,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_MANAGER",
        "offset": 0,
        "slot": "55",
        "type": "t_bytes32"
      },
      {
        "astId": 361,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_RECOLLATERALISER",
        "offset": 0,
        "slot": "56",
        "type": "t_bytes32"
      },
      {
        "astId": 363,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_META_TOKEN",
        "offset": 0,
        "slot": "57",
        "type": "t_bytes32"
      },
      {
        "astId": 365,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "KEY_SAVINGS_MANAGER",
        "offset": 0,
        "slot": "58",
        "type": "t_bytes32"
      },
      {
        "astId": 164,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "nexus",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(INexus)154"
      },
      {
        "astId": 13,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "whitelist",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 538,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "token",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(IERC20)1142"
      },
      {
        "astId": 542,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 548,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "claimed",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 550,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "tranches",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 552,
        "contract": "contracts/prime_token_v2/MerkleDrop.sol:MerkleDrop",
        "label": "thresholdBlock",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1142": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(INexus)154": {
        "encoding": "inplace",
        "label": "contract INexus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}